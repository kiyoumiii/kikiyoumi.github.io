{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "subtitle": "",
    "icon": "https://kiyoumiii.github.io/images/favicon.ico",
    "description": "kiyoumiii's blog",
    "home_page_url": "https://kiyoumiii.github.io",
    "items": [
        {
            "id": "https://kiyoumiii.github.io/2025/01/06/React%E4%B8%8EVue/",
            "url": "https://kiyoumiii.github.io/2025/01/06/React%E4%B8%8EVue/",
            "title": "React与Vue",
            "date_published": "2025-01-06T09:55:46.000Z",
            "content_html": "<h3 id=\"react与vue\"><a class=\"anchor\" href=\"#react与vue\">#</a> React 与 Vue</h3>\n<ol>\n<li>\n<p>什么是 React？<br />\nReact 是一个免费、开源的 JavaScript 库，可以基于组件构建界面，并采用声明式编程方式。由 Meta 公司和一个由开发人员以及公司组成的社区共同维护，React 可用于开发单页、移动和服务器渲染的应用程序。</p>\n</li>\n<li>\n<p>什么是 Vue？<br />\nVue 则是一个用于构建界面的开源 JavaScript 框架，同样提供声明式和基于组件的编程选项。因此，您可以构建简单和复杂的界面。</p>\n</li>\n<li>\n<p>React 和 Vue 的相似之处</p>\n</li>\n</ol>\n<p>这两款 Web 开发工具在许多方面高度相似，主要的初始共同点是：</p>\n<ul>\n<li>虚拟 DOM（文档对象模型）;</li>\n<li>响应式和基于组件的结构；</li>\n<li>JavaScript 使用；</li>\n<li>支持 TypeScript;</li>\n<li>核心库和支持库；</li>\n<li>无缝版本迁移；</li>\n<li>向后兼容性；</li>\n<li>种类繁多的库和工具；</li>\n<li>PWA 支持；</li>\n<li>灵活性、性能和速度；</li>\n<li>大型、活跃的社区。</li>\n</ul>\n<p>React 和 Vue 都采用了虚拟 DOM 这一关键技术，它作为实际 HTML DOM 的 JavaScript 对象副本，在浏览器中呈现为常规网页。虚拟 DOM 的优势在于，它能在应用重新渲染时避免直接操作 HTML DOM，从而提高性能，减少不必要的元素重绘。</p>\n<p>在数据绑定方面，Vue 提供了 v-model 指令，简化了表单的双向数据绑定过程。相比之下，React 没有内置的双向数据绑定解决方案，但允许开发者根据需要自定义实现，以满足特定需求。</p>\n<p>此外，React 和 Vue 都遵循单向数据流的原则，即数据从父组件流向子组件。这种向下数据绑定的方式确保了数据流的清晰和一致，只有在数据发生更改时，子组件才会更新其内容，从而维护了干净且可预测的数据流架构。</p>\n<ol start=\"4\">\n<li>Vue 和 React 的区别</li>\n</ol>\n<p>Vue 和 React 在多个关键词上展现出显著的区别。首先，从定义上来看，Vue 是一个渐进式 JavaScript 框架，而 React 是一个开源 JavaScript 库。这种基础定位的不同，直接影响了它们的用例和适用范围。</p>\n<p>在内容渲染方面，React 采用了 JSX，这是一种专门用于构建 DOM 树的 JavaScript 扩展，非常适合创建 React 组件。相对地，Vue 则采用了不同的方法，它使用 HTML 模板来进行 DOM 渲染，而不是 JSX。</p>\n<p>此外，React 和 Vue 在预构建工具和第三方工具的支持上也存在差异。React 提供了一个强大的架构，包括虚拟 DOM 操作和组件状态管理，但其他功能则主要依赖于社区成员的开发和支持。</p>\n<p>相比之下，Vue 的工具和库则更加平衡。Vue 的核心团队不仅开发了自己的工具和库，还提供了基于社区的解决方案。这种组合使得 Vue 能够更好地满足经验丰富的开发人员和新手的需求。</p>\n<p>综上所述，Vue 与 React 在定义、内容渲染、预构建工具和第三方工具支持等方面都存在显著的差异。这些差异使得两者在各自的领域内都有独特的优势和适用场景。</p>\n<ol start=\"5\">\n<li>灵活性与状态管理<br />\n React</li>\n</ol>\n<p>React 以 UI 为核心，专注于构建 UI 组件，其 XML 风格的语法便于创建包含视图描述的 UI 组件。</p>\n<p>然而，React 本身不提供状态管理功能。对于小型应用，开发者可以利用 React 内置的 Context API 来管理状态，但对于更复杂的 Web 应用，则需要借助第三方库。Redux、MobX、Recoil 和 Zustand 等是流行的状态管理库，其中 Redux 基于 Flux 架构模式，备受推崇。此外，React Router 也是由第三方提供的，并非官方包。</p>\n<p>Vue</p>\n<p>Vue.js 作为一个动态框架，允许开发者使用其基本工具轻松创建应用。但是，如有必要，它还提供您可能需要的绝大多数功能：</p>\n<p>Pinia 或 Vuex 用于状态管理。<br />\nVue Router 用于应用程序 URL 管理。<br />\nVue.js 用于服务器端渲染的服务器端渲染器。<br />\n综上所述，Vue 在灵活性方面表现优异，无论是小型还是大型应用，都提供了直观且强大的解决方案。相比之下，React 则需要开发者根据需要选择和使用第三方库来扩展功能。</p>\n<ol start=\"6\">\n<li>移动开发</li>\n</ol>\n<p>React</p>\n<p>React 在移动应用程序开发领域以 React Native 框架崭露头角。React Native 是一个利用 JavaScript 构建跨平台 iOS 和 Android 应用的工具，自 2015 年初问世以来，便基于 React 不断演进。该框架摒弃了 WebView 和 HTML 技术，转而采用原生组件与 JS 的绑定，并将其封装在 React 中。</p>\n<p>尽管 iOS 对 React Native 的支持略胜一筹，但 Android 的支持也在不断进步，为开发者提供了高质量的跨平台应用开发服务。</p>\n<p>此外，React 在渐进式 Web 应用程序（PWA）开发方面也展现出了巨大潜力。自 2015 年起，PWA 便凭借其接近原生应用性能的 Web 技术（CSS、HTML 和 JavaScript）构建方式而备受瞩目。</p>\n<p>Vue</p>\n<p>另一方面，Vue.js 与 NativeScript （NS） 配对，后者允许您使用 XML、CSS 和 JavaScript 构建跨平台应用程序。NativeScript 解决了与上面提到的 React Native 相同的问题，但它们有一些不同。</p>\n<p>使用 HTML/CSS/JavaScript 的 Web 开发人员更容易理解 NativeScript 语法和实现。在标记创建中，XML 用法也类似于 HTML。<br />\nNativeScript 可以直接访问本机平台 API。</p>\n",
            "tags": [
                "React",
                "React,Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/06/%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%AF%94%E6%B3%A8%E8%A7%A3/",
            "url": "https://kiyoumiii.github.io/2025/01/06/%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%AF%94%E6%B3%A8%E8%A7%A3/",
            "title": "项目对比注解",
            "date_published": "2025-01-06T09:29:51.000Z",
            "content_html": "<h2 id=\"项目对比文章的注解篇\"><a class=\"anchor\" href=\"#项目对比文章的注解篇\">#</a> 项目对比文章的注解篇</h2>\n<ol>\n<li>Vuex 和 Pinia</li>\n</ol>\n<p>Vuex 和 Pinia 都是 Vue.js 的状态管理库，用于帮助开发者管理大型应用中的全局状态。它们的主要功能是提供一个集中存储和管理应用状态的机制，使得状态的更新和访问更加可预测和可维护。</p>\n<p>API 风格<br />\n Pinia 使用类似 Vue 组件的 API 来创建和使用 store，而 Vuex 使用一个全局对象来访问 store。<br />\n在 Pinia 中，状态是响应式的，这意味着当状态发生变化时，组件会自动更新。在 Vuex 中，我们需要手动触发更新。<br />\nPinia 的 store 是模块化的，这意味着每个 store 可以包含自己的状态、操作和插件。在 Vuex 中，store 是全局的，这意味着所有的状态和操作都在同一个 store 中。</p>\n<p>Vuex 的功能</p>\n<ul>\n<li>集中存储状态：Vuex 提供了一个全局的 state 对象，所有组件都可以访问和修改这个状态。</li>\n<li>严格的状态更新规则：状态只能通过提交 mutation 来更新，而 mutation 必须是同步的。</li>\n<li>异步操作：通过 actions 来处理异步逻辑，然后提交 mutation 更新状态。</li>\n<li>模块化：支持将状态管理拆分成多个模块，每个模块可以有自己的 state、getters、mutations 和 actions。</li>\n<li>严格模式：可以开启严格模式来确保状态只通过 mutation 来更新，避免状态被意外修改。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// store.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'decrement'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 组件中使用</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapState<span class=\"token punctuation\">,</span> mapActions <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Pinia 的功能</p>\n<ul>\n<li>更简洁的 API：Pinia 提供了更简洁和直观的 API，使得状态管理更加简单易用。</li>\n<li>组合式 API 支持：Pinia 完全基于 Vue 3 的组合式 API 设计，与 Vue 3 的特性（如 setup 函数）更加契合。</li>\n<li>无严格模式：Pinia 不需要严格模式，因为它的设计使得状态更新更加自然和安全。</li>\n<li>类型推断：Pinia 提供了更好的 TypeScript 支持，能够自动推断状态的类型，减少了类型注解的需要。</li>\n<li>插件系统：支持插件系统，可以扩展 Pinia 的功能。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCounterStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'counter'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>区别</p>\n<ul>\n<li>API 设计：Vuex 的 API 相对复杂，需要定义 state、getters、mutations、actions 等多个部分，而 Pinia 的 API 更为简洁，通过 defineStore 函数来定义状态管理。</li>\n<li>与 Vue 的集成：Vuex 主要与 Vue 2 和 Vue 3 的选项式 API 集成，而 Pinia 完全基于 Vue 3 的组合式 API 设计，更适合 Vue 3 的开发方式。</li>\n<li>类型支持：Pinia 提供了更好的 TypeScript 支持，能够自动推断类型，而 Vuex 在 TypeScript 支持方面需要更多的类型注解。</li>\n<li>性能和易用性：Pinia 由于其简洁的设计和与 Vue 3 的紧密集成，通常被认为在性能和易用性上更优。</li>\n<li>社区和生态：Vuex 是 Vue.js 的官方状态管理库，拥有较大的社区和丰富的生态支持，而 Pinia 是 Vue 3 推荐的状态管理库，逐渐在社区中获得更多的关注和支持。</li>\n</ul>\n<ol start=\"2\">\n<li>watch 和 watchEffect</li>\n</ol>\n<p>watch 和 watchEffect 是 Vue 3 中用于响应式地观察数据变化的两个 API，它们在使用场景和行为上有一些区别。</p>\n<ul>\n<li>watch<br />\nwatch API 与 vue2 选项式 API this.$watch (以及相应的 watch 选项) 完全等效。watch<br />\n 需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的 —— 即回调仅在侦听源发生变化时被调用。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 侦听一个 getter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">count<span class=\"token punctuation\">,</span> prevCount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 直接侦听一个 ref</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">count<span class=\"token punctuation\">,</span> prevCount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 监听多个源</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fooRef<span class=\"token punctuation\">,</span> barRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>prevFoo<span class=\"token punctuation\">,</span> prevBar<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>watchEffect<br />\n 立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// -> logs 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// -> logs 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>区别</p>\n<ul>\n<li>执行时机：watchEffect 是立即执行的，在页面加载时会主动执行一次，来收集依赖；而 watch 是惰性地执行副作用，它不会立即执行，但可以配置 immediate，使其主动触发</li>\n<li>参数不同：watchEffect 只需要传递一个回调函数，不需要传递侦听的数据，它会在页面加载时主动执行一次，来收集依赖；而 watch 至少要有两个参数（第三个参数是配置项），第一个参数是侦听的数据，第二个参数是回调函数</li>\n<li>结果不同：watchEffect 获取不到更改前的值；而 watch 可以同时获取更改前和更改后的值</li>\n</ul>\n<ol start=\"3\">\n<li>语法糖内的 defineProps 及 defineEmits、defineExpose</li>\n</ol>\n<p>defineProps 和 defineEmits 都是只能在  <code>&lt;script setup&gt; </code> 中使用的编译器宏。他们不需要导入，且会随着  <code>&lt;script setup&gt; </code> 的处理过程一同被编译掉。</p>\n<p>defineProps 接收与 props 选项相同的值，defineEmits 接收与 emits 选项相同的值，它们具备完整的类型推断并且在 script setup 中是直接可用的。</p>\n<p>defineProps 或 defineEmits 要么使用运行时声明，要么使用类型声明。同时使用两种声明方式会导致编译报错</p>\n<ul>\n<li>defineProps<br />\n 获取组件传值：父传子 defineProps</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div @click<span class=\"token operator\">=</span><span class=\"token string\">\"clickThis\"</span><span class=\"token operator\">></span><span class=\"token number\">1111</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  defineProps<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 采用 ts 专有声明，无默认值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    num<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token comment\">// 采用 ts 专有声明，有默认值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        msg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        labels<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">withDefaults</span><span class=\"token punctuation\">(</span>defineProps<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function-variable function\">labels</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">defineProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 非 ts 专有声明</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span>Number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>defineEmits<br />\ndefineEmits 子组件向父组件事件传递：子传父</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div @click<span class=\"token operator\">=</span><span class=\"token string\">\"clickThis\"</span><span class=\"token operator\">></span>点我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/*ts 专有 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> emit<span class=\"token operator\">=</span> defineEmits<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* 非 ts 专有 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> emit<span class=\"token operator\">=</span> <span class=\"token function\">defineEmits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clickThis</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>defineExpose<br />\n 子组件暴露属性和方法给父组件 defineExpose</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>子组件helloword<span class=\"token punctuation\">.</span>vue<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">defineExpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  count</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/06/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%80%E8%A7%88%E8%A1%A8/",
            "url": "https://kiyoumiii.github.io/2025/01/06/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%80%E8%A7%88%E8%A1%A8/",
            "title": "vue脚手架一览表",
            "date_published": "2025-01-06T08:01:29.000Z",
            "content_html": "<h2 id=\"vue脚手架一览表\"><a class=\"anchor\" href=\"#vue脚手架一览表\">#</a> vue 脚手架一览表</h2>\n<p>1、使用 vue 脚手架安装项目</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>node-v</td>\n<td>查看 node 版本</td>\n</tr>\n<tr>\n<td>npm -v</td>\n<td>查看 npm 版本</td>\n</tr>\n<tr>\n<td>nrm</td>\n<td>用来切换 npm 下载源：安装指令：npm install nrm -gnpm install nrm -g 可以使用 nrm ls，查看有哪些源；使用 nrm use XXX 切换下载源</td>\n</tr>\n<tr>\n<td>@vue/cli</td>\n<td>vue 较新版本的脚手架，用来创建 vue 项目：1、使用 npm install -g @vue/cli 安装脚手架 2、执行 vue create XXX，创建项目，项目名是 XXX 3、执行 cd XXX，进入项目 4、执行 npm run serve 启动项目。备注：如果之前安装过老版本的脚手架工具，可以使用 npm uninstall vue-cli -g 指令卸载一下</td>\n</tr>\n</tbody>\n</table>\n<p>2、路由</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createRouter()</td>\n<td>创建路由</td>\n</tr>\n<tr>\n<td>path</td>\n<td>配置路由路径</td>\n</tr>\n<tr>\n<td>name</td>\n<td>配置路由的名字</td>\n</tr>\n<tr>\n<td>component</td>\n<td>配置路由的组件</td>\n</tr>\n<tr>\n<td>router-link</td>\n<td>跳转路由的标签，具体跳到哪，可以用 to 属性来定义</td>\n</tr>\n<tr>\n<td>router-view</td>\n<td>负责展示当前路由对应的组件内容</td>\n</tr>\n<tr>\n<td>import</td>\n<td>异步加载路由</td>\n</tr>\n</tbody>\n</table>\n<p>3、vuex</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createStore()</td>\n<td>创建 vuex，管理全局数据</td>\n</tr>\n<tr>\n<td>state</td>\n<td>用来创建全局数据可以通过 <span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMuJHN0b3JlLnN0YXRlLnh4eA==\">this.$store.state.xxx</span> 获取具体的数据</td>\n</tr>\n<tr>\n<td>actions</td>\n<td>定义 action</td>\n</tr>\n<tr>\n<td>dispatch</td>\n<td>派发 action</td>\n</tr>\n<tr>\n<td>mutations</td>\n<td>定义 mutations</td>\n</tr>\n<tr>\n<td>commit</td>\n<td>提交一个 commit，触发一个 mutation; 在 action 中使用：this.commit (xxx); 在 mutation 中使用：this.$store.commit (xxx)</td>\n</tr>\n<tr>\n<td>modules</td>\n<td>对 store 进行局部拆分（了解即可）</td>\n</tr>\n</tbody>\n</table>\n<p>4、发送 ajax 请求</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>axios</td>\n<td>插件，用来发送 ajax 请求:npm install axios --save 通过 get 方法，发送 get 请求，通过 post 方法，发送 post 请求</td>\n</tr>\n</tbody>\n</table>\n<p>5、插件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vetur</td>\n<td>vscode 开发 vue 项目时，语法提示插件</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/06/Sass-Scss-css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/",
            "url": "https://kiyoumiii.github.io/2025/01/06/Sass-Scss-css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/",
            "title": "Sass/Scss-css预处理器",
            "date_published": "2025-01-06T05:47:26.000Z",
            "content_html": "<h2 id=\"sassscss-css预处理器\"><a class=\"anchor\" href=\"#sassscss-css预处理器\">#</a> Sass/Scss-css 预处理器</h2>\n<h3 id=\"sass的诞生\"><a class=\"anchor\" href=\"#sass的诞生\">#</a> Sass 的诞生</h3>\n<p>众所周知 css 并不能算是一们真正意义上的 “编程” 语言，它本身无法未完成像其它编程语言一样的嵌套、继承、设置变量等工作。<br />\n为了解决 css 的不足，开发者们想到了编写一种对 css 进行预处理的 “中间语言”，可以实现一些 “编程” 语言才有的功能，然后自动编译成 css 供浏览识别，这样既一定程度上弥补了 css 的不足，也无需一种新的语言来代替 css 以供浏览器识别。<br />\n于是 css 预处理语言 SASS 就应运而生了。它诞生于 2007 年，是最早成熟 css 预处理语言。</p>\n<h3 id=\"1-什么是sass\"><a class=\"anchor\" href=\"#1-什么是sass\">#</a> 1. 什么是 Sass?</h3>\n<p>Sass 是 css 的预处理器，它能用来清晰地、结构化地描述文件样式，有着比普通 CSS 更加强大的功能。</p>\n<p>Sass 能够提供更简洁、更优雅的语法，同时提供多种功能来创建可维护和管理的样式表，有助于更好地组织管理样式文件，以及更高效地开发项目。</p>\n<p>sass 是采用的 Ruby 语言编写的一款 css 预处理语言</p>\n<p>sass 是最早的 css 预处理语言，有比 less 更为强大的功能。也是目前企业级开发中应用最多的 CSS 预处理器。</p>\n<h3 id=\"2-列出-sass-的一些常用功能\"><a class=\"anchor\" href=\"#2-列出-sass-的一些常用功能\">#</a> 2、列出 Sass 的一些常用功能 ？</h3>\n<p>常用功能</p>\n<p>一个开源的预处理器，被解析为 CSS<br />\n 完全兼容 CSS3<br />\n 在 CSS 基础上增加变量、嵌套 、混合等功能<br />\n在更少的时间内轻松地编写 CSS 代码<br />\n自定义输出格式</p>\n<h3 id=\"3-解释-scss-和-sass-之间的区别\"><a class=\"anchor\" href=\"#3-解释-scss-和-sass-之间的区别\">#</a> 3、解释 SCSS 和 Sass 之间的区别 ？</h3>\n<p>区别</p>\n<p>Sass 和 SCSS 其实就是同一种东西，我们平时都称之为 Sass，两者之间不同之处主要有以下两点：</p>\n<ul>\n<li>文件扩展名不同，Sass 是以.sass 后缀为扩展名，而 SCSS 是以.scss 后缀为扩展名。</li>\n<li>语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号 {} 和分号；，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。</li>\n<li>sass 从第三代开始，放弃了缩进式风格，并且完全向下兼容普通的 css 代码，这一代的 sass 也被称为 scss。</li>\n</ul>\n<h3 id=\"4-sass-中的嵌套规则是什么\"><a class=\"anchor\" href=\"#4-sass-中的嵌套规则是什么\">#</a> 4、Sass 中的嵌套规则是什么 ？</h3>\n<p>嵌套规则</p>\n<p>嵌套是一种将多个逻辑结构相互组合的方法。在 Sass 中，各种 CSS 规则相互连接。</p>\n<p>例如：如果使用多个选择器，则可以在另一个选择器内部使用一个选择器来创建复合选择器。</p>\n<h3 id=\"5-sass-基础知识\"><a class=\"anchor\" href=\"#5-sass-基础知识\">#</a> 5、Sass 基础知识</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Live Sass Compiler（Sass 编译插件）</td>\n<td>VScode 编译 sass 的插件</td>\n</tr>\n<tr>\n<td>.scss （sass 文件后缀名）</td>\n<td>sass 文件的后缀名之一。在该文件中，可以写花括号 {} 和分号</td>\n</tr>\n<tr>\n<td>.sass （sass 文件后缀名）</td>\n<td>sass 文件的后缀名之一。在该文件中，不能写花括号 {} 和分号</td>\n</tr>\n<tr>\n<td>&amp;（sass 修饰符）</td>\n<td>修饰符，表示上层标签。如下: <code>span&#123;&amp;:active&#123;color: red;&#125;&#125;编译后的代码是 span:active &#123; color: red; &#125; </code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"6-sass-常用变量\"><a class=\"anchor\" href=\"#6-sass-常用变量\">#</a> 6、sass 常用变量</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$ （变量前缀）</td>\n<td>使用 $，可以用来定义 css 变量（变量名可自定义）</td>\n</tr>\n<tr>\n<td>lighten()</td>\n<td>颜色变量相关的功能函数，可以把颜色变浅</td>\n</tr>\n<tr>\n<td>darken()</td>\n<td>颜色变量相关的功能函数，可以把颜色变深</td>\n</tr>\n<tr>\n<td>@import</td>\n<td>关键字，可以用来引入 css 变量</td>\n</tr>\n<tr>\n<td>@mixin</td>\n<td>关键字，用来定义混入的内容</td>\n</tr>\n<tr>\n<td>@include</td>\n<td>关键字，用来引入 @mixin 定义的混入</td>\n</tr>\n<tr>\n<td>@content</td>\n<td>关键字。当引入 mixin 时，@include 花括号中的内容可以用该关键字代替</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/05/vue%E8%BF%9B%E9%98%B6%E4%B8%80%E8%A7%88/",
            "url": "https://kiyoumiii.github.io/2025/01/05/vue%E8%BF%9B%E9%98%B6%E4%B8%80%E8%A7%88/",
            "title": "vue进阶一览",
            "date_published": "2025-01-05T13:07:22.000Z",
            "content_html": "<h2 id=\"vue3进阶一览表\"><a class=\"anchor\" href=\"#vue3进阶一览表\">#</a> Vue3 进阶一览表</h2>\n<p>1、Vue 的设计模式</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mvvm</td>\n<td>m 代表 model，指代数据；v 代表 view，指代视图；vm 代表 viewModel，指代视图数据连接层</td>\n</tr>\n<tr>\n<td>vm</td>\n<td>自定义的变量名，用来接收 app.mount () 的返回值，代表 vue 应用的根组件。利用该变量，可以使用 vm.$data 直接访问、操作根组件上的数据</td>\n</tr>\n</tbody>\n</table>\n<p>2、Vue 生命周期函数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeCreate()</td>\n<td>在实例生成之前，会自动执行该函数</td>\n</tr>\n<tr>\n<td>created()</td>\n<td>在实例生成之后，会自动执行该函数</td>\n</tr>\n<tr>\n<td>beforeMount()</td>\n<td>在组件内容被渲染到页面之前，会自动执行该函数</td>\n</tr>\n<tr>\n<td>mounted()</td>\n<td>组件内容被渲染到页面后，会自动执行该函数</td>\n</tr>\n<tr>\n<td>beforeUpdate()</td>\n<td>当 data 中的数据发生变化时会自动执行该函数</td>\n</tr>\n<tr>\n<td>updated()</td>\n<td>当 data 中的数据发生变化，同时页面完成更新后，会自动执行的函数</td>\n</tr>\n<tr>\n<td>beforeUnmount()</td>\n<td>当 Vue 应用失效时，会自动执行该函数</td>\n</tr>\n<tr>\n<td>unmounted()</td>\n<td>当 Vue 应用失效后，同时 dom 完全销毁之后，自动执行的函数</td>\n</tr>\n</tbody>\n</table>\n<p>3、vue 实例的方法</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>unmount()</td>\n<td>销毁 vue 应用</td>\n</tr>\n</tbody>\n</table>\n<p>4、插槽</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;slot&gt;&lt;/slot&gt;</code></td>\n<td>插槽。父组件可以利用插槽往子组件中传入 dom 结构</td>\n</tr>\n<tr>\n<td>name</td>\n<td>定义插槽的名字 (具名插槽）。父组件要使用 “v-slot: 插槽名” 指定为哪个插槽传递内容 “v-slot: 插槽名” 可以简写成 “# 插槽名”</td>\n</tr>\n<tr>\n<td><code>&lt;template&gt;&lt;/template&gt;</code></td>\n<td>占位符</td>\n</tr>\n<tr>\n<td>v-slot</td>\n<td>父组件利用 v-slot 可以接收到子组件绑定到插槽上的数据</td>\n</tr>\n</tbody>\n</table>\n<p>5、标签、组件的过渡与动画</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;transition&gt;&lt;/transition&gt;</code></td>\n<td>用来给标签、组件添加过渡效果</td>\n</tr>\n<tr>\n<td>.v-enter-from</td>\n<td>元素准备入场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-enter-to</td>\n<td>元素准备离场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-enter-active</td>\n<td>元素入场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-from</td>\n<td>元素准备离场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-to</td>\n<td>元素已经离场后的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-active</td>\n<td>元素离场过程中的默认类名</td>\n</tr>\n<tr>\n<td>name</td>\n<td>通过给<transition></transition>组件设置 name 属性，可以统一修改元素做动画时的类名</td>\n</tr>\n<tr>\n<td>.enter-from-class</td>\n<td>单独设置元素准备入场时的类名</td>\n</tr>\n<tr>\n<td>.enter-active-class</td>\n<td>单独设置元素入场的过程中的类名</td>\n</tr>\n<tr>\n<td>.enter-to-class</td>\n<td>单独设置元素入场之后的类名</td>\n</tr>\n<tr>\n<td>.leave-from-class</td>\n<td>单独设置元素准备出场时的类名</td>\n</tr>\n<tr>\n<td>.leave-active-class</td>\n<td>单独设置元素出场过程中的类名</td>\n</tr>\n<tr>\n<td>.leave-to-class</td>\n<td>单独设置元素出场之后的类名</td>\n</tr>\n<tr>\n<td>type</td>\n<td>当元素既有过渡又有动画，并且二者时间不一致时，使用 type 属性，可以指定以哪一个时间为准</td>\n</tr>\n<tr>\n<td>:duration</td>\n<td>设置过渡、动画的时间，单位是毫秒</td>\n</tr>\n<tr>\n<td>:css</td>\n<td>设置是否使用 css 动画</td>\n</tr>\n<tr>\n<td>@before-enter</td>\n<td>元素准备入场时的钩子</td>\n</tr>\n<tr>\n<td>@enter</td>\n<td>元素入场过程中的钩子</td>\n</tr>\n<tr>\n<td>@after-enter</td>\n<td>元素入场结束时的钩子</td>\n</tr>\n<tr>\n<td>@before-leave</td>\n<td>元素准备出场时的钩子</td>\n</tr>\n<tr>\n<td>@leave</td>\n<td>元素出场过程中的钩子</td>\n</tr>\n<tr>\n<td>@leave-after</td>\n<td>元素出场结束时的钩子</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>设置多个单元素之间状态切换时，可以采取的模式：out-in：先隐藏，再进来 in-out：先进来，再隐藏</td>\n</tr>\n<tr>\n<td>appear</td>\n<td>设置初次显示的元素，也有动画效果</td>\n</tr>\n</tbody>\n</table>\n<p>6、列表动画</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;transition-group&gt;&lt;/transition-group&gt;</code></td>\n<td>用来定义列表动画。使用该组件包裹的一组元素，当元素新增或减少时，可以设置动画效果。动画的相关效果可以设置在默认类名 v-enter-from、v-enter-active、v-enter-to、v-leave-from、v-leave-active、v-leave-to 下</td>\n</tr>\n<tr>\n<td>.v-move</td>\n<td>列表元素移动过程中的，默认的类名</td>\n</tr>\n</tbody>\n</table>\n<p>7、 mixin 混入</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mixins</td>\n<td>定义局部的混入</td>\n</tr>\n<tr>\n<td>app.mixin()</td>\n<td>定义全局的混入</td>\n</tr>\n<tr>\n<td>$options</td>\n<td>可以通过该属性，获取 vue 应用中的自定义属性</td>\n</tr>\n<tr>\n<td>app.config.optionMergeStragies</td>\n<td>为自定义选项定义合并策略</td>\n</tr>\n</tbody>\n</table>\n<p>8、自定义指令 directive</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>app.directive()</td>\n<td>定义全局自定义指令，使用指令时，直接在元素上写上 “v - 指令名” 即可，自定义指令时，也可以使用 mounted、updated 等生命周期函数</td>\n</tr>\n<tr>\n<td>directives:{}</td>\n<td>引入局部指令</td>\n</tr>\n<tr>\n<td>binding</td>\n<td>获取指令上的相关信息</td>\n</tr>\n</tbody>\n</table>\n<p>9、teleport 传送门</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;teleport&gt;&lt;/teleport&gt;</code></td>\n<td>传送门，用来将包裹的内容，传送到 to 属性对应的 dom 元素下</td>\n</tr>\n</tbody>\n</table>\n<p>10、 render 函数（选学）</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>render()</td>\n<td>用来定义组件的内容</td>\n</tr>\n<tr>\n<td>$slots</td>\n<td>用来获取插槽的相关内容</td>\n</tr>\n</tbody>\n</table>\n<p>11、 plugin 插件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>install(){}</td>\n<td>定义插件时，会执行的方法</td>\n</tr>\n<tr>\n<td>app.use()</td>\n<td>使用插件</td>\n</tr>\n<tr>\n<td>app.provide()</td>\n<td>注入全局依赖</td>\n</tr>\n<tr>\n<td>app.config.globalProperties</td>\n<td>扩展全局属性</td>\n</tr>\n<tr>\n<td>$watch</td>\n<td>vue 实例的方法，用来监听数据</td>\n</tr>\n</tbody>\n</table>\n<p>12、 composition API</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setup(){}</td>\n<td>实例被完全初始化之前执行的函数，可以使用 this.$options.setup () 获取 setup 函数中的返回值</td>\n</tr>\n<tr>\n<td>ref()</td>\n<td>将基础类型的数据，转成响应式 配合 ref 属性，可用于获取 dom 节点</td>\n</tr>\n<tr>\n<td>reactive()</td>\n<td>将非基础型的数据，转成响应式</td>\n</tr>\n<tr>\n<td>readonly()</td>\n<td>将响应式数据转成只读数据</td>\n</tr>\n<tr>\n<td>toRefs()</td>\n<td>从响应式对象中解构出具备响应式的数据</td>\n</tr>\n<tr>\n<td>toRef()</td>\n<td>可以从响应式数据中解构出不存在的数据，并且解构出来的值是响应式的</td>\n</tr>\n<tr>\n<td>context</td>\n<td>setup 函数的第二个参数，可以用来获取到 None-Props 属性、插槽，以及 emit 方法</td>\n</tr>\n<tr>\n<td>computed()</td>\n<td>用来定义计算属性，里面可以写 get、set 方法</td>\n</tr>\n<tr>\n<td>watch()</td>\n<td>监听器，可以让其监一个或多个数据的变化</td>\n</tr>\n<tr>\n<td>immediate</td>\n<td>配置 watch 监听器，让其变成非惰性</td>\n</tr>\n<tr>\n<td>watchEffect()</td>\n<td>监听器，会自动检测自己内部的代码，如果自己内部代码的某些依赖变化了，watchEffect 方法就会自动执行</td>\n</tr>\n<tr>\n<td>provide()</td>\n<td>祖先组件，通过 provide，向子孙组件注入依赖</td>\n</tr>\n<tr>\n<td>inject()</td>\n<td>子孙组件，通过 inject，来获取祖先组件注入的依赖</td>\n</tr>\n<tr>\n<td>useStore()</td>\n<td>用来获取 store，从而操作 vuex 中的数据</td>\n</tr>\n</tbody>\n</table>\n<p>13、composition API 中的生命周期函数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onBeforeMount(){}</td>\n<td>vue 实例即将挂载到页面上的时候执行，等价于 beforeMount</td>\n</tr>\n<tr>\n<td>onMounted(){}</td>\n<td>vue 实例挂载到页面上之后执行，等价于 mounted</td>\n</tr>\n<tr>\n<td>onBeforeUpdate(){}</td>\n<td>当数据发生变化时执行，等价于 beforeUpdate</td>\n</tr>\n<tr>\n<td>onUpdated(){}</td>\n<td>当数据发生变化，同时页面完成更新后，会自动执行，等价于 updated</td>\n</tr>\n<tr>\n<td>onBeforeUnmount(){}</td>\n<td>组件从页面移除之前，会自动执行该函数，等价于 beforeUnMount</td>\n</tr>\n<tr>\n<td>onUnmounted(){}</td>\n<td>组件从页面移除之后，自动执行的函数，等价于 unmounted</td>\n</tr>\n<tr>\n<td>onRenderTracked(){}</td>\n<td>每次渲染之后，收集依赖的时候会自动执行的函数</td>\n</tr>\n<tr>\n<td>onRenderTriggered(){}</td>\n<td>每次重新渲染被触发的时候，自动执行的函数</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/05/vue%E5%9F%BA%E7%A1%80%E4%B8%80%E8%A7%88/",
            "url": "https://kiyoumiii.github.io/2025/01/05/vue%E5%9F%BA%E7%A1%80%E4%B8%80%E8%A7%88/",
            "title": "vue基础一览",
            "date_published": "2025-01-05T11:57:41.000Z",
            "content_html": "<h2 id=\"vue3基础一览表\"><a class=\"anchor\" href=\"#vue3基础一览表\">#</a> Vue3 基础一览表</h2>\n<p>Vue 是一套用于构建用户界面的渐进式框架</p>\n<p>与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。 另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p>1、Vue 实例（应用）相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vue.createApp()</td>\n<td>创建 vue 实例（应用），参数可以决定根组件如何渲染</td>\n</tr>\n<tr>\n<td>mount(){}</td>\n<td>该方法可以将 vue 实例，挂载在 dom 元素上</td>\n</tr>\n<tr>\n<td>template</td>\n<td>模板，用来定义该 vue 应用的展示内容。</td>\n</tr>\n<tr>\n<td>data(){}</td>\n<td>用来定义数据</td>\n</tr>\n<tr>\n<td><code>&#123;&#123;&#125;&#125;</code></td>\n<td>插值表达式① 可以用来将变量渲染到 dom 结构中。用于起始标签与闭合标签之间②  <code>&#123;&#123;&#125;&#125;</code>  中间可以写 js 表达式</td>\n</tr>\n<tr>\n<td>$data</td>\n<td>vue 实例的属性，可以用来操作 data 中定义的数据</td>\n</tr>\n<tr>\n<td>methods:{}</td>\n<td>里面可以书写方法（函数）</td>\n</tr>\n<tr>\n<td>computed:{}</td>\n<td>计算属性，当计算属性依赖的内容发生变更时，才会重新执行计算</td>\n</tr>\n<tr>\n<td>watch:{}</td>\n<td>监听器，可以监听数据的改变，做异步操作</td>\n</tr>\n</tbody>\n</table>\n<p>2、Vue 样式相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:class</td>\n<td>v-bind:class 的简写形式，为元素绑定动态类名</td>\n</tr>\n<tr>\n<td>$attrs</td>\n<td>可以用来获取父组件绑定在子组件身上的属性（Non-Props 属性）</td>\n</tr>\n<tr>\n<td>:style</td>\n<td>v-bind:style 的简写形式，为元素绑定动态的行内样式</td>\n</tr>\n</tbody>\n</table>\n<p>3、Vue 常见指令</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v-on</td>\n<td>绑定事件 ① “v-on:” 可以简写成 @ ② 可以使用 “@[变量名]”，绑定动态事件。即，具体绑定哪个事件，由 “变量名” 决定 ③ 事件处理函数中，可以使用事件对象 event ④ 事件处理函数中，如果想传递多个参数，可以使用 $event 指代事件对象</td>\n</tr>\n<tr>\n<td>v-if ，v-else-if ，v-else</td>\n<td>条件渲染：通过控制 dom 结构的存在与否来实现区块的显示和隐藏</td>\n</tr>\n<tr>\n<td>三者可以组合使用</td>\n</tr>\n<tr>\n<td>v-show</td>\n<td>条件渲染：&gt; 通过控制元素的 display 属性来控制区块的显示和隐藏</td>\n</tr>\n<tr>\n<td>v-for</td>\n<td>列表渲染：用来循环数组、对象为了提高性能，可以使用 :key（前面没有出现:key, 要不要考虑加上）为元素绑定唯一的 key 值</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>① 表单中的内容与 data 方法中的变量，进行双向数据绑定 ② 复选框，可以通过 true-value、false-value 属性指定选中、没选中时显示的值（不常用） ③ v-model 可以使用.lazy 修饰符，减少数据的变化频率（不常用） ④ v-model 可以使用.number 修饰符将数据转换成数字（不常用） ⑤ v-model 可以使用.trim 修饰符去除数据首尾的空格</td>\n</tr>\n<tr>\n<td>v-bind</td>\n<td>① 可以将标签 / 组件上的某个属性与数据变量进行绑定。 ② “v-bind:” 可以简写成 “:” ③ 可以使用 “:[变量名]”，绑定动态属性。即，具体绑定哪个属性，由 “变量名” 决定</td>\n</tr>\n<tr>\n<td>v-html</td>\n<td>识别变量中的 html 标签；将变量中的 html 结构解析成 dom 结构</td>\n</tr>\n<tr>\n<td>v-once</td>\n<td>标签 / 组件只渲染一次；渲染一次后，如果数据变化，标签 / 组件的内容不会跟随变化</td>\n</tr>\n</tbody>\n</table>\n<p>4、Vue 事件修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.prevent</td>\n<td>阻止默认事件</td>\n</tr>\n<tr>\n<td>.stop</td>\n<td>阻止事件冒泡</td>\n</tr>\n<tr>\n<td>.self</td>\n<td>只有操作自身时，才会触发自身上的事件（常用于点击事件，即只有点击自己时，才会触发自身上绑定的点击事件）</td>\n</tr>\n<tr>\n<td>.once</td>\n<td>事件只触发一次</td>\n</tr>\n<tr>\n<td>.capture</td>\n<td>把事件的运营模式变成捕获（不常用）</td>\n</tr>\n<tr>\n<td>.passive</td>\n<td>提升事件性能，常用于滚动事件 scroll（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>5、Vue 按键修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.enter</td>\n<td>触发事件的按键是 enter 键，才会真正触发事件。类似的按键修饰符还有.tab、.delete、.esc、.up、.down、.left、.right、.ctrl（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>6、鼠标修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.left</td>\n<td>触发事件的鼠标按键是左键，才会真正触发事件。类似的按键修饰符还有.right、.middle（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>7、精确修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.exact</td>\n<td>精确的按住指定键，才会触发事件（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>8、Vue dom 相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ref</td>\n<td>标签、组件设置该属性后，可以通过 “<span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMuJHJlZnMueHh4\">this.$refs.xxx</span>” 的形式获取到该标签的 dom 节点、该组件的引用</td>\n</tr>\n</tbody>\n</table>\n<p>9、创建组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>app.component()</td>\n<td>组定义全局组件，其中 “app” 是保存 Vue 实例的变量</td>\n</tr>\n<tr>\n<td>components:{}</td>\n<td>注册局部组件</td>\n</tr>\n</tbody>\n</table>\n<p>10、组件之间传值</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>props</td>\n<td>父组件调用子组件时，可以通过标签属性的形式给子组件传值。子组件内部通过 props 属性接收传过来的值。子组件接收值时，可以进行校验：type 用来校验数据类型，default 用来设置默认值，require 用来设置必填</td>\n</tr>\n<tr>\n<td>Non-Props</td>\n<td>父组件给子组件传递内容的时候，子组件不通过 props 接收。此时 vue 底层会把传递过来的属性，放在子组件最外层元素上，将其变成子组件的一个属性</td>\n</tr>\n<tr>\n<td>inheritAttrs</td>\n<td>用来设置子组件是否继承父组件传递过来的 Non-props 属性</td>\n</tr>\n<tr>\n<td>$emit</td>\n<td>子组件通过 $emit 方法触发自定义事件，利用该事件可以给父组件传值</td>\n</tr>\n<tr>\n<td>emits</td>\n<td>声明组件会向外触发什么事件。通过 emits 属性我们就能知道该组件会向外触发什么事件</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>父子组件之间可以通过 v-model 实现双向数据绑定，子组件接收到的数据可以用 modelValue 表示父组件要通过 v-model 给子组件绑定数据（选学绑定多个数据）</td>\n</tr>\n</tbody>\n</table>\n<p>11、动态组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;component/&gt;</code></td>\n<td>定义动态组件。具体显示哪个组件，由 “:is” 属性的值决定</td>\n</tr>\n<tr>\n<td><code> &lt;keep-alive&gt;&lt;/keep-alive&gt;</code></td>\n<td>缓存标签。包裹动态组件后，可以保留上一个组件中的内容</td>\n</tr>\n</tbody>\n</table>\n<p>12、异步组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vue.defineAsyncComponent()</td>\n<td>该方法可以创建异步组件（了解即可）</td>\n</tr>\n</tbody>\n</table>\n<p>13、依赖、注入</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>provide，inject</td>\n<td>祖先组件，通过 provide，可以向子孙组件注入依赖孙子组件，通过 inject，可以在可用的注入内容中搜索需要使用的内容，二者配合，可以实现祖先组件向子孙组件传值（一次性的）</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/05/okjob-wztj%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%AF%94/",
            "url": "https://kiyoumiii.github.io/2025/01/05/okjob-wztj%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%AF%94/",
            "title": "okjob-wztj项目对比",
            "date_published": "2025-01-05T11:53:36.000Z",
            "content_html": "<h2 id=\"项目总结与对比\"><a class=\"anchor\" href=\"#项目总结与对比\">#</a> 项目总结与对比</h2>\n<h3 id=\"ok-job\"><a class=\"anchor\" href=\"#ok-job\">#</a> OK-JOB</h3>\n<p>VueX</p>\n<p>watch</p>\n<p>事件修饰符.prevent</p>\n<p>props 选项</p>\n<p>$emit 和 v-on（@）</p>\n<p>Props + emit</p>\n<p>Vue-cli 项目（npm run serve 启动，8080 监听）</p>\n<p>lang = javascipt</p>\n<p>lang = scss</p>\n<p>mixins 混入</p>\n<h3 id=\"王者图鉴\"><a class=\"anchor\" href=\"#王者图鉴\">#</a> 王者图鉴</h3>\n<p>pinia</p>\n<p>动态组件： <code>&lt;component&gt;+: is</code>  实现</p>\n<p>watchEffect</p>\n<p>defineProps 宏</p>\n<p>defineEmits 宏</p>\n<p>defineModel 宏</p>\n<p>Vite4 项目（npm run dev 启动，5173 监听）</p>\n<p>slot 插槽</p>\n<p>lang = typescript</p>\n<p>lang = less</p>\n<p>通过依赖注入（provide+inject）解决 vue 多层组件逐级透传问题</p>\n",
            "tags": [
                "Vue",
                "前端开发"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/02/%E5%B0%86vite%E6%9E%84%E5%BB%BA%E7%9A%84vue3%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0githubpage%E6%95%99%E7%A8%8B/",
            "url": "https://kiyoumiii.github.io/2025/01/02/%E5%B0%86vite%E6%9E%84%E5%BB%BA%E7%9A%84vue3%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0githubpage%E6%95%99%E7%A8%8B/",
            "title": "将vite构建的vue3项目部署到githubpage教程",
            "date_published": "2025-01-02T03:30:24.000Z",
            "content_html": "<h2 id=\"利用github-page托管vue项目\"><a class=\"anchor\" href=\"#利用github-page托管vue项目\">#</a> 利用 github page 托管 vue 项目</h2>\n<ol>\n<li>设置好 vite.config.js</li>\n</ol>\n<p>在 vite.config.js 中设置正确的 base。</p>\n<p>如果你要部署在  <code>https://&lt;USERNAME&gt;.github.io/ </code> 上，你可以省略 base 使其默认为  <code>‘/’</code> 。<br />\n如果你要部署在  <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code>  上，例如你的仓库地址为  <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code> ，那么请设置 base 为  <code>‘/&lt;REPO&gt;/’</code> 。</p>\n<ol start=\"2\">\n<li>构建项目</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> build</pre></td></tr></table></figure><p>执行上述命令后，就会看到根目录下，多了一个 dist 文件夹，这便是我们需要部署的文件夹。</p>\n<p>3. 预览项目</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run dev</pre></td></tr></table></figure><ol start=\"4\">\n<li>部署到 github<br />\n 如果上面的 preview 没有问题，就可以部署到 github 了。</li>\n</ol>\n<p>在 github 中，项目的源代码上传到了 main 分支，因此接下来要将 dist 文件夹上传到另外一个分支，给这个分支起个名字 gh-pages。</p>\n<p>这里将 dist 文件夹上传到 gh-pages：(执行这条命令的前提是你已经完成了 git add. git commit git push 这些操作。)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> subtree push <span class=\"token parameter variable\">--prefix</span> dist origin<span class=\"token punctuation\">(</span>远程主机的名字<span class=\"token punctuation\">)</span> gh-pages</pre></td></tr></table></figure><ol start=\"5\">\n<li>开启 pages 功能<br />\n将分支切换到 gh-pages，然后 save，就能成功开启页面了！</li>\n</ol>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "https://kiyoumiii.github.io/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "前端学习汇总-计算机网络篇（二）",
            "date_published": "2024-12-31T10:02:25.000Z",
            "content_html": "<h2 id=\"计算机网络知识总结篇dns协议介绍网络模型tcpip五层协议tcp与udp\"><a class=\"anchor\" href=\"#计算机网络知识总结篇dns协议介绍网络模型tcpip五层协议tcp与udp\">#</a> 计算机网络知识总结篇：DNS 协议介绍，网络模型，TCP/IP 五层协议，TCP 与 UDP</h2>\n<h3 id=\"四-dns协议介绍\"><a class=\"anchor\" href=\"#四-dns协议介绍\">#</a> 四、DNS 协议介绍</h3>\n<h4 id=\"1-dns-协议是什么\"><a class=\"anchor\" href=\"#1-dns-协议是什么\">#</a> 1. DNS 协议是什么</h4>\n<p>概念： DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的 IP 数串。<br />\n作用： 将域名解析为 IP 地址，客户端向 DNS 服务器（DNS 服务器有自己的 IP 地址）发送域名查询请求，DNS 服务器告知客户机 Web 服务器的 IP 地址。</p>\n<h4 id=\"2-dns同时使用tcp和udp协议\"><a class=\"anchor\" href=\"#2-dns同时使用tcp和udp协议\">#</a> 2. DNS 同时使用 TCP 和 UDP 协议？</h4>\n<p>DNS 占用 53 号端口，同时使用 TCP 和 UDP 协议。<br />\n（1）在区域传输的时候使用 TCP 协议</p>\n<ul>\n<li>辅域名服务器会定时（一般 3 小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用 TCP 而不是 UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。</li>\n<li>TCP 是一种可靠连接，保证了数据的准确性。<br />\n（2）在域名解析的时候使用 UDP 协议</li>\n<li>客户端向 DNS 服务器查询域名，一般返回的内容都不超过 512 字节，用 UDP 传输即可。不用经过三次握手，这样 DNS 服务器负载更低，响应更快。理论上说，客户端也可以指定向 DNS 服务器查询时用 TCP，但事实上，很多 DNS 服务器进行配置的时候，仅支持 UDP 查询包。</li>\n</ul>\n<h4 id=\"3-dns完整的查询过程\"><a class=\"anchor\" href=\"#3-dns完整的查询过程\">#</a> 3. DNS 完整的查询过程</h4>\n<p>DNS 服务器解析域名的过程：</p>\n<ul>\n<li>首先会在浏览器的缓存中查找对应的 IP 地址，如果查找到直接返回，若找不到继续下一步</li>\n<li>将请求发送给本地 DNS 服务器，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步</li>\n<li>本地 DNS 服务器向根域名服务器发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址</li>\n<li>本地 DNS 服务器向顶级域名服务器发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址</li>\n<li>本地 DNS 服务器向权威域名服务器发送请求，域名服务器返回对应的结果</li>\n<li>本地 DNS 服务器将返回结果保存在缓存中，便于下次使用</li>\n<li>本地 DNS 服务器将返回结果返回给浏览器<br />\n比如要查询 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span> 的 IP 地址，首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS 服务器中，本地 DNS 服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP 地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu 的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。</li>\n</ul>\n<h4 id=\"4-迭代查询与递归查询\"><a class=\"anchor\" href=\"#4-迭代查询与递归查询\">#</a> 4. 迭代查询与递归查询</h4>\n<p>实际上，DNS 解析是一个包含迭代查询和递归查询的过程。</p>\n<ul>\n<li>递归查询指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归查询，<strong>用户只需要发出一次查询请求</strong>。</li>\n<li>迭代查询指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，<strong>用户需要发出多次的查询请求</strong>。<br />\n一般我们向本地 DNS 服务器发送请求的方式就是<strong>递归查询</strong>，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我们最终的请求结果。<br />\n而本地 DNS 服务器向其他域名服务器请求的过程是<strong>迭代查询</strong>的过程，因为每一次域名服务器只返回单次查询的结果，下一级的查询由本地 DNS 服务器自己进行。</li>\n</ul>\n<h4 id=\"5-dns-记录和报文\"><a class=\"anchor\" href=\"#5-dns-记录和报文\">#</a> 5. DNS 记录和报文</h4>\n<p>DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（Name，Value，Type，<span class=\"token constant\">TTL</span>）</pre></td></tr></table></figure><p>其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。<br />\n常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：</p>\n<ul>\n<li>如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。</li>\n<li>如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。</li>\n<li>如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。</li>\n<li>如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。</li>\n</ul>\n<h3 id=\"五-网络模型\"><a class=\"anchor\" href=\"#五-网络模型\">#</a> 五、网络模型</h3>\n<h4 id=\"1-osi七层模型\"><a class=\"anchor\" href=\"#1-osi七层模型\">#</a> 1. OSI 七层模型</h4>\n<p>ISO 为了更好的使网络应用更为普及，推出了 OSI 参考模型。</p>\n<div align=\"center\">\n    <style>.wabvodpstgcs{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.jpg\" class=\"wabvodpstgcs\">\n</div>\n<p>（1）应用层<br />\n OSI 参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。<br />\n我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，POP3、SMTP 等。</p>\n<ul>\n<li>在客户端与服务器中经常会有数据的请求，这个时候就是会用到 http (hyper text transfer protocol)(超文本传输协议) 或者 https. 在后端设计数据接口时，我们常常使用到这个协议。</li>\n<li>FTP 是文件传输协议，在开发过程中，个人并没有涉及到，但是我想，在一些资源网站，比如百度网盘 `` 迅雷应该是基于此协议的。</li>\n<li>SMTP 是 simple mail transfer protocol（简单邮件传输协议）。在一个项目中，在用户邮箱验证码登录的功能时，使用到了这个协议。</li>\n</ul>\n<p>（2）表示层<br />\n表示层提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别。<br />\n如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。<br />\n在项目开发中，为了方便数据传输，可以使用 base64 对数据进行编解码。如果按功能来划分，base64 应该是工作在表示层。</p>\n<p>（3）会话层<br />\n会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p>\n<p>（4）传输层<br />\n传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，TCP UDP 就是在这一层。端口号既是这里的 “端”。</p>\n<p>（5）网络层<br />\n本层通过 IP 寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的 IP 层。这一层就是我们经常说的 IP 协议层。IP 协议是 Internet 的基础。我们可以这样理解，网络层规定了数据包的传输路线，而传输层则规定了数据包的传输方式。</p>\n<p>（6）数据链路层<br />\n将比特组合成字节，再将字节组合成帧，使用链路层地址 (以太网使用 MAC 地址) 来访问介质，并进行差错检测。网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。</p>\n<p>（7）物理层<br />\n实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。</p>\n<p>OSI 七层模型通信特点：对等通信 对等通信，为了使数据分组从源传送到目的地，源端 OSI 模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。</p>\n<h4 id=\"2-tcpip五层协议\"><a class=\"anchor\" href=\"#2-tcpip五层协议\">#</a> 2. TCP/IP 五层协议</h4>\n<p>TCP/IP 五层协议和 OSI 的七层协议对应关系如下：</p>\n<div align=\"center\">\n    <style>.gngdihkmhqjp{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/TCP_IP_%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE.jpg\" class=\"gngdihkmhqjp\">\n</div>\n<ul>\n<li>应用层 (application layer)：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP 协议（万维网服务）、FTP 协议（文件传输）、SMTP 协议（电子邮件）、DNS（域名查询）等。</li>\n<li>传输层 (transport layer)：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</li>\n</ul>\n<ol>\n<li>传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</li>\n<li>用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</li>\n</ol>\n<ul>\n<li>网络层 (internet layer)：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。</li>\n<li>数据链路层 (data link layer)：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。</li>\n<li>物理层 (physical Layer)：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。</li>\n</ul>\n<p><strong>从上图中可以看出，TCP/IP 模型比 OSI 模型更加简洁，它把应用层 / 表示层 / 会话层全部整合为了应用层。</strong></p>\n<p>在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。</p>\n<div align=\"center\">\n    <style>.hiotvnohoqnb{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/03.jpg\" class=\"hiotvnohoqnb\">\n</div>\n<p>在每一层实现的协议也各不同，即每一层的服务也不同，下图列出了每层主要的传输协议：</p>\n<div align=\"center\">\n    <style>.fnclejrhltfm{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/04.jpg\" class=\"fnclejrhltfm\">\n</div>\n<p>同样，TCP/IP 五层协议的通信方式也是对等通信：</p>\n<div align=\"center\">\n    <style>.wqgwixcnwkgw{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/05.jpg\" class=\"wqgwixcnwkgw\">\n</div>\n<h3 id=\"六-tcp与udp\"><a class=\"anchor\" href=\"#六-tcp与udp\">#</a> 六、TCP 与 UDP</h3>\n<h4 id=\"1-tcp-和-udp的概念及特点\"><a class=\"anchor\" href=\"#1-tcp-和-udp的概念及特点\">#</a> 1. TCP 和 UDP 的概念及特点</h4>\n<p>TCP 和 UDP 都是传输层协议，他们都属于 TCP/IP 协议族：<br />\n（1）UDP<br />\nUDP 的全称是用户数据报协议，在网络中它与 TCP 协议一样用于处理数据包，是一种无连接的协议。在 OSI 模型中，在传输层，处于 IP 协议的上一层。UDP 有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>\n<p>它的特点如下：<br />\n1）面向无连接<br />\n首先 UDP 是不需要和 TCP 一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。<br />\n具体来说就是：</p>\n<ul>\n<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li>\n<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li>\n</ul>\n<p>2）有单播，多播，广播的功能<br />\n UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p>\n<p>3）面向报文<br />\n发送方的 UDP 对应用程序交下来的报文，在添加首部后就向下交付 IP 层。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p>\n<p>4）不可靠性<br />\n首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。<br />\n并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。<br />\n再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>\n<p>5）头部开销小，传输数据报文时是很高效的。<br />\nUDP 头部包含了以下几个数据：</p>\n<ul>\n<li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li>\n<li>整个数据报文的长度</li>\n<li>整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误<br />\n因此 UDP 的头部开销小，只有 8 字节，相比 TCP 的至少 20 字节要少得多，在传输数据报文时是很高效的。</li>\n</ul>\n<p>（2）TCP TCP 的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。</p>\n<p>它有以下几个特点：<br />\n1）面向连接<br />\n面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是 “三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。<br />\n2）仅支持单播传输<br />\n每条 TCP 传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。<br />\n3）面向字节流<br />\n TCP 不像 UDP 一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。<br />\n4）可靠传输<br />\n对于可靠传输，判断丢包、误码靠的是 TCP 的段编号以及确认号。TCP 为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认 (ACK)；如果发送端实体在合理的往返时延 (RTT) 内未收到确认，那么对应的数据（假设丢失了）将会被重传。<br />\n5）提供拥塞控制<br />\n当网络出现拥塞的时候，TCP 能够减小向网络注入数据的速率和数量，缓解拥塞。<br />\n6）提供全双工通信<br />\n TCP 允许通信双方的应用程序在任何时候都能发送数据，因为 TCP 连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP 可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于 MSS）</p>\n<h4 id=\"2-tcp和udp的区别\"><a class=\"anchor\" href=\"#2-tcp和udp的区别\">#</a> 2. TCP 和 UDP 的区别</h4>\n<div align=\"center\">\n    <style>.yjsjorkjaabl{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/06.jpg\" class=\"yjsjorkjaabl\">\n</div>\n<h4 id=\"3-tcp和udp的使用场景\"><a class=\"anchor\" href=\"#3-tcp和udp的使用场景\">#</a> 3. TCP 和 UDP 的使用场景</h4>\n<ul>\n<li>TCP 应用场景： 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有 UDP 高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。</li>\n<li>UDP 应用场景： 效率要求相对高，对准确性要求相对低的场景。例如：QQ 聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。</li>\n</ul>\n<h4 id=\"4-udp协议为什么不可靠\"><a class=\"anchor\" href=\"#4-udp协议为什么不可靠\">#</a> 4. UDP 协议为什么不可靠？</h4>\n<p>UDP 在传输数据之前不需要先建立连接，远地主机的运输层在接收到 UDP 报文后，不需要确认，提供不可靠交付。总结就以下四点：</p>\n<ul>\n<li>不保证消息交付：不确认，不重传，无超时</li>\n<li>不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞</li>\n<li>不跟踪连接状态：不必建立连接或重启状态机</li>\n<li>不进行拥塞控制：不内置客户端或网络反馈机制</li>\n</ul>\n<h4 id=\"5-tcp的重传机制\"><a class=\"anchor\" href=\"#5-tcp的重传机制\">#</a> 5. TCP 的重传机制</h4>\n<p>由于 TCP 的下层网络（网络层）可能出现丢失、重复或失序的情况，TCP 协议提供可靠数据传输服务。为保证数据传输的正确性，TCP 会重传其认为已丢失（包括报文中的比特错误）的包。TCP 使用两套独立的机制来完成重传，一是基于时间，二是基于确认信息。<br />\nTCP 在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的 ACK 确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。</p>\n<h4 id=\"6-tcp的拥塞控制机制\"><a class=\"anchor\" href=\"#6-tcp的拥塞控制机制\">#</a> 6. TCP 的拥塞控制机制</h4>\n<p>TCP 的拥塞控制机制主要是以下四种机制：</p>\n<ul>\n<li>慢启动（慢开始）</li>\n<li>拥塞避免</li>\n<li>快速重传</li>\n<li>快速恢复</li>\n</ul>\n<p>（1）慢启动（慢开始）</p>\n<ul>\n<li>在开始发送的时候设置 cwnd = 1（cwnd 指的是拥塞窗口）</li>\n<li>思路：开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小。</li>\n<li>为了防止 cwnd 增长过大引起网络拥塞，设置一个慢开始门限 (ssthresh 状态变量)</li>\n</ul>\n<ol>\n<li>当 cwnd &lt; ssthresh 时，使用慢开始算法</li>\n<li>当 cnwd = ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法</li>\n<li>当 cwnd &gt; ssthresh 时，使用拥塞避免算法</li>\n</ol>\n<p>（2）拥塞避免</p>\n<ul>\n<li>拥塞避免未必能够完全避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。</li>\n<li>思路： 让拥塞窗口 cwnd 缓慢的增大，即每经过一个返回时间 RTT 就把发送方的拥塞控制窗口加一</li>\n<li>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为 1，执行慢开始算法。如图所示:</li>\n</ul>\n<div align=\"center\">\n    <style>.rejdfhtnxviu{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/07.jpg\" class=\"rejdfhtnxviu\">\n</div>\n其中，判断网络出现拥塞的根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理。\n<p>（3）快速重传</p>\n<ul>\n<li>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认 (为的是使发送方及早知道有报文段没有到达对方)。发送方只要连续收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</li>\n<li>由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量</li>\n</ul>\n<p>（4）快速恢复</p>\n<ul>\n<li>当发送方连续收到三个重复确认时，就执行 “乘法减小” 算法，把 ssthresh 门限减半。但是接下去并不执行慢开始算法。</li>\n<li>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将 cwnd 设置为 ssthresh 的大小，然后执行拥塞避免算法。</li>\n</ul>\n<div align=\"center\">\n    <style>.yuiqumuwzomu{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/08.jpg\" class=\"yuiqumuwzomu\">\n</div>\n<h4 id=\"7-tcp的流量控制机制\"><a class=\"anchor\" href=\"#7-tcp的流量控制机制\">#</a> 7. TCP 的流量控制机制</h4>\n<p>一般来说，流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP 采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。</p>\n<ul>\n<li>当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的大小发送给另一端。</li>\n<li>当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区大小。（剩余的缓冲区空间的大小被称为窗口，指出窗口大小的通知称为窗口通告 。接收方在发送的每一确认中都含有一个窗口通告。）</li>\n<li>如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。</li>\n<li>如果发送方操作的速度快于接收方，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。</li>\n</ul>\n<h4 id=\"8-tcp的可靠传输机制\"><a class=\"anchor\" href=\"#8-tcp的可靠传输机制\">#</a> 8. TCP 的可靠传输机制</h4>\n<p>TCP 的可靠传输机制是基于连续 ARQ 协议和滑动窗口协议的。<br />\nTCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但 未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发 送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。 如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如 果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送 但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示， 说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发 送但确认的报文段。</p>\n<p>接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都 已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。</p>\n<p>发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文 段的发送速率。</p>\n<p>但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重 传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。</p>\n<h4 id=\"9-tcp的三次握手和四次挥手\"><a class=\"anchor\" href=\"#9-tcp的三次握手和四次挥手\">#</a> 9. TCP 的三次握手和四次挥手</h4>\n<p>（1）三次握手</p>\n<div align=\"center\">\n    <style>.ylmodrivcahx{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/09.jpg\" class=\"ylmodrivcahx\">\n</div>\n（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n<p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。</p>\n<ul>\n<li>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。</li>\n</ul>\n<p><strong>首部的同步位 SYN=1，初始序号 seq=x，SYN=1 的报文段不能携带数据，但要消耗掉一个序号。</strong></p>\n<ul>\n<li>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN。同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。</li>\n</ul>\n<p><strong>在确认报文段中 SYN=1，ACK=1，确认号 ack=x+1，初始序号 seq=y</strong></p>\n<ul>\n<li>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</li>\n</ul>\n<p><strong>确认报文段 ACK=1，确认号 ack=y+1，序号 seq=x+1（初始为 seq=x，第二个报文段所以要 + 1），ACK 报文段可以携带数据，不携带数据则不消耗序号。</strong></p>\n<p>那为什么要三次握手呢？两次不行吗？</p>\n<ul>\n<li>为了确认双方的接收能力和发送能力都正常</li>\n<li>如果是用两次握手，则会出现下面这种情况：</li>\n</ul>\n<p><strong>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</strong></p>\n<p>简单来说就是以下三步：</p>\n<ul>\n<li>第一次握手： 客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</li>\n<li>第二次握手： 服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</li>\n<li>第三次握手： 当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</li>\n</ul>\n<p>TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。 第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否 已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。</p>\n<p>（2）四次挥手</p>\n<div align=\"center\">\n    <style>.ymhpbksyhyug{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/10.jpg\" class=\"ymhpbksyhyug\">\n</div>\n<p>刚开始方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p>\n<ul>\n<li>\n<p>第一次挥手： 客户端会发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。<br />\n即发出连接释放报文段（FIN=1，序号 seq=u），并停止再发送数据，主动关闭 TCP 连接，进入 FIN_WAIT1（终止等待 1）状态，等待服务端的确认。</p>\n</li>\n<li>\n<p>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</p>\n</li>\n</ul>\n<p>即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号 ack=u+1，序号 seq=v），服务端进入 CLOSE_WAIT（关闭等待）状态，此时的 TCP 处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入 FIN_WAIT2（终止等待 2）状态，等待服务端发出的连接释放报文段。</p>\n<ul>\n<li>\n<p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。<br />\n即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号 seq=w，确认号 ack=u+1），服务端进入 LAST_ACK（最后确认）状态，等待客户端的确认。</p>\n</li>\n<li>\n<p>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</p>\n</li>\n</ul>\n<p>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入 TIME_WAIT（时间等待）状态。此时 TCP 未释放掉，需要经过时间等待计时器设置的时间 2MSL 后，客户端才进入 CLOSED 状态。</p>\n<p>那为什么需要四次挥手呢？<br />\n因为当服务端收到客户端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中 ACK 报文是用来应答的，SYN 报文是用来同步的。但是关闭连接时，当服务端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉客户端，“你发的 FIN 报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送，故需要四次挥手。</p>\n<p>简单来说就是以下四步：</p>\n<ul>\n<li>第一次挥手： 若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。</li>\n<li>第二次挥手：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。</li>\n<li>第三次挥手：服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。</li>\n<li>第四次挥手： 客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</li>\n</ul>\n<p>TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。<br />\n最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。</p>\n<h4 id=\"10-tcp粘包是怎么回事如何处理\"><a class=\"anchor\" href=\"#10-tcp粘包是怎么回事如何处理\">#</a> 10. TCP 粘包是怎么回事，如何处理？</h4>\n<p>默认情况下，TCP 连接会启⽤延迟传送算法 (Nagle 算法), 在数据发送之前缓存他们。如果短时间有多个数据发送，会缓冲到⼀起作⼀次发送 (缓冲⼤⼩⻅ socket.bufferSize ), 这样可以减少 IO 消耗提⾼性能.<br />\n 如果是传输⽂件的话，那么根本不⽤处理粘包的问题，来⼀个包拼⼀个包就好了。但是如果是多条消息，或者是别的⽤途的数据那么就需要处理粘包.<br />\n 下面看⼀个例⼦，连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况:<br />\nA. 先接收到 data1, 然后接收到 data2 .<br />\nB. 先接收到 data1 的部分数据，然后接收到 data1 余下的部分以及 data2 的全部.<br />\nC. 先接收到了 data1 的全部数据和 data2 的部分数据，然后接收到了 data2 的余下的数据.<br />\nD. ⼀次性接收到了 data1 和 data2 的全部数据.</p>\n<p>其中的 BCD 就是我们常⻅的粘包的情况。⽽对于处理粘包的问题，常⻅的解决⽅案有:</p>\n<ul>\n<li>多次发送之前间隔⼀个等待时间：只需要等上⼀段时间再进⾏下⼀次 send 就好，适⽤于交互频率特别低的场景。缺点也很明显，对于⽐较频繁的场景⽽⾔传输效率实在太低，不过⼏乎不⽤做什么处理.</li>\n<li>关闭 Nagle 算法：关闭 Nagle 算法，在 Node.js 中你可以通过 socket.setNoDelay () ⽅法来关闭 Nagle 算法，让每⼀次 send 都不缓冲直接发送。该⽅法⽐较适⽤于每次发送的数据都⽐较⼤ (但不是⽂件那么⼤), 并且频率不是特别⾼的场景。如果是每次发送的数据量⽐较⼩，并且频率特别⾼的，关闭 Nagle 纯属⾃废武功。另外，该⽅法不适⽤于⽹络较差的情况，因为 Nagle 算法是在服务端进⾏的包合并情况，但是如果短时间内客户端的⽹络情况不好，或者应⽤层由于某些原因不能及时将 TCP 的数据 recv, 就会造成多个包在客户端缓冲从⽽粘包的情况。 (如果是在稳定的机房内部通信那么这个概率是⽐较⼩可以选择忽略的)</li>\n<li>进⾏封包 / 拆包： 封包 / 拆包是⽬前业内常⻅的解决⽅案了。即给每个数据包在发送之前，于其前 / 后放⼀些有特征的数据，然后收到数据的时 候根据特征数据分割出来各个数据包。</li>\n</ul>\n<h4 id=\"11-为什么udp不会粘包\"><a class=\"anchor\" href=\"#11-为什么udp不会粘包\">#</a> 11. 为什么 udp 不会粘包？</h4>\n<ul>\n<li>TCP 协议是⾯向<strong>流</strong>的协议，UDP 是⾯向<strong>消息</strong>的协议。UDP 段都是⼀条消息，应⽤程序必须以消息为单位提取数据，不能⼀次提取任意字节的数据</li>\n<li>UDP 具有保护消息边界，在每个 UDP 包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易进⾏区分处理了。传输协议把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息。接收端⼀次只能接收发送端发出的⼀个数据包，如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收。</li>\n</ul>\n<h3 id=\"七-websocket\"><a class=\"anchor\" href=\"#七-websocket\">#</a> 七、WebSocket</h3>\n<h4 id=\"1-对-websocket-的理解\"><a class=\"anchor\" href=\"#1-对-websocket-的理解\">#</a> 1. 对 WebSocket 的理解</h4>\n<p>WebSocket 是 HTML5 提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于 TCP 传输协议，并复用 HTTP 的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。</p>\n<p>WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</p>\n<p>WebSocket 原理：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者 ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有 ID 在接收者 ID 序列中的客户端才会处理这个事件。<br />\n​</p>\n<p>WebSocket 特点的如下：</p>\n<ul>\n<li>支持双向通信，实时性更强</li>\n<li>可以发送文本，也可以发送二进制数据‘’</li>\n<li>建立在 TCP 协议之上，服务端的实现比较容易</li>\n<li>数据格式比较轻量，性能开销小，通信高效</li>\n<li>没有同源限制，客户端可以与任意服务器通信</li>\n<li>协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL</li>\n<li>与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>\n</ul>\n<p>Websocket 的使用方法如下：​</p>\n<p>在客户端中：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 index.html 中直接写 WebSocket，设置服务端的端口号为 9999</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:9999'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在客户端与服务端建立连接后触发</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection open.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 在服务端给客户端发来消息的时候触发</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 打印的是 MessageEvent 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 打印的是收到的消息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 在客户端与服务端建立关闭后触发</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection closed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"2-即时通讯的实现短轮询-长轮询-sse-和-websocket-间的区别\"><a class=\"anchor\" href=\"#2-即时通讯的实现短轮询-长轮询-sse-和-websocket-间的区别\">#</a> 2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？</h4>\n<p>短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。</p>\n<p>短轮询的基本思路： 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。</p>\n<p>长轮询的基本思路： 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。</p>\n<p>SSE 的基本思想： 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。</p>\n<p>WebSocket 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。</p>\n<p>上面的四个通信协议，前三个都是基于 HTTP 协议的。</p>\n<p>对于这四种即使通信协议，从性能的角度来看：<br />\nWebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询<br />\n但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了：<br />\n短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket<br />\n 所以，还是要根据具体的使用场景来判断使用哪种方式。</p>\n",
            "tags": [
                "计算机科学",
                "前端"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://kiyoumiii.github.io/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "前端学习汇总-计算机网络篇（一）",
            "date_published": "2024-12-31T06:06:28.000Z",
            "content_html": "<h2 id=\"计算机网络知识总结篇httphttps\"><a class=\"anchor\" href=\"#计算机网络知识总结篇httphttps\">#</a> 计算机网络知识总结篇：HTTP，HTTPS</h2>\n<h3 id=\"一-http协议\"><a class=\"anchor\" href=\"#一-http协议\">#</a> 一、HTTP 协议</h3>\n<h4 id=\"1-get和post的请求的区别\"><a class=\"anchor\" href=\"#1-get和post的请求的区别\">#</a> 1. GET 和 POST 的请求的区别</h4>\n<p>Post 和 Get 是 HTTP 请求的两种方法，其区别如下：</p>\n<ul>\n<li>应用场景： GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。</li>\n<li>是否缓存： 因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。</li>\n<li>发送的报文格式： Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。</li>\n<li>安全性： Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。</li>\n<li>请求长度： 浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。</li>\n<li>参数类型： post 的参数传递支持更多的数据类型。</li>\n</ul>\n<h4 id=\"2-post和put请求的区别\"><a class=\"anchor\" href=\"#2-post和put请求的区别\">#</a> 2. POST 和 PUT 请求的区别</h4>\n<ul>\n<li>PUT 请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次 PUT 操作，其结果并没有不同。（可以理解为是<strong>更新数据</strong>）</li>\n<li>POST 请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是<strong>创建数据</strong>）</li>\n</ul>\n<h4 id=\"3常见的http请求头和响应头\"><a class=\"anchor\" href=\"#3常见的http请求头和响应头\">#</a> 3. 常见的 HTTP 请求头和响应头</h4>\n<p>HTTP Request Header 常见的请求头：</p>\n<ul>\n<li>Accept: 浏览器能够处理的内容类型</li>\n<li>Accept-Charset: 浏览器能够显示的字符集</li>\n<li>Accept-Encoding：浏览器能够处理的压缩编码</li>\n<li>Accept-Language：浏览器当前设置的语言</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cookie：当前页面设置的任何 Cookie</li>\n<li>Host：发出请求的页面所在的域</li>\n<li>Referer：发出请求的页面的 URL</li>\n<li>User-Agent：浏览器的用户代理字符串</li>\n</ul>\n<p>HTTP Responses Header 常见的响应头：</p>\n<ul>\n<li>Date：表示消息发送的时间，时间的描述格式由 rfc822 定义</li>\n<li>server: 服务器名称</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cache-Control：控制 HTTP 缓存</li>\n<li>content-type: 表示后面的文档属于什么 MIME 类型</li>\n</ul>\n<p>常见的 Content-Type 属性值有以下四种：<br />\n（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。<br />\n（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。<br />\n（3）application/json：服务器消息主体是序列化后的 JSON 字符串。<br />\n（4）text/xml：该种方式主要用来提交 XML 格式的数据。</p>\n<h4 id=\"4http状态码304是多好还是少好\"><a class=\"anchor\" href=\"#4http状态码304是多好还是少好\">#</a> 4.HTTP 状态码 304 是多好还是少好</h4>\n<p>服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端在此对这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回 304，此时客户端调用缓存内容，不必进行二次下载。</p>\n<p>状态码 304 不应该认为是一种错误，而是对客户端有缓存情况下服务端的一种响应。</p>\n<p>搜索引擎蜘蛛会更加青睐内容源更新频繁的网站。通过特定时间内对网站抓取返回的状态码来调节对该网站的抓取频次。若网站在一定时间内一直处于 304 的状态，那么蜘蛛可能会降低对网站的抓取次数。相反，若网站变化的频率非常之快，每次抓取都能获取新内容，那么日积月累，的回访率也会提高。</p>\n<p>产生较多 304 状态码的原因：</p>\n<ul>\n<li>页面更新周期长或不更新</li>\n<li>纯静态页面或强制生成静态 html</li>\n</ul>\n<p>304 状态码出现过多会造成以下问题：</p>\n<ul>\n<li>网站快照停止；</li>\n<li>收录减少；</li>\n<li>权重下降。</li>\n</ul>\n<h4 id=\"5-常见的http请求方法\"><a class=\"anchor\" href=\"#5-常见的http请求方法\">#</a> 5. 常见的 HTTP 请求方法</h4>\n<ul>\n<li>GET: 向服务器获取数据；</li>\n<li>POST：将实体提交到指定的资源，通常会造成服务器资源的修改；</li>\n<li>PUT：上传文件，更新数据；</li>\n<li>DELETE：删除服务器上的对象；</li>\n<li>HEAD：获取报文首部，与 GET 相比，不返回报文主体部分；</li>\n<li>OPTIONS：询问支持的请求方法，用来跨域请求；</li>\n<li>CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行 TCP 通信；</li>\n<li>TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。</li>\n</ul>\n<h4 id=\"6-options请求方法及使用场景\"><a class=\"anchor\" href=\"#6-options请求方法及使用场景\">#</a> 6. OPTIONS 请求方法及使用场景</h4>\n<p>OPTIONS 是除了 GET 和 POST 之外的其中一种 HTTP 请求方法。</p>\n<p>OPTIONS 方法是用于请求获得由 Request-URI 标识的资源在请求 / 响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。该请求方法的响应不能缓存。</p>\n<p>OPTIONS 请求方法的主要用途有两个：</p>\n<ul>\n<li>获取服务器支持的所有 HTTP 请求方法；</li>\n<li>用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。</li>\n</ul>\n<h4 id=\"7-http-10-和-http-11-之间有哪些区别\"><a class=\"anchor\" href=\"#7-http-10-和-http-11-之间有哪些区别\">#</a> 7. HTTP 1.0 和 HTTP 1.1 之间有哪些区别？</h4>\n<p>HTTP 1.0 和 HTTP 1.1 有以下区别：</p>\n<ul>\n<li>连接方面，http1.0 默认使用非持久连接，而 http1.1 默认使用持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。</li>\n<li>资源请求方面，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li>\n<li>缓存方面，在 http1.0 中主要使用 header 里的 If-Modified-Since、Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略，例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。</li>\n<li>http1.1 中新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个 IP 地址。因此有了 host 字段，这样就可以将请求发往到同一台服务器上的不同网站。</li>\n<li>http1.1 相对于 http1.0 还新增了很多请求方法，如 PUT、HEAD、OPTIONS 等。</li>\n</ul>\n<h4 id=\"8-http-11-和-http-20-的区别\"><a class=\"anchor\" href=\"#8-http-11-和-http-20-的区别\">#</a> 8. HTTP 1.1 和 HTTP 2.0 的区别</h4>\n<ul>\n<li>二进制协议：HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为 &quot;帧&quot;，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。</li>\n<li>多路复用： HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了 &quot;队头堵塞&quot;【1】的问题。</li>\n<li>数据流： HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。</li>\n<li>头信息压缩：HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。</li>\n<li>服务器推送：HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主要推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。</li>\n</ul>\n<p>P.S. 队头堵塞：<br />\n队头堵塞是由 HTTP 基本的 “请求 - 应答” 模型所导致的。HTTP 规定报文必须是 “一发一收”，这就形成了一个先进先出的 “串行” 队列。队列里的请求是没有优先级的，只有入队的先后顺序，排在最前面的请求会被最优先处理。如果队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他的请求承担了不应有的时间成本，造成了队头堵塞的现象。</p>\n<h4 id=\"9-http和https协议的区别\"><a class=\"anchor\" href=\"#9-http和https协议的区别\">#</a> 9. HTTP 和 HTTPS 协议的区别</h4>\n<p>HTTP 和 HTTPS 协议的主要区别如下：</p>\n<ul>\n<li>HTTPS 协议需要 CA 证书，费用较高；而 HTTP 协议不需要；</li>\n<li>HTTP 协议是超文本传输协议，信息是明文传输的，HTTPS 则是具有安全性的 SSL 加密传输协议；</li>\n<li>使用不同的连接方式，端口也不同，HTTP 协议端口是 80，HTTPS 协议端口是 443；</li>\n<li>HTTP 协议连接很简单，是无状态的；HTTPS 协议是有 SSL 和 HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 更加安全。</li>\n</ul>\n<h4 id=\"10-get方法url长度限制的原因\"><a class=\"anchor\" href=\"#10-get方法url长度限制的原因\">#</a> 10. GET 方法 URL 长度限制的原因</h4>\n<p>实际上 HTTP 协议规范并没有对 get 方法请求的 url 长度进行限制，这个限制是特定的浏览器及服务器对它的限制。<br />\nIE 对 URL 长度的限制是 2083 字节 (2K+35)。由于 IE 浏览器对 URL 长度的允许值是最小的，所以开发过程中，只要 URL 不超过 2083 字节，那么在所有浏览器中工作都不会有问题。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">GET</span>的长度值 <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span>（<span class=\"token number\">2083</span>）<span class=\"token operator\">-</span> （你的Domain<span class=\"token operator\">+</span>Path）<span class=\"token operator\">-</span><span class=\"token number\">2</span>（<span class=\"token number\">2</span>是<span class=\"token keyword\">get</span>请求中<span class=\"token operator\">?</span><span class=\"token operator\">=</span>两个字符的长度）</pre></td></tr></table></figure><p>下面看一下主流浏览器对 get 方法中 url 的长度限制范围：</p>\n<ul>\n<li>Microsoft Internet Explorer (Browser)：IE 浏览器对 URL 的最大限制为 2083 个字符，如果超过这个数字，提交按钮没有任何反应。</li>\n<li>Firefox (Browser)：对于 Firefox 浏览器 URL 的长度限制为 65,536 个字符。</li>\n<li>Safari (Browser)：URL 最大长度限制为 80,000 个字符。</li>\n<li>Opera (Browser)：URL 最大长度限制为 190,000 个字符。</li>\n<li>Google (chrome)：URL 最大长度限制为 8182 个字符。</li>\n</ul>\n<p>主流的服务器对 get 方法中 url 的长度限制范围：</p>\n<ul>\n<li>Apache (Server)：能接受最大 url 长度为 8192 个字符。</li>\n<li>Microsoft Internet Information Server (IIS)：能接受最大 url 的长度为 16384 个字符。</li>\n</ul>\n<p>根据上面的数据，可以知道，get 方法中的 URL 长度最长不超过 2083 个字符，这样所有的浏览器和服务器都可能正常工作。</p>\n<h4 id=\"11-当在浏览器中输入-googlecom-并且按下回车之后发生了什么\"><a class=\"anchor\" href=\"#11-当在浏览器中输入-googlecom-并且按下回车之后发生了什么\">#</a> 11. 当在浏览器中输入 <span class=\"exturl\" data-url=\"aHR0cDovL0dvb2dsZS5jb20=\">Google.com</span> 并且按下回车之后发生了什么？</h4>\n<p>（1）解析 URL： 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</p>\n<p>（2）缓存判断： 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</p>\n<p>（3）DNS 解析： 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</p>\n<p>（4）获取 MAC 地址： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</p>\n<p>（5）TCP 三次握手： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK 报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个 ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</p>\n<p>（6）HTTPS 握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</p>\n<p>（7）返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</p>\n<p>（8）页面渲染： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</p>\n<p>（9）TCP 四次挥手： 最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</p>\n<h4 id=\"12-对keep-alive的理解\"><a class=\"anchor\" href=\"#12-对keep-alive的理解\">#</a> 12. 对 keep-alive 的理解</h4>\n<p>HTTP1.0 中默认是在每次请求 / 应答，客户端和服务器都要新建一个连接，完成之后立即断开连接，这就是短连接。<br />\n当使用 Keep-Alive 模式时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接，这就是长连接。其使用方法如下：</p>\n<ul>\n<li>HTTP1.0 版本是默认没有 Keep-alive 的（也就是默认会发送 keep-alive），所以要想连接得到保持，必须手动配置发送 Connection: keep-alive 字段。若想断开 keep-alive 连接，需发送 Connection:close 字段；</li>\n<li>HTTP1.1 规定了默认保持长连接，数据传输完成了保持 TCP 连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送 Connection：close 首部字段。</li>\n</ul>\n<p>Keep-Alive 的建立过程：</p>\n<ul>\n<li>客户端向服务器在发送请求报文同时在首部添加发送 Connection 字段</li>\n<li>服务器收到请求并处理 Connection 字段</li>\n<li>服务器回送 Connection:Keep-Alive 字段给客户端</li>\n<li>客户端接收到 Connection 字段</li>\n<li>Keep-Alive 连接建立成功</li>\n</ul>\n<p>服务端自动断开过程（也就是没有 keep-alive）：</p>\n<ul>\n<li>客户端向服务器只是发送内容报文（不包含 Connection 字段）</li>\n<li>服务器收到请求并处理</li>\n<li>服务器返回客户端请求的资源并关闭连接</li>\n<li>客户端接收资源，发现没有 Connection 字段，断开连接</li>\n</ul>\n<p>客户端请求断开连接过程：</p>\n<ul>\n<li>客户端向服务器发送 Connection:close 字段</li>\n<li>服务器收到请求并处理 connection 字段</li>\n<li>服务器回送响应资源并断开连接</li>\n<li>客户端接收资源并断开连接</li>\n</ul>\n<p>开启 Keep-Alive 的优点：</p>\n<ul>\n<li>较少的 CPU 和内存的使⽤（由于同时打开的连接的减少了）；</li>\n<li>允许请求和应答的 HTTP 管线化；</li>\n<li>降低拥塞控制 （TCP 连接减少了）；</li>\n<li>减少了后续请求的延迟（⽆需再进⾏握⼿）；</li>\n<li>报告错误⽆需关闭 TCP 连接；</li>\n</ul>\n<p>开启 Keep-Alive 的缺点：<br />\n长时间的 Tcp 连接容易导致系统资源无效占用，浪费系统资源。</p>\n<h4 id=\"13-页面有多张图片http是怎样的加载表现\"><a class=\"anchor\" href=\"#13-页面有多张图片http是怎样的加载表现\">#</a> 13. 页面有多张图片，HTTP 是怎样的加载表现？</h4>\n<ul>\n<li>在 HTTP 1 下，浏览器对一个域名下最大 TCP 连接数为 6，所以会请求多次。可以用多域名部署解决。这样可以提高同时请求的数目，加快页面图片的获取速度。</li>\n<li>在 HTTP 2 下，可以一瞬间加载出来很多资源，因为，HTTP2 支持多路复用，可以在一个 TCP 连接中发送多个 HTTP 请求。</li>\n</ul>\n<h4 id=\"14-http2的头部压缩算法是怎样的\"><a class=\"anchor\" href=\"#14-http2的头部压缩算法是怎样的\">#</a> 14. HTTP2 的头部压缩算法是怎样的？</h4>\n<p>HTTP2 的头部压缩是 HPACK 算法。在客户端和服务器两端建立 “字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到 50%~90% 的高压缩率。</p>\n<p>具体来说:</p>\n<ul>\n<li>在客户端和服务器端使用 “首部表” 来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；</li>\n<li>首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新；</li>\n<li>每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。</li>\n</ul>\n<p>如有两个请求， 请求二只是和请求一的:path 字段不同，其他都相同，请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。</p>\n<h4 id=\"15-http请求报文是什么样的\"><a class=\"anchor\" href=\"#15-http请求报文是什么样的\">#</a> 15. HTTP 请求报文是什么样的？</h4>\n<p>请求报⽂有 4 部分组成:</p>\n<ul>\n<li>请求⾏</li>\n<li>请求头部</li>\n<li>空⾏</li>\n<li>请求体</li>\n</ul>\n<p>其中：<br />\n（1）请求⾏包括：请求⽅法字段、URL 字段、HTTP 协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。<br />\n（2）请求头部：请求头部由关键字 / 值对组成，每⾏⼀对，关键字和值⽤英⽂冒号 “:” 分隔</p>\n<ul>\n<li>User-Agent：产⽣请求的浏览器类型。</li>\n<li>Accept：客户端可识别的内容类型列表。</li>\n<li>Host：请求的主机名，允许多个域名同处⼀个 IP 地址，即虚拟主机。</li>\n</ul>\n<p>（3）请求体: post put 等请求携带的数据</p>\n<h4 id=\"16-http响应报文是什么样的\"><a class=\"anchor\" href=\"#16-http响应报文是什么样的\">#</a> 16.  HTTP 响应报文是什么样的？</h4>\n<p>响应报⽂有 4 部分组成:</p>\n<ul>\n<li>响应⾏</li>\n<li>响应头部</li>\n<li>空⾏</li>\n<li>响应体</li>\n</ul>\n<p>其中：</p>\n<ul>\n<li>响应⾏：由网络协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。</li>\n<li>响应头部：响应部⾸组成</li>\n<li>响应体：服务器响应的数据</li>\n</ul>\n<h4 id=\"17-http协议的优点和缺点\"><a class=\"anchor\" href=\"#17-http协议的优点和缺点\">#</a> 17. HTTP 协议的优点和缺点</h4>\n<p>HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。</p>\n<p>HTTP 协议具有以下优点：</p>\n<ul>\n<li>支持客户端 / 服务器模式</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</li>\n<li>无连接：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP 协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。</li>\n<li>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</li>\n</ul>\n<p>HTTP 协议具有以下缺点：</p>\n<ul>\n<li>无状态： HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。</li>\n<li>明文传输： 协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。</li>\n<li>不安全</li>\n</ul>\n<p>（1）通信使用明文（不加密），内容可能会被窃听；<br />\n（2）不验证通信方的身份，因此有可能遭遇伪装；<br />\n（3）无法证明报文的完整性，所以有可能已遭篡改；</p>\n<h4 id=\"18-说一下http-30\"><a class=\"anchor\" href=\"#18-说一下http-30\">#</a> 18. 说一下 HTTP 3.0</h4>\n<p>HTTP/3 基于 UDP 协议实现了类似于 TCP 的多路复用数据流、传输可靠性等功能，这套功能被称为 QUIC 协议。<br />\n1. 流量控制、传输可靠性功能：QUIC 在 UDP 的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些 TCP 中的特性。<br />\n2. 集成 TLS 加密功能：目前 QUIC 使用 TLS1.3，减少了握手所花费的 RTT 数。<br />\n3. 多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了 TCP 的队头阻塞问题。<br />\n4. 快速握手：由于基于 UDP，可以实现使用 0 ~ 1 个 RTT 来建立连接。</p>\n<h4 id=\"19-http协议的性能怎么样\"><a class=\"anchor\" href=\"#19-http协议的性能怎么样\">#</a> 19. HTTP 协议的性能怎么样</h4>\n<p>HTTP 协议是基于 TCP/IP，并且使用了请求 - 应答的通信模式，所以性能的关键就在这两点里。</p>\n<ul>\n<li>长连接<br />\n HTTP 协议有两种连接模式，一种是持续连接，一种非持续连接。<br />\n（1）非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。<br />\n（2）持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。</li>\n</ul>\n<p>对于不同版本的采用不同的连接方式：</p>\n<ul>\n<li>在 HTTP/1.0 每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无谓的 TCP 连接建立和断开，增加了通信开销。该版本使用的非持续的连接，但是可以在请求时，加上 Connection: keep-a live 来要求服务器不要关闭 TCP 连接。</li>\n<li>在 HTTP/1.1 提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。该版本及以后版本默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持同时建立 6 个持久连接。</li>\n<li>管道网络传输<br />\n HTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。<br />\n管道（pipeline）网络传输是指：可以在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但是服务器还是按照顺序回应请求。如果前面的回应特别慢，后面就会有许多请求排队等着。这称为队头堵塞。</li>\n</ul>\n<div align=\"center\">\n    <style>.suzpxbikffmo{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/http1%E9%95%BF%E7%9F%AD%E8%BF%9E%E6%8E%A5.jpg\" class=\"suzpxbikffmo\">\n</div>\n<ul>\n<li>队头堵塞<br />\n HTTP 传输的报文必须是一发一收，但是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是 HTTP 队头阻塞问题。</li>\n</ul>\n<p>队头阻塞的解决方案：<br />\n（1）并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。<br />\n（2）域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。</p>\n<h4 id=\"20-url有哪些组成部分\"><a class=\"anchor\" href=\"#20-url有哪些组成部分\">#</a> 20. URL 有哪些组成部分</h4>\n<p>以下面的 URL 为例：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hc3B4ZmFucy5jb206ODA4MC9uZXdzL2luZGV4LmFzcD9ib2FyZElEPTUmYW1wO0lEPTI0NjE4JmFtcDtwYWdlPTEjbmFtZQ==\">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</span></p>\n<p>从上面的 URL 可以看出，一个完整的 URL 包括以下几部分：</p>\n<ul>\n<li>协议部分：该 URL 的协议部分为 “http：”，这代表网页使用的是 HTTP 协议。在 Internet 中可以使用多种协议，如 HTTP，FTP 等等本例中使用的是 HTTP 协议。在 &quot;HTTP&quot; 后面的 “//” 为分隔符；</li>\n<li>域名部分：该 URL 的域名部分为 “<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hc3B4ZmFucy5jb20=\">www.aspxfans.com</span>”。一个 URL 中，也可以使用 IP 地址作为域名使用.</li>\n<li>端口部分：跟在域名后面的是端口，域名和端口之间使用 “:” 作为分隔符。端口不是一个 URL 必须的部分，如果省略端口部分，将采用默认端口（HTTP 协议默认端口是 80，HTTPS 协议默认端口是 443）；</li>\n<li>虚拟目录部分：从域名后的第一个 “/” 开始到最后一个 “/” 为止，是虚拟目录部分。虚拟目录也不是一个 URL 必须的部分。本例中的虚拟目录是 “/news/”；</li>\n<li>文件名部分：从域名后的最后一个 “/” 开始到 “？” 为止，是文件名部分，如果没有 “?”, 则是从域名后的最后一个 “/” 开始到 “#” 为止，是文件部分，如果没有 “？” 和 “#”，那么从域名后的最后一个 “/” 开始到结束，都是文件名部分。</li>\n<li>锚部分：从 “#” 开始到最后，都是锚部分。本例中的锚部分是 “name”。锚部分也不是一个 URL 必须的部分；</li>\n<li>参数部分：从 “？” 开始到 “#” 为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为 “boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用 “&amp;” 作为分隔符。</li>\n</ul>\n<h4 id=\"21-与缓存相关的http请求头有哪些\"><a class=\"anchor\" href=\"#21-与缓存相关的http请求头有哪些\">#</a> 21. 与缓存相关的 HTTP 请求头有哪些</h4>\n<p>强缓存：</p>\n<ul>\n<li>Expires</li>\n<li>Cache-Control</li>\n</ul>\n<p>协商缓存：</p>\n<ul>\n<li>Etag、If-None-Match</li>\n<li>Last-Modified、If-Modified-Since</li>\n</ul>\n<h3 id=\"二-https协议\"><a class=\"anchor\" href=\"#二-https协议\">#</a> 二、HTTPS 协议</h3>\n<h4 id=\"1-什么是https协议\"><a class=\"anchor\" href=\"#1-什么是https协议\">#</a> 1. 什么是 HTTPS 协议？</h4>\n<p>超文本传输安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，利用 SSL/TLS 来加密数据包。HTTPS 的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>\n<div align=\"center\">\n    <style>.cjsmycqugwdd{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/HTTP%E4%B8%8EHTTPS.jpg\" class=\"cjsmycqugwdd\">\n</div>\n<p>HTTP 协议采用明文传输信息，存在信息窃听、信息篡改和信息劫持的风险，而协议 TLS/SSL 具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。而协议 TLS/SSL 具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。</p>\n<p>安全层的主要职责就是对发起的 HTTP 请求的数据进行加密操作 和 对接收到的 HTTP 的内容进行解密操作。</p>\n<h4 id=\"2-tlsssl的工作原理\"><a class=\"anchor\" href=\"#2-tlsssl的工作原理\">#</a> 2. TLS/SSL 的工作原理</h4>\n<p>TLS/SSL 全称安全传输层协议（Transport Layer Security）, 是介于 TCP 和 HTTP 之间的一层安全协议，不影响原有的 TCP 协议和 HTTP 协议，所以使用 HTTPS 基本上不需要对 HTTP 页面进行太多的改造。</p>\n<p>TLS/SSL 的功能实现主要依赖三类基本算法：散列函数 hash、对称加密、非对称加密。这三类算法的作用如下：</p>\n<ul>\n<li>基于散列函数验证信息的完整性</li>\n<li>对称加密算法采用协商的秘钥对数据加密</li>\n<li>非对称加密实现身份认证和秘钥协商</li>\n</ul>\n<div align=\"center\">\n    <style>.vipusbjkxyyr{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/TLS%E5%8A%A0%E5%AF%86.jpg\" class=\"vipusbjkxyyr\">\n</div>\n<p>（1）散列函数 hash<br />\n 常见的散列函数有 MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果，可以用于防止信息篡改并验证数据的完整性。<br />\n特点： 在信息传输过程中，散列函数不能三都实现信息防篡改，由于传输是明文传输，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。</p>\n<p>（2）对称加密<br />\n对称加密的方法是，双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。 这就要用到非对称加密的方法。<br />\n常见的对称加密算法有 AES-CBC、DES、3DES、AES-GCM 等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是一对一。<br />\n<strong>特点</strong>： 对称加密的优势就是信息传输使用一对一，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和 N 个客户端通信，需要维持 N 个密码记录且不能修改密码。</p>\n<p>（3）非对称加密<br />\n非对称加密的方法是，我们拥有两个秘钥，一个是公钥，一个是私钥。公钥是公开的，私钥是保密的。<br />\n用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据，只有对应的私钥才能解密。<br />\n我们可以将公钥公布出去，任何想和我们通信的客户， 都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。<br />\n但是非对称加密有一个缺点就是加密的过程很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。<br />\n常见的非对称加密算法有 RSA、ECC、DH 等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。公钥加密的信息只有私钥可以解开，私钥加密的信息只能公钥解开，因此掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。<br />\n特点： 非对称加密的特点就是信息一对多，服务器只需要维持一个私钥就可以和多个客户端进行通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密的速度慢。<br />\n综合上述算法特点，TLS/SSL 的工作方式就是客户端使用非对称加密与服务器进行通信，实现身份的验证并协商对称加密使用的秘钥。对称加密算法采用协商秘钥对信息以及信息摘要进行加密通信，不同节点之间采用的对称秘钥不同，从而保证信息只能通信双方获取。这样就解决了两个方法各自存在的问题。</p>\n<h4 id=\"3-数字证书是什么\"><a class=\"anchor\" href=\"#3-数字证书是什么\">#</a> 3. 数字证书是什么？</h4>\n<p>现在的方法也不一定是安全的，因为没有办法确定得到的公钥就一定是安全的公钥。可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送的信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而自己还不知道。为了解决这样的问题，可以使用数字证书。</p>\n<p>首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的认证中心（简称 CA ）用它的私钥对消息摘要加密，形成签名。最后将原始的信息和签名合在一起，称为数字证书。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash 算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。</p>\n<p>这个方法最重要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样才能保证数据的安全。</p>\n<h4 id=\"4-https通信握手过程\"><a class=\"anchor\" href=\"#4-https通信握手过程\">#</a> 4. HTTPS 通信（握手）过程</h4>\n<p>HTTPS 的通信过程如下：</p>\n<ul>\n<li>客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。</li>\n<li>服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。</li>\n<li>客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验。</li>\n<li>服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验。</li>\n<li>客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。</li>\n</ul>\n<h4 id=\"5-https的特点\"><a class=\"anchor\" href=\"#5-https的特点\">#</a> 5. HTTPS 的特点</h4>\n<p>HTTPS 的优点如下：</p>\n<ul>\n<li>使用 HTTPS 协议可以认证用户和服务器，确保数据发送到正确的客户端和服务器；</li>\n<li>使用 HTTPS 协议可以进行加密传输、身份认证，通信更加安全，防止数据在传输过程中被窃取、修改，确保数据安全性；</li>\n<li>HTTPS 是现行架构下最安全的解决方案，虽然不是绝对的安全，但是大幅增加了中间人攻击的成本；<br />\nHTTPS 的缺点如下：</li>\n<li>HTTPS 需要做服务器和客户端双方的加密个解密处理，耗费更多服务器资源，过程复杂；</li>\n<li>HTTPS 协议握手阶段比较费时，增加页面的加载时间；</li>\n<li>SSL 证书是收费的，功能越强大的证书费用越高；</li>\n<li>HTTPS 连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；</li>\n<li>SSL 证书需要绑定 IP，不能再同一个 IP 上绑定多个域名。</li>\n</ul>\n<h4 id=\"6-https是如何保证安全的\"><a class=\"anchor\" href=\"#6-https是如何保证安全的\">#</a> 6. HTTPS 是如何保证安全的？</h4>\n<p>先理解两个概念：</p>\n<ul>\n<li>对称加密：即通信的双⽅都使⽤同⼀个秘钥进⾏加解密，对称加密虽然很简单性能也好，但是⽆法解决⾸次把秘钥发给对⽅的问题，很容易被⿊客拦截秘钥。</li>\n<li>⾮对称加密：</li>\n</ul>\n<ol>\n<li>私钥 + 公钥 = 密钥对</li>\n<li>即⽤私钥加密的数据，只有对应的公钥才能解密，⽤公钥加密的数据，只有对应的私钥才能解密</li>\n<li>因为通信双⽅的⼿⾥都有⼀套⾃⼰的密钥对，通信之前双⽅会先把⾃⼰的公钥都先发给对⽅</li>\n<li>然后对⽅再拿着这个公钥来加密数据响应给对⽅，等到到了对⽅那⾥，对⽅再⽤⾃⼰的私钥进⾏解密</li>\n</ol>\n<p>⾮对称加密虽然安全性更⾼，但是带来的问题就是速度很慢，影响性能。</p>\n<p>解决⽅案：</p>\n<p>结合两种加密⽅式，将对称加密的密钥使⽤⾮对称加密的公钥进⾏加密，然后发送出去，接收⽅使⽤私钥进⾏解密得到对称加密的密钥，然后双⽅可以使⽤对称加密来进⾏沟通。</p>\n<p>此时⼜带来⼀个问题，中间⼈问题： 如果此时在客户端和服务器之间存在⼀个中间⼈，这个中间⼈只需要把原本双⽅通信互发的公钥，换成⾃⼰的公钥，这样中间⼈就可以轻松解密通信双⽅所发送的所有数据。</p>\n<p>所以这个时候需要⼀个安全的第三⽅颁发证书（CA），证明身份的身份，防⽌被中间⼈攻击。 证书中包括：签发者、证书⽤途、使⽤者公钥、使⽤者私钥、使⽤者的 HASH 算法、证书到期时间等。</p>\n<p>但是问题来了，如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技术，数字签名。</p>\n<p>数字签名就是⽤ CA ⾃带的 HASH 算法对证书的内容进⾏ HASH 得到⼀个摘要，再⽤ CA 的私钥加密，最终组成数字签名。当别⼈把他的证书发过来的时候，我再⽤同样的 Hash 算法，再次⽣成消息摘要，然后⽤ CA 的公钥对数字签名解密，得到 CA 创建的消息摘要，两者⼀⽐，就知道中间有没有被⼈篡改了。这个时候就能最⼤程度保证通信的安全了。</p>\n<h3 id=\"三-http状态码\"><a class=\"anchor\" href=\"#三-http状态码\">#</a> 三、HTTP 状态码</h3>\n<p>状态码的类别：</p>\n<div align=\"center\">\n    <style>.dedxnbfrslpf{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/%E7%8A%B6%E6%80%81%E7%A0%81%E7%B1%BB%E5%88%AB.jpg\" class=\"dedxnbfrslpf\">\n</div>\n<ol>\n<li>\n<p>2XX (Success 成功状态码)<br />\n 状态码 2XX 表示请求被正常处理了。<br />\n（1）200 OK<br />\n200 OK 表示客户端发来的请求被服务器端正常处理了。<br />\n（2）204 No Content<br />\n 该状态码表示客户端发送的请求已经在服务器端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分。一般在只需要从客户端往服务器端发送信息，而服务器端不需要往客户端发送内容时使用。<br />\n（3）206 Partial Content<br />\n 该状态码表示客户端进行了范围请求，而服务器端执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</p>\n</li>\n<li>\n<p>3XX (Redirection 重定向状态码)</p>\n</li>\n</ol>\n<p>3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p>\n<p>（1）301 Moved Permanently<br />\n 永久重定向。 该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。若用户已经把原来的 URI 保存为书签，此时会按照 Location 中新的 URI 重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。</p>\n<p>使用场景：</p>\n<ul>\n<li>当我们想换个域名，旧的域名不再使用时，用户访问旧域名时用 301 就重定向到新的域名。其实也是告诉搜索引擎收录的域名需要对新的域名进行收录。</li>\n<li>在搜索引擎的搜索结果中出现了不带 www 的域名，而带 www 的域名却没有收录，这个时候可以用 301 重定向来告诉搜索引擎我们目标的域名是哪一个。</li>\n</ul>\n<p>（2）302 Found<br />\n 临时重定向。 该状态码表示请求的资源被分配到了新的 URI，希望用户（本次）能使用新的 URI 访问资源。和 301 Moved Permanently 状态码相似，但是 302 代表的资源不是被永久重定向，只是临时性质的。也就是说已移动的资源对应的 URI 将来还有可能发生改变。若用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。同时，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回 302 代码，搜索引擎认为新的网址只是暂时的。</p>\n<p>使用场景：</p>\n<ul>\n<li>当我们在做活动时，登录到首页自动重定向，进入活动页面。</li>\n<li>未登陆的用户访问用户中心重定向到登录页面。</li>\n<li>访问 404 页面重新定向到首页。</li>\n</ul>\n<p>（3）303 See Other<br />\n 该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。 303 状态码和 302 Found 状态码有着相似的功能，但是 303 状态码明确表示客户端应当采用 GET 方法获取资源。<br />\n303 状态码通常作为 PUT 或 POST 操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面，比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。</p>\n<p>注意：</p>\n<ul>\n<li>当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成 GET，并删除请求报文内的主体，之后请求会再次自动发送。</li>\n<li>301、302 标准是禁止将 POST 方法变成 GET 方法的，但实际大家都会这么做。</li>\n</ul>\n<p>（4）304 Not Modified<br />\n 浏览器缓存相关。 该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。<br />\n带条件的请求（Http 条件请求）：使用 Get 方法 请求，请求报文中包含（if-match、if-none-match、if-modified-since、if-unmodified-since、if-range）中任意首部。<br />\n状态码 304 并不是一种错误，而是告诉客户端有缓存，直接使用缓存中的数据。返回页面的只有头部信息，是没有内容部分的，这样在一定程度上提高了网页的性能。</p>\n<p>（5）307 Temporary Redirect<br />\n307 表示临时重定向。 该状态码与 302 Found 有着相同含义，尽管 302 标准禁止 POST 变成 GET，但是实际使用时还是这样做了。307 会遵守浏览器标准，不会从 POST 变成 GET。但是对于处理请求的行为时，不同浏览器还是会出现不同的情况。规范要求浏览器继续向 Location 的地址 POST 内容。</p>\n<ol start=\"3\">\n<li>4XX (Client Error 客户端错误状态码)</li>\n</ol>\n<p>4XX 的响应结果表明客户端是发生错误的原因所在。<br />\n（1）400 Bad Request<br />\n 该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。</p>\n<p>（2）401 Unauthorized<br />\n 该状态码表示发送的请求需要有通过 HTTP 认证 (BASIC 认证、DIGEST 认证) 的认证信息。若之前已进行过一次请求，则表示用户认证失败。<br />\n返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询 (challenge) 用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。<br />\n以下情况会出现 401：</p>\n<ul>\n<li>401.1 - 登录失败。</li>\n<li>401.2 - 服务器配置导致登录失败。</li>\n<li>401.3 - 由于 ACL 对资源的限制而未获得授权。</li>\n<li>401.4 - 筛选器授权失败。</li>\n<li>401.5 - ISAPI/CGI 应用程序授权失败。</li>\n<li>401.7 - 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</li>\n</ul>\n<p>（3）403 Forbidden<br />\n 该状态码表明请求资源的访问被服务器拒绝了，服务器端没有必要给出详细理由，但是可以在响应报文实体的主体中进行说明。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关。<br />\nIIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：</p>\n<ul>\n<li>403.1 - 执行访问被禁止。</li>\n<li>403.2 - 读访问被禁止。</li>\n<li>403.3 - 写访问被禁止。</li>\n<li>403.4 - 要求 SSL。</li>\n<li>403.5 - 要求 SSL 128。</li>\n<li>403.6 - IP 地址被拒绝。</li>\n<li>403.7 - 要求客户端证书。</li>\n<li>403.8 - 站点访问被拒绝。</li>\n<li>403.9 - 用户数过多。</li>\n<li>403.10 - 配置无效。</li>\n<li>403.11 - 密码更改。</li>\n<li>403.12 - 拒绝访问映射表。</li>\n<li>403.13 - 客户端证书被吊销。</li>\n<li>403.14 - 拒绝目录列表。</li>\n<li>403.15 - 超出客户端访问许可。</li>\n<li>403.16 - 客户端证书不受信任或无效。</li>\n<li>403.17 - 客户端证书已过期或尚未生效</li>\n<li>403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。</li>\n<li>403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。</li>\n<li>403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</li>\n</ul>\n<p>（4）404 Not Found<br />\n 该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。 以下情况会出现 404：</p>\n<ul>\n<li>404.0 -（无） – 没有找到文件或目录。</li>\n<li>404.1 - 无法在所请求的端口上访问 Web 站点。</li>\n<li>404.2 - Web 服务扩展锁定策略阻止本请求。</li>\n<li>404.3 - MIME 映射策略阻止本请求。</li>\n</ul>\n<p>（5）405 Method Not Allowed<br />\n 该状态码表示客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法。GET 和 HEAD 方法，服务器应该总是允许客户端进行访问。客户端可以通过 OPTIONS 方法（预检）来查看服务器允许的访问方法，如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Methods<span class=\"token operator\">:</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span><span class=\"token constant\">HEAD</span><span class=\"token punctuation\">,</span><span class=\"token constant\">PUT</span><span class=\"token punctuation\">,</span><span class=\"token constant\">PATCH</span><span class=\"token punctuation\">,</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span><span class=\"token constant\">DELETE</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>5XX (Server Error 服务器错误状态码)<br />\n 5XX 的响应结果表明服务器本身发生错误。</li>\n</ol>\n<p>（1）500 Internal Server Error<br />\n 该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</p>\n<p>（2）502 Bad Gateway<br />\n 该状态码表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的。注意，502 错误通常不是客户端能够修复的，而是需要由途经的 Web 服务器或者代理服务器对其进行修复。以下情况会出现 502：</p>\n<ul>\n<li>502.1 - CGI （通用网关接口）应用程序超时。</li>\n<li>502.2 - CGI （通用网关接口）应用程序出错。</li>\n</ul>\n<p>（3）503 Service Unavailable<br />\n 该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。<br />\n使用场景：</p>\n<ul>\n<li>服务器停机维护时，主动用 503 响应请求；</li>\n<li>nginx 设置限速，超过限速，会返回 503。</li>\n</ul>\n<p>（4）504 Gateway Timeout<br />\n 该状态码表示网关或者代理的服务器无法在规定的时间内获得想要的响应。他是 HTTP 1.1 中新加入的。<br />\n使用场景：代码执行时间超时，或者发生了死循环。</p>\n<ol start=\"5\">\n<li>总结<br />\n（1）2XX 成功</li>\n</ol>\n<p>200 OK，表示从客户端发来的请求在服务器端被正确处理<br />\n 204 No content，表示请求成功，但响应报文不含实体的主体部分<br />\n 205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容<br />\n 206 Partial Content，进行范围请求</p>\n<p>（2）3XX 重定向</p>\n<p>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL<br />\n302 found，临时性重定向，表示资源临时被分配了新的 URL<br />\n303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源<br />\n 304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况<br />\n 307 temporary redirect，临时重定向，和 302 含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</p>\n<p>（3）4XX 客户端错误</p>\n<p>400 bad request，请求报文存在语法错误<br />\n 401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息<br />\n 403 forbidden，表示对请求资源的访问被服务器拒绝<br />\n 404 not found，表示在服务器上没有找到请求的资源</p>\n<p>（4）5XX 服务器错误</p>\n<p>500 internal sever error，表示服务器端在执行请求时发生了错误<br />\n 501 Not Implemented，表示服务器不支持当前请求所需要的某个功能<br />\n 503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</p>\n<ol start=\"6\">\n<li>同样是重定向，307，303，302 的区别？<br />\n302 是 http1.0 的协议状态码，在 http1.1 版本的时候为了细化 302 状态码⼜出来了两个 303 和 307。 303 明确表示客户端应当采⽤ get ⽅法获取资源，他会把 POST 请求变为 GET 请求进⾏重定向。 307 会遵照浏览器标准，不会从 post 变为 get。</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "前端"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/12/28/%E8%87%AA%E7%94%A8%E5%B8%B8%E5%A4%87linux%E5%91%BD%E4%BB%A4/",
            "url": "https://kiyoumiii.github.io/2024/12/28/%E8%87%AA%E7%94%A8%E5%B8%B8%E5%A4%87linux%E5%91%BD%E4%BB%A4/",
            "title": "自用常备linux命令",
            "date_published": "2024-12-28T10:43:12.000Z",
            "content_html": "<h2 id=\"自用的一些常备linux命令\"><a class=\"anchor\" href=\"#自用的一些常备linux命令\">#</a> 自用的一些常备 linux 命令</h2>\n<p>基本命令如 cd ls pwd mkdir rm cp mv touch 等</p>\n<p>以及如下这些：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看设备空间使用情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看本计算节点使用情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">top</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看文件的生成时间戳</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">stat</span> <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'work12.sh'</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 杀死进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token operator\">&lt;</span>pid<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看 CPU 核数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nproc</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 运行任务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">0</span>-1 <span class=\"token function\">sh</span> work1.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">2</span>-3 <span class=\"token function\">sh</span> work2.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">4</span>-5 <span class=\"token function\">sh</span> work3.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">6</span>-7 <span class=\"token function\">sh</span> work4.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">8</span>-9 <span class=\"token function\">sh</span> work5.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">10</span>-11 <span class=\"token function\">sh</span> work6.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">12</span>-13 <span class=\"token function\">sh</span> work7.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">14</span>-15 <span class=\"token function\">sh</span> work8.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">16</span>-17 <span class=\"token function\">sh</span> work9.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">18</span>-19 <span class=\"token function\">sh</span> work10.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">20</span>-21 <span class=\"token function\">sh</span> work11.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">22</span>-23 <span class=\"token function\">sh</span> work12.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><p>清除原本的 minimized_pdb 文件，以及，查看当下文件中 minimized_pdb 文件数量的命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_minimized.pdb'</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> +</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_minimized.pdb'</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span></pre></td></tr></table></figure><p>限时 60s，并指定每个任务占据核的编号</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 前 8 个任务，每个任务使用 2 个核心</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">0</span>-1 <span class=\"token function\">sh</span> work1.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">2</span>-3 <span class=\"token function\">sh</span> work2.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">4</span>-5 <span class=\"token function\">sh</span> work3.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">6</span>-7 <span class=\"token function\">sh</span> work4.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">8</span>-9 <span class=\"token function\">sh</span> work5.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">10</span>-11 <span class=\"token function\">sh</span> work6.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">12</span>-13 <span class=\"token function\">sh</span> work7.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">14</span>-15 <span class=\"token function\">sh</span> work8.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 后 8 个任务，每个任务使用 1 个核心</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">16</span> <span class=\"token function\">sh</span> work9.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">17</span> <span class=\"token function\">sh</span> work10.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">18</span> <span class=\"token function\">sh</span> work11.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">19</span> <span class=\"token function\">sh</span> work12.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">20</span> <span class=\"token function\">sh</span> work13.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">21</span> <span class=\"token function\">sh</span> work14.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">22</span> <span class=\"token function\">sh</span> work15.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">23</span> <span class=\"token function\">sh</span> work16.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 等待所有后台任务完成</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">wait</span></pre></td></tr></table></figure><p>查看当下文件夹下每个文件占据多少空间</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">du</span> <span class=\"token parameter variable\">-h</span> --max-depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-hr</span></pre></td></tr></table></figure><p>常用的一套命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_center.pdb'</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-auvh</span> *_center.pdb <span class=\"token punctuation\">..</span>/recon11_5w_center/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">vim</span> get<span class=\"token punctuation\">(</span>tab补全<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module load Anaconda3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>conda activate</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">vim</span> minimi_dihe<span class=\"token punctuation\">(</span>tab补全<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>module load NAMD/CPU/2.14</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'work12.sh'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_minimized.pdb'</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-auvhz</span> *_minimized.pdb zhaomiaomiao@XXXLab:/mnt/sto2/zhaomiaomiao/select_trainset_241203/mini4w_reconset/mini_pdbs/recon1_4w_pdb/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-auvhz</span> *.log zhaomiaomiao@XXXLab:/mnt/sto2/zhaomiaomiao/select_trainset_241203/mini4w_reconset/mini_logs/recon1_4w_log/</pre></td></tr></table></figure><p>另一套命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module load CUDA/11.0.0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module load VMD/1.9.3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vmd <span class=\"token parameter variable\">-dispdev</span> none <span class=\"token parameter variable\">-e</span> hbb_align2initial.tcl.txt</pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/12/28/%E8%B6%85%E7%BA%A7%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9Bgit%E5%91%BD%E4%BB%A4/",
            "url": "https://kiyoumiii.github.io/2024/12/28/%E8%B6%85%E7%BA%A7%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9Bgit%E5%91%BD%E4%BB%A4/",
            "title": "超级常用的一些git命令",
            "date_published": "2024-12-28T10:32:09.000Z",
            "content_html": "<p>常用 git 命令一览表</p>\n<br>\n<div align=\"center\">\n    <style>.cxwvxgvfcsnu{}</style><img data-src=\"/2024/12/28/%E8%B6%85%E7%BA%A7%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9Bgit%E5%91%BD%E4%BB%A4/01.jpg\" class=\"cxwvxgvfcsnu\">\n</div>\n<br>\n<p>自用的一些常备 git 命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 重命名分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> <span class=\"token operator\">&lt;</span>old_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>new_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 切换分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 拉取分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> pull origin <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 推送分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看提交记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> log</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 合并分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> merge <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 强制覆盖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> <span class=\"token operator\">&lt;</span>commit_id<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 回退版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--soft</span> <span class=\"token operator\">&lt;</span>commit_id<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 把本地分支 kiyoumi 推送到远程分支 develop</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin kiyoumi:develop</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 把远程分支 develop 拉取到本地分支 kiyoumi</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> pull origin develop:kiyoumi</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 从远程分支把该文件直接替换</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> checkout origin/remote -- <span class=\"token operator\">&lt;</span>file_path<span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "git"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/12/28/%E7%AE%80%E5%8D%95%E6%9C%89%E6%95%88%E7%9A%84%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/",
            "url": "https://kiyoumiii.github.io/2024/12/28/%E7%AE%80%E5%8D%95%E6%9C%89%E6%95%88%E7%9A%84%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/",
            "title": "简单有效的密钥配置教程",
            "date_published": "2024-12-28T10:20:22.000Z",
            "content_html": "<h2 id=\"免密登录配置\"><a class=\"anchor\" href=\"#免密登录配置\">#</a> 免密登录配置</h2>\n<h3 id=\"服务器1\"><a class=\"anchor\" href=\"#服务器1\">#</a> 服务器 1</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> .ssh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ssh-keygen</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr></table></figure><p>然后把.pub 文件里的内容放入服务器 2 的 authorized_keys 文件里</p>\n<p>第一次配置时往往没有 authorized_keys 文件，需要手动创建，然后修改权限</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> authorized_keys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> authorized_keys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">700</span> ~/.ssh</pre></td></tr></table></figure><h3 id=\"服务器2\"><a class=\"anchor\" href=\"#服务器2\">#</a> 服务器 2</h3>\n<p>和服务器 1 端的操作类似。<br />\n互相将 id_ras.pub 文件中的内容复制一份到对方的 authorized_keys 文件中，就可以互相免密登录了。</p>\n",
            "tags": [
                "计算机科学",
                "操作系统"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/09/17/SEO%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5%E6%80%BB%E7%BB%93/",
            "url": "https://kiyoumiii.github.io/2024/09/17/SEO%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5%E6%80%BB%E7%BB%93/",
            "title": "SEO优化策略总结",
            "date_published": "2024-09-17T12:45:20.000Z",
            "content_html": "<h1 id=\"seo优化全方位解决方案\"><a class=\"anchor\" href=\"#seo优化全方位解决方案\">#</a> SEO 优化全方位解决方案</h1>\n<p>SEO 代表搜寻引擎最佳化 / 搜寻引擎优化（英文全名 Search Engine Optimization，简称 SEO），是指通过了解搜寻引擎的自然排名的算法逻辑，以提高目标网站在有关搜寻引擎内排名的方式。<br />\n网站的 SEO 至关重要，它可以让你的网站获得更好的排名和流量，从而提高网站知名度。对于一些盈利的网站，做好 SEO，还可以以低成本提高投资回报率。<br />\n网站 SEO 是长线工作，在做好一些基础的配置之后，更重要的是后期的维护，比如定期更新网站动态文章，不断寻找优质外链资源等。</p>\n<h2 id=\"一-tdk-优化\"><a class=\"anchor\" href=\"#一-tdk-优化\">#</a> 一、TDK 优化</h2>\n<p>TDK 是</p>\n<ul>\n<li>Title（页面标题）</li>\n<li>Meta Description（页面描述）</li>\n<li>Meta Keywords（页面关键词）<br />\nP.S. 但是由于一些原因，各大主流搜索引擎基本都已经大大降低甚至移除了 <keywords> 对排名的影响<br />\n但有些搜索引擎还会参考，如必应，目前 keywords 标签仍然对排名有一定影响。</li>\n</ul>\n<p>title 标签 - 网站名片<br />\n当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>OK简历 - AI简历优化，免费在线使用，一键导出打印<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>参考竞品：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>简历模板_个人简历模板_求职简历模板 - Canva可画<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>超级简历WonderCV - HR推荐简历模板,智能简历制作工具,专业中英文简历模板免费下载<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>META 标签 - 网站信息<br />\n当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历,写简历,求职,找工作,简历模板<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width,initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>霖承科技<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>robots<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index, follow<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>googlebot<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index, follow<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application-name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>robots：用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引</p>\n<p>Open Graph 协议标签<br />\n Open Graph 协议标签通过 OG Tags （OG 标签）实现的，它属于 Meta 标签的一种，可以用来标识网页类型和元素，让分享到社交网络的内容可以被有效的抓取，还可以控制分享的网站卡片呈现我们想要显示的内容。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 社交媒体分享展示优化 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>website<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://okjob.linchance.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>霖承科技<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>关于网站关键词</p>\n<ul>\n<li>keywords 关键词数量控制在 4 个左右，避免关键词堆砌；</li>\n<li>合理选择长尾关键词（长尾关键词一般是 2-3 个词组成。例如，目标关键词是服装，其长尾关键词可以是男士服装、冬装等），长尾关键词虽然相对核心关键词的搜索量小很多，但是它带来的流量精准度非常高，后期的转化效果更好；</li>\n<li>避免使用过于专业的词汇。过于专业的词汇的搜索量较低；</li>\n<li>减少使用热门关键词，要选择合适的关键词（搜索量大、转化率高、定位精准）<br />\n当前设置：</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历,写简历,求职,找工作,简历模板<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>参考竞品：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">data-n-head</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>简历制作,个人简历模板,写简历,简历网<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">data-n-head</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ssr<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:keywords<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>简历模板,简历,简历模板免费下载,简历制作,英文简历,超级简历<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>关于网站描述</p>\n<ul>\n<li>Description（页面描述）的长度最好控制在 120～200 个字符；</li>\n<li>Description 要让用户知道将从页面中获得什么；</li>\n<li>在 Description 中合理使用行动号召（CTA）用语（例如 “了解更多”、“立即获取”、“免费试用” 等等……）；</li>\n<li>Description 应该包含页面的核心关键字；</li>\n<li>为每个页面创建独一无二的 Description；</li>\n</ul>\n<p>当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>参考竞品：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">data-n-head</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>全民简历网是专业的在线简历制作、简历模板下载网站。提供大量原创设计的个人简历模板，包括各种职业和大学生简历模板，让求职者快速制作出高质量简历，服务超800万用户！<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"二-网站质量\"><a class=\"anchor\" href=\"#二-网站质量\">#</a> 二、网站质量</h2>\n<h3 id=\"网站加载速度\"><a class=\"anchor\" href=\"#网站加载速度\">#</a> 网站加载速度</h3>\n<p>网站性能是会影响到网站的 SEO 排名的，原因可想而知：</p>\n<ul>\n<li>网站卡顿势必会大大降低网站的用户留存率；</li>\n<li>如果网站加载缓慢，搜索引擎就会认为该网站对用户不友好，从而将其排名下降；</li>\n<li>影响搜索引擎蜘蛛的爬取频率；</li>\n</ul>\n<h3 id=\"html-语义化\"><a class=\"anchor\" href=\"#html-语义化\">#</a> HTML 语义化</h3>\n<p>语义化是指内容的结构化（内容语义化），选择合适的标签（代码语义化）。<br />\n杜绝通篇 div，HTML 语义化不仅便于开发者阅读，还有利于浏览器爬虫的解析，对 seo 优化很有帮助。<br />\n所以我们在开发时要遵循语义化的开发规范，根据页面内容，选择合适的标签，优化代码，使得网页结构更加清晰。</p>\n<p>相比其他标签而言，h 标签在页面中的权重非常高，所以不要滥用 h 标签。要利用 h 标签告诉浏览器网页的核心内容！例如：<br />\nh1 写主标题，通常与网页 title 标签一致，可以在页面展示，一个页面最好只有一个 h1 标签。<br />\nh2 写次级标题，h3-h6 以此类推，细分网页结构。</p>\n<h3 id=\"strong-em-标签\"><a class=\"anchor\" href=\"#strong-em-标签\">#</a> strong、em 标签</h3>\n<p><code>&lt;b&gt;</code>  和 <code>&lt;strong&gt;</code>  标签都是加粗文字的标签，其二者的区别就在于： <code>&lt;b&gt;</code>  是为了加粗而加粗的， <code>&lt;strong&gt;</code>  是为了强调而加粗的。<br />\n同样斜体标签 <code>&lt;i&gt;</code>  和  <code>&lt;em&gt; </code> 也有着相同的区别， <code>&lt;em&gt;</code>  有强调效果。<br />\n推荐使用 <code>&lt;strong&gt; </code>   <code>&lt;em&gt;</code> ，而不是  <code>&lt;b&gt;</code>   <code>&lt;i&gt;</code>  等，单纯修改加粗等样式可以用 css 实现。</p>\n<p>当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token selector\">.seo-header</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>seo-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://https://okjob.linchance.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>OK简历网是专业的在线简历制作、AI辅写优化、简历模板下载网站，提供免费的简历创建、编辑、一键导出服务，让求职者快速制作出高质量简历！<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>OK简历 - 从一份OK的简历开始，笑傲职场<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"ul-ol-li-标签\"><a class=\"anchor\" href=\"#ul-ol-li-标签\">#</a> ul ol li 标签</h3>\n<p>这三个都是列表标签，ul 表示无序列表（unordered list），ol 表示有序列表（oredr list）， li 表示列表项（list item）。从网站优化的角度来说，在罗列多个词条的时候，最好使用列表标签，例如 使用 ul li 布局网站导航条对搜索引擎蜘蛛更加友好，也是影响搜索引擎排名的因素之一。</p>\n<h3 id=\"img-标签\"><a class=\"anchor\" href=\"#img-标签\">#</a> img 标签</h3>\n<p>img 图片标签的 alt 属性是图片的替换文字。<br />\nalt 属性可以帮助蜘蛛快速理解图片的具体内容，并且在网络故障时，仍然能够爬取到图片的内容信息。</p>\n<p>index.html 里暂时无列表标签和图片标签，如有或后续有添加需求，记得按照上面规范进行。</p>\n<h3 id=\"其他注意点\"><a class=\"anchor\" href=\"#其他注意点\">#</a> 其他注意点</h3>\n<ul>\n<li>SEO 的禁忌之一就是用 JS 输出重要的内容。爬虫不会读取 JS 格式的内容，所以重要的内容必须是 HTML 格式，这也就是为什么现在流行的 spa 框架都不利于 SEO 的原因之一；</li>\n<li>尽量不使用 iFrame。因为搜索引擎不会抓取 iframe 内的内容，所以重要内容绝对不能放在 iframe 中；</li>\n<li>如果需要截取文字，尽量用 css 实现，保证文字可以完整呈现给搜索引擎。</li>\n</ul>\n<h2 id=\"三-seo-手段\"><a class=\"anchor\" href=\"#三-seo-手段\">#</a> 三、SEO 手段</h2>\n<h3 id=\"各搜索引擎提交站点收录\"><a class=\"anchor\" href=\"#各搜索引擎提交站点收录\">#</a> 各搜索引擎提交站点收录</h3>\n<p>在各个搜索引擎的站点平台提交网站收录可以缩短爬虫发现网站链接时间，加快爬虫抓取速度。</p>\n<ul>\n<li>百度站长资源平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3ppeXVhbi5iYWlkdS5jb20vP2Nhc3RrPUxURSUyNSVFMiU4MCVBNg==\"> ziyuan.baidu.com/?castk=LTE%…</span></li>\n<li>谷歌网站管理员工具<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY24vd2VibWFzdGVycy8=\"> www.google.cn/webmasters/</span></li>\n<li>搜狗站长平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3poYW56aGFuZy5zb2dvdS5jb20v\"> zhanzhang.sogou.com/</span></li>\n<li>360 站长平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3poYW56aGFuZy5zby5jb20v\"> zhanzhang.so.com/</span></li>\n<li>头条搜索站长平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3poYW56aGFuZy50b3V0aWFvLmNvbS8=\"> zhanzhang.toutiao.com/</span></li>\n<li>必应网站管理员工具<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iaW5nLmNvbS93ZWJtYXN0ZXIvaSVFMiU4MCVBNg==\"> www.bing.com/webmaster/i…</span><br />\n 点击以上链接，站长可以查看网站的各项参数表现。<br />\n2024.09.04：尝试百度站长管理平台认证失败，后续如还有需要可以再回来尝试</li>\n</ul>\n<h3 id=\"sitemap-站点地图\"><a class=\"anchor\" href=\"#sitemap-站点地图\">#</a> sitemap 站点地图</h3>\n<p>Sitemap，即站点地图，它是一个网站的全部 URL 列表，同时可以列出每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等）。它可以为搜索引擎的蜘蛛进行导航，更快的找到全站中的所有链接，更全面的获取网站信息。为了保证链接的全面性和准确性，应该自动不定期更新 sitemap 站点地图。<br />\n一般网站的 sitemap 文件都会有以下两种格式：<br />\nsitemap.xml，这是大部分搜索引擎所使用的用于提交网站网址的 XML 文件；<br />\nsitemap.html，这是可直接放在网站上用于用户访问或搜索引擎快速找到全站链接的页面（每页最多 500 条，自动分页）；</p>\n<p>网上有很多生成 sitemap 文件的站长工具，例如：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NpdGVtYXAuemhldGFvLmNvbS8=\">sitemap.zhetao.com/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3Rvb2xzLmJ1Z3NjYW5lci5jb20vc2l0ZW1hcHNwaWQlRTIlODAlQTY=\">tools.bugscaner.com/sitemapspid…</span></p>\n<p>生成的 sitemap 文件一般放在项目根目录下，然后可以在各个搜索引擎的站点平台提交 sitemap.xml 文件。</p>\n<p>当前设置：<br />\n在 xml.sitemap 网站制作 sitemap，sitemap.xml 文件暂时保存在我本地，如需提交或放在项目根目录下，上服务器前要说</p>\n<h3 id=\"robots-文件\"><a class=\"anchor\" href=\"#robots-文件\">#</a> robots 文件</h3>\n<p>蜘蛛在访问一个网站时，会首先会检查该网站的根域下是否有一个叫做 robots.txt 的纯文本文件，这个文件用于指定 spider 在您网站上的抓取范围。<br />\n如果你有哪些页面不想被蜘蛛访问，则可以通过 robots 文件告诉蜘蛛不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。<br />\nrobots 文件内容语法：<br />\n此文件主要由两种键值对组成：</p>\n<p>User-agent:  该项的值用于描述搜索引擎蜘蛛的名字。如果该项的值设为 *，则该协议对任何机器人均有效。<br />\nDisallow:  该项的值用于描述不希望被访问到的一个 URL，一个目录或者整个网站。以 Disallow 开头的 URL 均不会被搜索引擎蜘蛛访问到。任何一条 Disallow 记录为空，说明该网站的所有部分都允许被访问。</p>\n<p>参考： 掘金的 robots 文件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcm9ib3RzLnR4dA==\">https://juejin.cn/robots.txt</span></p>\n<p>robots 文件使用方法：<br />\n使用方法非常简单，只需要将 robots.txt 文件上传到网站根目录就行了，注意文件名一定要全小写。当成功上传后，通常在浏览器中访问域名 /robots.txt 就可以查看到文件。</p>\n<p>当前设置：<br />\n书写 robots.txt 文件，该文件暂时保存在我本地。如需提交或放在项目根目录下，上服务器前要说明</p>\n<h3 id=\"内链外链\"><a class=\"anchor\" href=\"#内链外链\">#</a> 内链｜外链</h3>\n<p>在搜索引擎优化领域，有着内链为王、外链为皇的说法，它们都能对提升网站排名有所帮助，尤其是外链的建设。 先来区分下网站内链和外链：<br />\n内链：从自己网站的一个页面指向另外一个页面。通过内链让网站内部形成网状结构，让蜘蛛的广度和深度达到最大化。<br />\n外链：在别的网站导入自己网站的链接。通过外链提升网站权重，提高网站流量。外链有以下几个好处：</p>\n<ul>\n<li>提升网站权重</li>\n<li>能够吸引蜘蛛来抓取网站</li>\n<li>提升关键词排名</li>\n<li>提升网址或品牌的曝光度</li>\n<li>给网站带来流量<br />\n外链能够为我们的网站带来流量，所以外链数量越多越好是必然的。但是，一定要注意外链的质量，例如对方网站没有被搜索引擎收录，对方网站性能过差，死链等，这些低质量的外链反而会影响到本站的排名。<br />\n另外，在添加内链外链的过程中，要注意在 a 标签中对 nofollow 和・external 属性的使用。</li>\n</ul>\n<p>当前设置：</p>\n<!-- 引入外部链接，起引流效果，spider无需跟踪 -->\n<pre><code>&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.baidu.com/&quot;&gt;百度&lt;/a&gt;\n&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.google.com/&quot;&gt;谷歌&lt;/a&gt;\n&lt;a rel=&quot;nofollow&quot; href=&quot;https://cn.bing.com/&quot;&gt;必应&lt;/a&gt;\n</code></pre>\n<p>带有 rel=nofollow 属性的链接会告诉搜索引擎忽略这个链接。阻止搜索引擎对该页面进行追踪。从而避免权重分散。这个属性只对搜索引擎有效，这是一个纯粹的 SEO 优化标签。</p>\n<h2 id=\"canonical-url网址规范化\"><a class=\"anchor\" href=\"#canonical-url网址规范化\">#</a> Canonical URL（网址规范化）</h2>\n<!-- 指定规范链接 -->\n<pre><code>&lt;link rel=&quot;canonical&quot; href=&quot;https://okjob.linchance.com&quot;&gt;\n</code></pre>\n<p>网页规范化的两个好处：</p>\n<ul>\n<li>解决网站由于网站 url 链接不一样，但网页内容是一样而造成搜索引擎重复收录的问题；</li>\n<li>有利于 URL 权重集中。<br />\n解决方法：<br />\n在页面的 head 标签中，加入以下 canonical 标签，指定规范化网址。<br />\n使用 HTTPS<br />\n 谷歌曾发公告表示，使用安全加密协议（HTTPS），是搜索引擎排名的一项参考因素。<br />\n所以，在域名相同情况下，HTTPS 站点比 HTTP 站点，能获得更好的排名。</li>\n</ul>\n<h2 id=\"ssr-服务端渲染-server-side-rendering\"><a class=\"anchor\" href=\"#ssr-服务端渲染-server-side-rendering\">#</a> SSR 服务端渲染（ Server-Side Rendering）</h2>\n<p>当下 SPA 应用盛行，虽然它有用户体验好，服务器压力小等优点，但是同时也暴露出很多问题。例如首屏加载较慢，不利于 SEO 等（因为这些 spa 应用内容是由 js 动态更新的，蜘蛛无法爬取网页内容）。<br />\n而 ssr 的出现，很好的解决了 SEO 的问题。因为服务端渲染是指指客户端向服务器发出请求，然后运行时动态生成 html 内容并返回给客户端。所以客户端可以获取到完整的页面内容。<br />\n目前流行的 Vue/React 前端框架，都有 SSR 的解决方案：<br />\nVue 的 nuxt.js<br />\nReact 的 next.js<br />\n 对于 Vue/React 来说，对于它们的 SSR/SSG 框架出现的原因就是主要就是 SEO 和首屏加载速度。</p>\n<p>当前设置：<br />\n项目一开始并没有用 Nuxt.js 框架，所以改造 SSR 是一项十分重大艰巨的工程，暂时不考虑</p>\n<h3 id=\"预渲染-prerender-spa-plugin\"><a class=\"anchor\" href=\"#预渲染-prerender-spa-plugin\">#</a> 预渲染 prerender-spa-plugin</h3>\n<p>如果只想改善部分页面的 SEO，可以不采用 SSR 的解决方案，毕竟无论是 next.js，还是 nuxt.js，都是有一定学习成本的。那么可以使用 prerender-spa-plugin 等插件来实现预渲染页面，在构建时就针对特定的路有生成静态的 html 文件。</p>\n<p>当前设置：<br />\n准备尝试，因看到较近日期的言论提到一些插件包含上面提到的插件已不再维护，需要再考察看看哪些更新的方法可以使用。</p>\n",
            "tags": [
                "前端开发",
                "前端开发"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "https://kiyoumiii.github.io/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Ant-design-vue中icon的使用",
            "date_published": "2024-09-17T12:22:45.000Z",
            "content_html": "<h1 id=\"ant-design-vue中使用icon图标\"><a class=\"anchor\" href=\"#ant-design-vue中使用icon图标\">#</a> Ant Design Vue 中使用 icon 图标</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW50ZHYuY29tL2NvbXBvbmVudHMvaWNvbi1jbi8jLUljb24=\">Ant-Design-Vue 的 icon 官网</span></p>\n<p>使用前首先要安装组件包：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> @ant-design/icons-vue</pre></td></tr></table></figure><p>点击对应的图标，会自动将图标名称进行复制<SnippetsOutlined /></p>\n<p>例如关闭：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CloseOutlined</span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><div align=\"center\">\n    <style>.udytgmcwyprd{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/01.jpg\" class=\"udytgmcwyprd\">\n</div>\n<p>但不能直接使用！！！需要将所有大写字母改为小写，删除掉 Oulined、TwoTone、Filled，并且中间 - 拼接 snippets</p>\n<p>调整为 <a-icon type=\"snippets\" /> 就可以使用啦。</p>\n<p>或者另一种可以直接使用的复制格式：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly8xeC5hbnRkdi5jb20vY29tcG9uZW50cy9pY29uLyNjb21wb25lbnRzLWljb24tZGVtby1iYXNpYw==\">Ant-design-vue 的 icon 图标</span><br />\n亲测有效！<br />\n复制格式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-icon</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>close<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><div align=\"center\">\n    <style>.qqoojhjmxrck{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/02.jpg\" class=\"qqoojhjmxrck\">\n</div>\n<p>进阶官方文档参考写法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>snippets<span class=\"token operator\">-</span>outlined <span class=\"token operator\">:</span>style<span class=\"token operator\">=</span><span class=\"token string\">\"&#123;font-size:'14px', color:'#666'&#125;\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> SnippetsOutlined <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ant-design/icons-vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      SnippetsOutlined<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>或者我的写法：</p>\n<div align=\"center\">\n    <style>.jhofzgecpcrm{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/03.jpg\" class=\"jhofzgecpcrm\">\n</div>\n<br>\n<div align=\"center\">\n    <style>.ubttkekknogi{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/04.jpg\" class=\"ubttkekknogi\">\n</div>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/09/17/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/",
            "url": "https://kiyoumiii.github.io/2024/09/17/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/",
            "title": "flex弹性布局",
            "date_published": "2024-09-17T12:02:24.000Z",
            "content_html": "<h1 id=\"flex弹性布局与问题记录\"><a class=\"anchor\" href=\"#flex弹性布局与问题记录\">#</a> flex 弹性布局与问题记录</h1>\n<h3 id=\"flex-弹性布局-子标签设置宽度无效的问题\"><a class=\"anchor\" href=\"#flex-弹性布局-子标签设置宽度无效的问题\">#</a> flex 弹性布局 子标签设置宽度无效的问题</h3>\n<p>Flexbox 是 flexible box 的简称（注：意思是 “灵活的盒子容器”），是 CSS3 引入的新的布局模式。它决定了元素如何在页面上排列，使它们能在不同的屏幕尺寸和设备下可预测地展现出来。</p>\n<p>它之所以被称为 Flexbox ，是因为它能够扩展和收缩 flex 容器内的元素，以最大限度地填充可用空间。</p>\n<p>MDN 介绍：弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。</p>\n<p>目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n<p>任何一个容器都可以指定为 Flex 布局。</p>\n<p>行内元素也可以使用 Flex 布局。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">section</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意，设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</p>\n<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称” 容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称” 项目”。</p>\n<div align=\"center\">\n    <style>.ghtyaoojpbok{}</style><img data-src=\"/2024/09/17/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/01.png\" class=\"ghtyaoojpbok\">\n</div>\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做 cross end。</p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL2ZsZXgtZ3JhbW1hci5odG1s\">菜鸟教程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzA3L2ZsZXgtZ3JhbW1hci5odG1s\">阮一峰的弹性布局教程</span></p>\n<p><strong>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</strong></p>\n<p><em>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的<strong> flex-shrink 属性为 0</strong>，其他项目都为 1，则空间不足时，前者不缩小。</em></p>\n<p>父元素设置了 display:flex, 那么所有的子标签都会默认加上 flex:0 1 auto;<br />\n 其中 1 就是 flex 中的 flex-shrink 属性，表示开启了元素的收缩功能，所以才会有左边子标签会挤掉右边子标签的一部分的问题。</p>\n<h3 id=\"主要结论\"><a class=\"anchor\" href=\"#主要结论\">#</a> 主要结论</h3>\n<p>设置 ** flex-shrink: 0;** 可以避免被拉伸</p>\n<p>举个例子：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.cardInfoItem text:nth-last-child(2)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">.cardInfoItem image</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 28rpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 14rpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "前端"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/09/17/vue3-Router%E8%B7%AF%E7%94%B1/",
            "url": "https://kiyoumiii.github.io/2024/09/17/vue3-Router%E8%B7%AF%E7%94%B1/",
            "title": "vue3-Router路由",
            "date_published": "2024-09-17T11:44:44.000Z",
            "content_html": "<h1 id=\"router-view标签\"><a class=\"anchor\" href=\"#router-view标签\">#</a> router-view 标签</h1>\n<h3 id=\"场景\"><a class=\"anchor\" href=\"#场景\">#</a> 场景：</h3>\n<p>原本在 edit 页面，通过 v-if 绑定侧边栏，当点击侧边栏内的按钮后，URL 会发生改变，携带 tempID 返回构成一个新的 URL。需求是 URL 发生变化后页面重新跳转至新的 URL 页面，实际是页面并没有刷新，即使 URL 栏已经改变，需要手动刷新后才能到预期的 URL 页面</p>\n<h3 id=\"问题解决思路\"><a class=\"anchor\" href=\"#问题解决思路\">#</a> 问题解决思路:</h3>\n<p>你可以把 router-view 当做是一个容器，它渲染的组件是你使用 vue-router 指定的</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fade-transform<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>out-in<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> //key属性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transition</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AppMain'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>fullPath</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这里 router-view 有一个 key 的属性，这个 key 的属性作用是：</p>\n<h3 id=\"1-不设置router-view的key属性\"><a class=\"anchor\" href=\"#1-不设置router-view的key属性\">#</a> 1. 不设置 router-view 的 key 属性</h3>\n<p>由于 Vue 会复用相同组件，即 /page/a =&gt; /page/b 或者 /page?id=a =&gt; /page?id=b 这类链接跳转时，将不再执行 created，mounted 之类的钩子，这时候你需要在路由组件中，添加 beforeRouteUpdate 钩子来执行相关方法拉取数据</p>\n<h3 id=\"2-设置router-view的key属性值为routepath\"><a class=\"anchor\" href=\"#2-设置router-view的key属性值为routepath\">#</a> 2. 设置 router-view 的 key 属性值为 $route.path</h3>\n<p>从 /page/a =&gt; /page/b，由于这两个路由的 $route.path 并不一样，所以组件被强制不复用，相关钩子加载顺序为 beforeRouteUpdate =&gt; created =&gt; mounted</p>\n<p>从 /page?id=a =&gt; /page?id=b，由于这两个路由的 $route.path 一样，所以和没设置 key 属性一样，会复用组件，相关钩子加载顺序为：beforeRouteUpdate</p>\n<h3 id=\"3-设置router-view的key属性值为routefullpath\"><a class=\"anchor\" href=\"#3-设置router-view的key属性值为routefullpath\">#</a> 3. 设置 router-view 的 key 属性值为 $route.fullPath</h3>\n<p>从 /page/a =&gt; /page/a，由于这两个路由的 $route.fullPath 并不一样，所以组件被强制不复用，相关钩子加载顺序为 <code>beforeRouteUpdate =&gt; created =&gt; mounted</code></p>\n<p>从 /page?id=a =&gt; /page?id=b，由于这两个路由的 $route.fullPath 并不一样，所以组件被强制不复用，相关钩子加载顺序为 <code>beforeRouteUpdate =&gt; created =&gt; mounted</code></p>\n<h3 id=\"最终解决方案\"><a class=\"anchor\" href=\"#最终解决方案\">#</a> 最终解决方案：</h3>\n<p>在 App.vue 中加入上述代码片段，设置 router-view 的 key 属性值为 $route.fullPath，这样一来，新的 ID 返回后组件强制不复用，就可以实现页面重新加载跳转的效果。</p>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/",
            "url": "https://kiyoumiii.github.io/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/",
            "title": "机器翻译赛-seq2seq与transformer",
            "date_published": "2024-08-19T08:02:58.000Z",
            "content_html": "<h2 id=\"seq2seq架构\"><a class=\"anchor\" href=\"#seq2seq架构\">#</a> Seq2Seq 架构</h2>\n<p>baseline 代码中实现了一个经典的序列到序列 (Seq2Seq) 模型，中间层使用的 GRU 网络，并且网络中加入了注意力机制 (Attention Mechanism)</p>\n<p>编码器将长度可变的输入序列转换成 形状固定的上下文变量， 并且将输入序列的信息在该上下文变量中进行编码。</p>\n<p>让我们实现循环神经网络编码器。 注意，我们使用了嵌入层（embedding layer） 来获得输入序列中每个词元的特征向量。 嵌入层的权重是一个矩阵， 其行数等于输入词表的大小（vocab_size）， 其列数等于特征向量的维度（embed_size）。 对于任意输入词元的索引 i ， 嵌入层获取权重矩阵的第 i 行（从 0 开始）以返回其特征向量。 另外，本文选择了一个多层门控循环单元来实现编码器。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Seq2SeqEncoder</span><span class=\"token punctuation\">(</span>d2l<span class=\"token punctuation\">.</span>Encoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"用于序列到序列学习的循环神经网络编码器\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 dropout<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Seq2SeqEncoder<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># 嵌入层</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span>vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rnn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>GRU<span class=\"token punctuation\">(</span>embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                          dropout<span class=\"token operator\">=</span>dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\"># 输出 'X' 的形状：(batch_size,num_steps,embed_size)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        X <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>embedding<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\"># 在循环神经网络模型中，第一个轴对应于时间步</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        X <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\"># 如果未提及状态，则默认为 0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>rnn<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\"># output 的形状：(num_steps,batch_size,num_hiddens)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\"># state 的形状：(num_layers,batch_size,num_hiddens)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">,</span> state</pre></td></tr></table></figure><p>下面，我们实例化上述编码器的实现： 我们使用一个两层门控循环单元编码器，其隐藏单元数为 16。 给定一小批量的输入序列 X（批量大小为 4，时间步为 7）。 在完成所有时间步后， 最后一层的隐状态的输出是一个张量（output 由编码器的循环层返回）， 其形状为（时间步数，批量大小，隐藏单元数）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>encoder <span class=\"token operator\">=</span> Seq2SeqEncoder<span class=\"token punctuation\">(</span>vocab_size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> num_hiddens<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                         num_layers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>encoder<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>output<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><p><code>torch.Size([7, 4, 16])</code></p>\n<p>由于这里使用的是门控循环单元， 所以在最后一个时间步的多层隐状态的形状是 （隐藏层的数量，批量大小，隐藏单元的数量）。 如果使用长短期记忆网络，state 中还将包含记忆单元信息。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>state<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><p><code>torch.Size([2, 4, 16])</code></p>\n<p>当实现解码器时， 我们直接使用编码器最后一个时间步的隐状态来初始化解码器的隐状态。 这就要求使用循环神经网络实现的编码器和解码器具有相同数量的层和隐藏单元。 为了进一步包含经过编码的输入序列的信息， 上下文变量在所有的时间步与解码器的输入进行拼接（concatenate）。 为了预测输出词元的概率分布， 在循环神经网络解码器的最后一层使用全连接层来变换隐状态。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Seq2SeqDecoder</span><span class=\"token punctuation\">(</span>d2l<span class=\"token punctuation\">.</span>Decoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"用于序列到序列学习的循环神经网络解码器\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 dropout<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Seq2SeqDecoder<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span>vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rnn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>GRU<span class=\"token punctuation\">(</span>embed_size <span class=\"token operator\">+</span> num_hiddens<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                          dropout<span class=\"token operator\">=</span>dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>dense <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>num_hiddens<span class=\"token punctuation\">,</span> vocab_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">init_state</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> enc_outputs<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> enc_outputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\"># 输出 'X' 的形状：(batch_size,num_steps,embed_size)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        X <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>embedding<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\"># 广播 context，使其具有与 X 相同的 num_steps</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        context <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>repeat<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        X_and_context <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>rnn<span class=\"token punctuation\">(</span>X_and_context<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        output <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\"># output 的形状：(batch_size,num_steps,vocab_size)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\"># state 的形状：(num_layers,batch_size,num_hiddens)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">,</span> state</pre></td></tr></table></figure><p>下面，我们用与前面提到的编码器中相同的超参数来实例化解码器。 如我们所见，解码器的输出形状变为（批量大小，时间步数，词表大小）， 其中张量的最后一个维度存储预测的词元分布。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>decoder <span class=\"token operator\">=</span> Seq2SeqDecoder<span class=\"token punctuation\">(</span>vocab_size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> num_hiddens<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                         num_layers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>decoder<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>state <span class=\"token operator\">=</span> decoder<span class=\"token punctuation\">.</span>init_state<span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> decoder<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>output<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><p><code>(torch.Size([4, 7, 10]), torch.Size([2, 4, 16]))</code></p>\n<p>上述循环神经网络 “编码器－解码器” 模型中的各层如:</p>\n<br>\n<div align=\"center\">\n    <style>.twthoxykntfg{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/01.png\" class=\"twthoxykntfg\">\n</div>\n<br>\n<p>在每个时间步，解码器预测了输出词元的概率分布。 类似于语言模型，可以使用 softmax 来获得分布， 并通过计算交叉熵损失函数来进行优化。<br />\n特定的填充词元被添加到序列的末尾， 因此不同长度的序列可以以相同形状的小批量加载。 但是，我们应该将填充词元的预测排除在损失函数的计算之外。<br />\n为此，我们可以使用下面的 sequence_mask 函数 通过零值化屏蔽不相关的项， 以便后面任何不相关预测的计算都是与零的乘积，结果都等于零。 例如，如果两个序列的有效长度（不包括填充词元）分别为 1 和 2， 则第一个序列的第一项和第二个序列的前两项之后的剩余项将被清除为零。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sequence_mask</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> valid_len<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"在序列中屏蔽不相关的项\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    maxlen <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mask <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                        device<span class=\"token operator\">=</span>X<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> valid_len<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> X</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sequence_mask<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>tensor([[1, 0, 0],         [4, 5, 0]])</code></p>\n<p>我们还可以使用此函数屏蔽最后几个轴上的所有项。如果愿意，也可以使用指定的非零值来替换这些项。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sequence_mask<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>`<br />\ntensor([[[ 1.,  1.,  1.,  1.],<br />\n[-1., -1., -1., -1.],<br />\n[-1., -1., -1., -1.]],</p>\n<pre><code>    [[ 1.,  1.,  1.,  1.],\n     [ 1.,  1.,  1.,  1.],\n     [-1., -1., -1., -1.]]])\n</code></pre>\n<p>`</p>\n<p>现在，我们可以通过扩展 softmax 交叉熵损失函数来遮蔽不相关的预测。 最初，所有预测词元的掩码都设置为 1。 一旦给定了有效长度，与填充词元对应的掩码将被设置为 0。 最后，将所有词元的损失乘以掩码，以过滤掉损失中填充词元产生的不相关预测。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MaskedSoftmaxCELoss</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"带遮蔽的softmax交叉熵损失函数\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># pred 的形状：(batch_size,num_steps,vocab_size)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># label 的形状：(batch_size,num_steps)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># valid_len 的形状：(batch_size,)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pred<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> valid_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        weights <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>ones_like<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        weights <span class=\"token operator\">=</span> sequence_mask<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">,</span> valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>reduction<span class=\"token operator\">=</span><span class=\"token string\">'none'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        unweighted_loss <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>MaskedSoftmaxCELoss<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            pred<span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        weighted_loss <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>unweighted_loss <span class=\"token operator\">*</span> weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> weighted_loss</pre></td></tr></table></figure><p>我们可以创建三个相同的序列来进行代码健全性检查， 然后分别指定这些序列的有效长度为 4、2 和 0。 结果就是，第一个序列的损失应为第二个序列的两倍，而第三个序列的损失应为零。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>loss <span class=\"token operator\">=</span> MaskedSoftmaxCELoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>loss<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>tensor([2.3026, 1.1513, 0.0000])</code></p>\n<p>在下面的循环训练过程中，特定的序列开始词元（“<bos>”）和 原始的输出序列（不包括序列结束词元 “<eos>”） 拼接在一起作为解码器的输入。 这被称为强制教学（teacher forcing）， 因为原始的输出序列（词元的标签）被送入解码器。 或者，将来自上一个时间步的预测得到的词元作为解码器的当前输入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">train_seq2seq</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> data_iter<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"训练序列到序列模型\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">xavier_init_weights</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>xavier_uniform_<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nn<span class=\"token punctuation\">.</span>GRU<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> m<span class=\"token punctuation\">.</span>_flat_weights_names<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token string\">\"weight\"</span> <span class=\"token keyword\">in</span> param<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    nn<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>xavier_uniform_<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>_parameters<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    net<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>xavier_init_weights<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    net<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>lr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    loss <span class=\"token operator\">=</span> MaskedSoftmaxCELoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    net<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    animator <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>Animator<span class=\"token punctuation\">(</span>xlabel<span class=\"token operator\">=</span><span class=\"token string\">'epoch'</span><span class=\"token punctuation\">,</span> ylabel<span class=\"token operator\">=</span><span class=\"token string\">'loss'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                     xlim<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num_epochs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        timer <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        metric <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>Accumulator<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 训练损失总和，词元数量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> batch <span class=\"token keyword\">in</span> data_iter<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            X<span class=\"token punctuation\">,</span> X_valid_len<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">,</span> Y_valid_len <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> batch<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            bos <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;bos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> Y<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                          device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            dec_input <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>bos<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 强制教学</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            Y_hat<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> dec_input<span class=\"token punctuation\">,</span> X_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            l <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">(</span>Y_hat<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">,</span> Y_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            l<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 损失函数的标量进行 “反向传播”</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            d2l<span class=\"token punctuation\">.</span>grad_clipping<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            num_tokens <span class=\"token operator\">=</span> Y_valid_len<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                metric<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> num_tokens<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            animator<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>metric<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> metric<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'loss </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>metric<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> metric<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.3f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>metric<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> timer<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.1f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> '</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token string-interpolation\"><span class=\"token string\">f'tokens/sec on </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，在机器翻译数据集上，我们可以 创建和训练一个循环神经网络 “编码器－解码器” 模型用于序列到序列的学习。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span> dropout <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>batch_size<span class=\"token punctuation\">,</span> num_steps <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lr<span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">,</span> device <span class=\"token operator\">=</span> <span class=\"token number\">0.005</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> d2l<span class=\"token punctuation\">.</span>try_gpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>train_iter<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>load_data_nmt<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>encoder <span class=\"token operator\">=</span> Seq2SeqEncoder<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>decoder <span class=\"token operator\">=</span> Seq2SeqDecoder<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>net <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>EncoderDecoder<span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> decoder<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>train_seq2seq<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> train_iter<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了采用一个接着一个词元的方式预测输出序列， 每个解码器当前时间步的输入都将来自于前一时间步的预测词元。 与训练类似，序列开始词元（“<bos>”） 在初始时间步被输入到解码器中。 该预测过程如 图所示， 当输出序列的预测遇到序列结束词元（“<eos>”）时，预测就结束了。</p>\n<br>\n<div align=\"center\">\n    <style>.fhllcchzmzry{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/02.png\" class=\"fhllcchzmzry\">\n</div>\n<br>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">predict_seq2seq</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> src_sentence<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    device<span class=\"token punctuation\">,</span> save_attention_weights<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"序列到序列模型的预测\"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 在预测时将 net 设置为评估模式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    net<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    src_tokens <span class=\"token operator\">=</span> src_vocab<span class=\"token punctuation\">[</span>src_sentence<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        src_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;eos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    enc_valid_len <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    src_tokens <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>truncate_pad<span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;pad>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 添加批量轴</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    enc_X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    enc_outputs <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">(</span>enc_X<span class=\"token punctuation\">,</span> enc_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    dec_state <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>init_state<span class=\"token punctuation\">(</span>enc_outputs<span class=\"token punctuation\">,</span> enc_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 添加批量轴</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    dec_X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">[</span>tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;bos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    output_seq<span class=\"token punctuation\">,</span> attention_weight_seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num_steps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Y<span class=\"token punctuation\">,</span> dec_state <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">(</span>dec_X<span class=\"token punctuation\">,</span> dec_state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># 我们使用具有预测最高可能性的词元，作为解码器在下一时间步的输入</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        dec_X <span class=\"token operator\">=</span> Y<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>dim<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        pred <span class=\"token operator\">=</span> dec_X<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>dim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\"># 保存注意力权重（稍后讨论）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> save_attention_weights<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            attention_weight_seq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>attention_weights<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\"># 一旦序列结束词元被预测，输出序列的生成就完成了</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> pred <span class=\"token operator\">==</span> tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;eos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        output_seq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">.</span>to_tokens<span class=\"token punctuation\">(</span>output_seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> attention_weight_seq</pre></td></tr></table></figure><p>BLUE 的计算代码如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">bleu</span><span class=\"token punctuation\">(</span>pred_seq<span class=\"token punctuation\">,</span> label_seq<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#@save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"计算BLEU\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    pred_tokens<span class=\"token punctuation\">,</span> label_tokens <span class=\"token operator\">=</span> pred_seq<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> label_seq<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    len_pred<span class=\"token punctuation\">,</span> len_label <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pred_tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>label_tokens<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    score <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> len_label <span class=\"token operator\">/</span> len_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        num_matches<span class=\"token punctuation\">,</span> label_subs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> collections<span class=\"token punctuation\">.</span>defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>len_label <span class=\"token operator\">-</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            label_subs<span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>label_tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>len_pred <span class=\"token operator\">-</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> label_subs<span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>pred_tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                num_matches <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                label_subs<span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>pred_tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        score <span class=\"token operator\">*=</span> math<span class=\"token punctuation\">.</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>num_matches <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>len_pred <span class=\"token operator\">-</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> score</pre></td></tr></table></figure><p>最后，利用训练好的循环神经网络 “编码器－解码器” 模型， 将几个英语句子翻译成法语，并计算 BLEU 的最终结果。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>engs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'go .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i lost .\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'he\\'s calm .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i\\'m home .'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fras <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'va !'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'j\\'ai perdu .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'il est calme .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'je suis chez moi .'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> eng<span class=\"token punctuation\">,</span> fra <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>engs<span class=\"token punctuation\">,</span> fras<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    translation<span class=\"token punctuation\">,</span> attention_weight_seq <span class=\"token operator\">=</span> predict_seq2seq<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        net<span class=\"token punctuation\">,</span> eng<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>eng<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> => </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>translation<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, bleu </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>bleu<span class=\"token punctuation\">(</span>translation<span class=\"token punctuation\">,</span> fra<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.3f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>go . =&gt; va !, bleu 1.000 i lost . =&gt; j'ai perdu ., bleu 1.000 he's calm . =&gt; il est riche ., bleu 0.658 i'm home . =&gt; je suis en retard ?, bleu 0.447</code></p>\n<h3 id=\"seq2seq-小结\"><a class=\"anchor\" href=\"#seq2seq-小结\">#</a> Seq2Seq 小结</h3>\n<ul>\n<li>\n<p>根据 “编码器 - 解码器” 架构的设计， 我们可以使用两个循环神经网络来设计一个序列到序列学习的模型。</p>\n</li>\n<li>\n<p>在实现编码器和解码器时，我们可以使用多层循环神经网络。</p>\n</li>\n<li>\n<p>我们可以使用遮蔽来过滤不相关的计算，例如在计算损失时。</p>\n</li>\n<li>\n<p>在 “编码器－解码器” 训练中，强制教学方法将原始输出序列（而非预测结果）输入解码器。</p>\n</li>\n<li>\n<p>BLEU 是一种常用的评估方法，它通过测量预测序列和标签序列之间的 n 元语法的匹配度来评估预测。</p>\n</li>\n</ul>\n<h3 id=\"transformer\"><a class=\"anchor\" href=\"#transformer\">#</a> Transformer</h3>\n<p>Transformer 架构与论文精讲已经在前面的文章中阐述过了。</p>\n<p>基于循环或卷积神经网络的序列到序列建模方法是现存机器翻译任务中的经典方法。然而，它们在建模文本长程依赖方面都存在一定的局限性。</p>\n<ul>\n<li>对于卷积神经网络来说，受限的上下文窗口在建模长文本方面天然地存在不足。如果要对长距离依赖进行描述，需要多层卷积操作，而且不同层之间信息传递也可能有损失，这些都限制了模型的能力。</li>\n<li>而对于循环神经网络来说，上下文的语义依赖是通过维护循环单元中的隐状态实现的。在编码过程中，每一个时间步的输入建模都涉及到对隐藏状态的修改。随着序列长度的增加，编码在隐藏状态中的序列早期的上下文信息被逐渐遗忘。尽管注意力机制的引入在一定程度上缓解了这个问题，但循环网络在编码效率方面仍存在很大的不足之处。由于编码端和解码端的每一个时间步的隐藏状态都依赖于前一时间步的计算结果，这就造成了在训练和推断阶段的低效。</li>\n<li>为了更好地描述文字序列，谷歌的研究人员在 2017 年提出了一种新的模型 Transformer。</li>\n</ul>\n<p>Transformer 在原论文中第一次提出就是将其应用到机器翻译领域，它的出现使得机器翻译的性能和效率迈向了一个新的阶段。它摒弃了循环结构，并完全通过注意力机制完成对源语言序列和目标语言序列全局依赖的建模。在抽取每个单词的上下文特征时，Transformer 通过自注意力机制（self-attention）衡量上下文中每一个单词对当前单词的重要程度。在这个过程当中没有任何的循环单元参与计算。这种高度可并行化的编码过程使得模型的运行变得十分高效。</p>\n<p>Transformer 的主要组件包括编码器 (Encoder)、解码器 (Decoder) 和注意力层。其核心是利用多头自注意力机制（Multi-Head Self-Attention），使每个位置的表示不仅依赖于当前位置，还能够直接获取其他位置的表示。自从提出以来，Transformer 模型在机器翻译、文本生成等自然语言处理任务中均取得了突破性进展，成为 NLP 领域新的主流模型。</p>\n<p>从宏观角度来看，Transformer 的编码器是由多个相同的层叠加而成的，每个层都有两个子层（子层表示为 sublayer）。第⼀个子层是多头自注意力（multi-head self-attention）汇聚；第二个子层是基于位置的前馈网络（positionwise feed-forward network）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 位置编码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PositionalEncoding</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">,</span> dropout<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> max_len<span class=\"token operator\">=</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>PositionalEncoding<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>dropout <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        pe <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>max_len<span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        position <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max_len<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        div_term <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token number\">10000.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> d_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        pe<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>position <span class=\"token operator\">*</span> div_term<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pe<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>position <span class=\"token operator\">*</span> div_term<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pe <span class=\"token operator\">=</span> pe<span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>register_buffer<span class=\"token punctuation\">(</span><span class=\"token string\">'pe'</span><span class=\"token punctuation\">,</span> pe<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>pe<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>dropout<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Transformer</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TransformerModel</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">,</span> nhead<span class=\"token punctuation\">,</span> num_encoder_layers<span class=\"token punctuation\">,</span> num_decoder_layers<span class=\"token punctuation\">,</span> dim_feedforward<span class=\"token punctuation\">,</span> dropout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TransformerModel<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        self<span class=\"token punctuation\">.</span>transformer <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Transformer<span class=\"token punctuation\">(</span>d_model<span class=\"token punctuation\">,</span> nhead<span class=\"token punctuation\">,</span> num_encoder_layers<span class=\"token punctuation\">,</span> num_decoder_layers<span class=\"token punctuation\">,</span> dim_feedforward<span class=\"token punctuation\">,</span> dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        self<span class=\"token punctuation\">.</span>src_embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        self<span class=\"token punctuation\">.</span>tgt_embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        self<span class=\"token punctuation\">.</span>positional_encoding <span class=\"token operator\">=</span> PositionalEncoding<span class=\"token punctuation\">(</span>d_model<span class=\"token punctuation\">,</span> dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>fc_out <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>d_model<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        self<span class=\"token punctuation\">.</span>src_vocab <span class=\"token operator\">=</span> src_vocab</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        self<span class=\"token punctuation\">.</span>tgt_vocab <span class=\"token operator\">=</span> tgt_vocab</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        self<span class=\"token punctuation\">.</span>d_model <span class=\"token operator\">=</span> d_model</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> tgt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\"># 调整 src 和 tgt 的维度</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (seq_len, batch_size)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        tgt <span class=\"token operator\">=</span> tgt<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (seq_len, batch_size)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        src_mask <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">.</span>generate_square_subsequent_mask<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        tgt_mask <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">.</span>generate_square_subsequent_mask<span class=\"token punctuation\">(</span>tgt<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>tgt<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        src_padding_mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>src <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>src_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;pad>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        tgt_padding_mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tgt <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;pad>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        src_embedded <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>positional_encoding<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>src_embedding<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>d_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        tgt_embedded <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>positional_encoding<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tgt_embedding<span class=\"token punctuation\">(</span>tgt<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>d_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        output <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">(</span>src_embedded<span class=\"token punctuation\">,</span> tgt_embedded<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                                  src_mask<span class=\"token punctuation\">,</span> tgt_mask<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> src_padding_mask<span class=\"token punctuation\">,</span> tgt_padding_mask<span class=\"token punctuation\">,</span> src_padding_mask<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>fc_out<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"上分技巧\"><a class=\"anchor\" href=\"#上分技巧\">#</a> 上分技巧</h3>\n<ul>\n<li>\n<p>最简单的就是调参，将 epochs 调大一点，使用全部训练集，以及调整模型的参数，如 head、layers 等。如果数据量允许，增加模型的深度（更多的编码器 / 解码器层）或宽度（更大的隐藏层尺寸），这通常可以提高模型的表达能力和翻译质量，尤其是在处理复杂或专业内容时。</p>\n</li>\n<li>\n<p>加入术语词典，这是在此竞赛中比较有效的方法，加入术语词典的方法策略也有很多，如：</p>\n<ul>\n<li>在模型生成的翻译输出中替换术语，这是最简单的方法</li>\n<li>整合到数据预处理流程，确保它们在翻译中保持一致</li>\n<li>在模型内部动态地调整术语的嵌入，这涉及到在模型中加入一个额外的层，该层负责查找术语词典中的术语，并为其生成专门的嵌入向量，然后将这些向量与常规的词嵌入结合使用</li>\n</ul>\n</li>\n<li>\n<p>认真做数据清洗</p>\n</li>\n<li>\n<p>数据扩增：</p>\n<ul>\n<li>回译（back-translation）：将源语言文本先翻译成目标语言，再将目标语言文本翻译回源语言，生成的新文本作为额外的训练数据</li>\n<li>同义词替换：随机选择句子中的词，并用其同义词替换</li>\n<li>使用句法分析和语义解析技术重新表述句子，保持原意不变</li>\n<li>将文本翻译成多种语言后再翻译回原语言，以获得多样化翻译</li>\n</ul>\n</li>\n<li>\n<p>采用更精细的学习率调度策略（baseline 我们使用的是固定学习率）：</p>\n<ul>\n<li>Noam Scheduler：结合了 warmup（预热）阶段和衰减阶段</li>\n<li>Step Decay：最简单的一种学习率衰减策略，每隔一定数量的 epoch，学习率按固定比例衰减</li>\n<li>Cosine Annealing：学习率随周期性变化，通常从初始值下降到接近零，然后再逐渐上升</li>\n</ul>\n</li>\n<li>\n<p>集成学习：训练多个不同初始化或架构的模型，并使用集成方法（如投票或平均）来产生最终翻译。这可以减少单一模型的过拟合风险，提高翻译的稳定性。</p>\n</li>\n</ul>\n",
            "tags": [
                "机器学习",
                "NLP"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/",
            "url": "https://kiyoumiii.github.io/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/",
            "title": "机器翻译赛-门控循环单元GRU",
            "date_published": "2024-08-19T07:24:50.000Z",
            "content_html": "<h2 id=\"gru-门控循环单元\"><a class=\"anchor\" href=\"#gru-门控循环单元\">#</a> GRU 门控循环单元</h2>\n<ul>\n<li>早期观测值对预测所有未来观测值具有非常重要的意义。我们希望有某些机制能够在一个记忆元里存储重要的早期信息。 如果没有这样的机制，我们将不得不给这个观测值指定一个非常大的梯度， 因为它会影响所有后续的观测值。</li>\n<li>一些词元没有相关的观测值。我们希望有一些机制来跳过隐状态表示中的此类词元。</li>\n<li>序列的各个部分之间存在逻辑中断。在这种情况下，最好有一种方法来重置我们的内部状态表示。</li>\n</ul>\n<p>在学术界已经提出了许多方法来解决这类问题。 其中最早的方法是 “长短期记忆”（long-short-term memory，LSTM） (Hochreiter and Schmidhuber, 1997)，<br />\n门控循环单元（gated recurrent unit，GRU） (Cho et al., 2014) 是一个稍微简化的变体，通常能够提供同等的效果， 并且计算 (Chung et al., 2014) 的速度明显更快。 由于门控循环单元更简单，我们从它开始解读。</p>\n<p>门控循环单元与普通的循环神经网络之间的关键区别在于： 前者支持隐状态的门控。 这意味着模型有专门的机制来确定应该何时更新隐状态， 以及应该何时重置隐状态。 这些机制是可学习的，并且能够解决了上面列出的问题。 例如，如果第一个词元非常重要， 模型将学会在第一次观测之后不更新隐状态。 同样，模型也可以学会跳过不相关的临时观测。 最后，模型还将学会在需要的时候重置隐状态。 下面我们将详细讨论各类门控。</p>\n<p>我们首先介绍重置门（reset gate）和更新门（update gate）。 我们把它们设计成（0，1）区间中的向量， 这样我们就可以进行凸组合。 重置门允许我们控制 “可能还想记住” 的过去状态的数量； 更新门将允许我们控制新状态中有多少个是旧状态的副本。</p>\n<p>我们从构造这些门控开始。 图 9.1.1 描述了门控循环单元中的重置门和更新门的输入， 输入是由当前时间步的输入和前一时间步的隐状态给出。 两个门的输出是由使用 sigmoid 激活函数的两个全连接层给出。</p>\n<br>\n<div align=\"center\">\n    <style>.pftumimjgwez{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/01.png\" class=\"pftumimjgwez\">\n</div>\n<br>\n<br>\n<div align=\"center\">\n    <style>.qgojhhbdzfje{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/02.png\" class=\"qgojhhbdzfje\">\n</div>\n<br>\n<br>\n<div align=\"center\">\n    <style>.kyrudpguvbwf{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/03.png\" class=\"kyrudpguvbwf\">\n</div>\n<br>\n<p>总之，门控循环单元具有以下两个显著特征：</p>\n<ul>\n<li>\n<p>重置门有助于捕获序列中的短期依赖关系；</p>\n</li>\n<li>\n<p>更新门有助于捕获序列中的长期依赖关系。</p>\n</li>\n</ul>\n<h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<ul>\n<li>\n<p>门控循环神经网络可以更好地捕获时间步距离很长的序列上的依赖关系。</p>\n</li>\n<li>\n<p>重置门有助于捕获序列中的短期依赖关系。</p>\n</li>\n<li>\n<p>更新门有助于捕获序列中的长期依赖关系。</p>\n</li>\n<li>\n<p>重置门打开时，门控循环单元包含基本循环神经网络；更新门打开时，门控循环单元可以跳过子序列。</p>\n</li>\n</ul>\n",
            "tags": [
                "机器学习",
                "NLP"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/",
            "url": "https://kiyoumiii.github.io/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/",
            "title": "基于术语词典干预的机器翻译挑战赛",
            "date_published": "2024-08-17T14:15:33.000Z",
            "content_html": "<h2 id=\"赛事背景\"><a class=\"anchor\" href=\"#赛事背景\">#</a> 赛事背景</h2>\n<p>赛事背景<br />\n目前神经机器翻译技术已经取得了很大的突破，但在特定领域或行业中，由于机器翻译难以保证术语的一致性，导致翻译效果还不够理想。对于术语名词、人名地名等机器翻译不准确的结果，可以通过术语词典进行纠正，避免了混淆或歧义，最大限度提高翻译质量。</p>\n<p>赛事任务<br />\n基于术语词典干预的机器翻译挑战赛选择以英文为源语言，中文为目标语言的机器翻译。本次大赛除英文到中文的双语数据，还提供英中对照的术语词典。参赛队伍需要基于提供的训练数据样本从多语言机器翻译模型的构建与训练，并基于测试集以及术语词典，提供最终的翻译结果。</p>\n<p>赛题数据</p>\n<ul>\n<li>训练集：双语数据 - 中英 14 万余双语句对</li>\n<li>开发集：英中 1000 双语句对</li>\n<li>测试集：英中 1000 双语句对</li>\n<li>术语词典：英中 2226 条</li>\n</ul>\n<p>简单说明</p>\n<ul>\n<li>训练集（training set）用于运行你的学习算法。</li>\n<li>开发集（development set）用于调整参数，选择特征，以及对学习算法作出其它决定。有时也称为留出交叉验证集（hold-out cross validation set）。</li>\n<li>测试集（test set）用于评估算法的性能，但不会据此改变学习算法或参数。</li>\n</ul>\n<p>评估指标<br />\n对于参赛队伍提交的测试集翻译结果文件，采用自动评价指标 BLEU-4 进行评价，具体工具使用 sacrebleu 开源版本。</p>\n<h3 id=\"什么是-bleu-4\"><a class=\"anchor\" href=\"#什么是-bleu-4\">#</a> 什么是 BLEU-4  ？</h3>\n<p>BLEU，全称为 Bilingual Evaluation Understudy（双语评估替换），是一种对生成语句进行评估的指标。BLEU 评分是由 Kishore Papineni 等人 2002 年的论文《BLEU: a Method for Automatic Evaluation of Machine Translation》中提出的。</p>\n<p>在机器翻译领域，BLEU（Bilingual Evaluation Understudy）是一种常用的自动评价指标，用于衡量计算机生成的翻译与一组参考译文之间的相似度。这个指标特别关注 n-grams（连续的 n 个词）的精确匹配，可以被认为是对翻译准确性和流利度的一种统计估计。计算 BLEU 分数时，首先会统计生成文本中 n-grams 的频率，然后将这些频率与参考文本中的 n-grams 进行比较。如果生成的翻译中包含的 n-grams 与参考译文中出现的相同，则认为是匹配的。最终的 BLEU 分数是一个介于 0 到 1 之间的数值，其中 1 表示与参考译文完美匹配，而 0 则表示完全没有匹配。</p>\n<p>BLEU-4 特别指的是在计算时考虑四元组（即连续四个词）的匹配情况。</p>\n<h2 id=\"基于-seq2seq-的-baseline-详解\"><a class=\"anchor\" href=\"#基于-seq2seq-的-baseline-详解\">#</a> 基于 Seq2Seq 的 Baseline 详解</h2>\n<h3 id=\"环境依赖\"><a class=\"anchor\" href=\"#环境依赖\">#</a> 环境依赖</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!pip install torchtext    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>!pip install jieba</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>!pip install sacrebleu</pre></td></tr></table></figure><p>有几个包需要额外安装：</p>\n<ul>\n<li>torchtext ：是一个用于自然语言处理（NLP）任务的库，它提供了丰富的功能，包括数据预处理、词汇构建、序列化和批处理等，特别适合于文本分类、情感分析、机器翻译等任务</li>\n<li>jieba：是一个中文分词库，用于将中文文本切分成有意义的词语</li>\n<li>sacrebleu：用于评估机器翻译质量的工具，主要通过计算 BLEU（Bilingual Evaluation Understudy）得分来衡量生成文本与参考译文之间的相似度</li>\n</ul>\n<p>这里，我们需要安装 spacy 用于英文的 tokenizer（分词，就是将句子、段落、文章这种长文本，分解为以字词为单位的数据结构，方便后续的处理分析工作）</p>\n<ul>\n<li>spacy：是一个强大的自然语言处理库，支持 70 + 语言的分词与训练</li>\n</ul>\n<div align=\"center\">\n    <style>.syhtbmakvaci{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/spacy.png\" class=\"syhtbmakvaci\">\n</div>\n<p>需要注意的是，使用命令！python -m spacy download en_core_web_trf 安装 en_core_web_sm 语言包非常的慢，经常会安装失败，因此可以离线安装 en_core_web_sm 语言包，从该路径下：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V4cGxvc2lvbi9zcGFjeS1tb2RlbHMvcmVsZWFzZXM=\">https://github.com/explosion/spacy-models/releases</span> 安装对应版本的 en_core_web_trf 语言包，可以看到我的 en_core_web_trf 3.7.3 版本的要求 spaCy &gt;=3.7.2,❤️.8.0，刚好满足我的 3.7.5 的 spacy!：</p>\n<div align=\"center\">\n    <style>.oskymebrxmxa{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/encore.png\" class=\"oskymebrxmxa\">\n</div>\n<p>将下载到本地的压缩包上传到你的魔搭平台上的  dataset 目录下，然后使用！pip install ../dataset/en_core_web_trf 安装英文语言包：</p>\n<div align=\"center\">\n    <style>.vinzxwlwjqyh{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/model.png\" class=\"vinzxwlwjqyh\">\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!pip install <span class=\"token operator\">-</span>U pip setuptools wheel <span class=\"token operator\">-</span>i https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pypi<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>simple</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pip install <span class=\"token operator\">-</span>U <span class=\"token string\">'spacy[cuda12x,transformers,lookups]'</span> <span class=\"token operator\">-</span>i https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pypi<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>simple</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>!pip install <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>dataset<span class=\"token operator\">/</span>en_core_web_trf<span class=\"token operator\">-</span><span class=\"token number\">3.7</span><span class=\"token number\">.3</span><span class=\"token operator\">-</span>py3<span class=\"token operator\">-</span>none<span class=\"token operator\">-</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">.</span>whl</pre></td></tr></table></figure><h3 id=\"数据预处理\"><a class=\"anchor\" href=\"#数据预处理\">#</a> 数据预处理</h3>\n<p>机器翻译任务的预处理是确保模型能够有效学习源语言到目标语言映射的关键步骤。预处理阶段通常包括多个步骤，旨在清理、标准化和转换数据，使之适合模型训练。以下是机器翻译任务预处理中常见的几个处理步骤：</p>\n<ul>\n<li>\n<p>清洗和规范化数据</p>\n<ul>\n<li>去除无关信息：删除 HTML 标签、特殊字符、非文本内容等，确保文本的纯净性（本赛题的训练集中出现了非常多的脏数据，如 “Joey.        （掌声） （掌声） 乔伊”、“Thank you.        （马嘶声） 谢谢你们” 等这种声音词）</li>\n<li>统一格式：转换所有文本为小写，确保一致性；标准化日期、数字等格式。</li>\n<li>分句和分段：将长文本分割成句子或段落，便于处理和训练。</li>\n</ul>\n</li>\n<li>\n<p>分词</p>\n<ul>\n<li>分词：将句子分解成单词或词素（构成单词的基本组成部分，一个词素可以是一个完整的单词，也可以是单词的一部分，但每一个词素都至少携带一部分语义或语法信息），这是 NLP 中最基本的步骤之一。我们这里使用了使用 jieba 对中文进行分词，使用 spaCy 对英文进行分词。</li>\n</ul>\n</li>\n<li>\n<p>构建词汇表和词向量</p>\n<ul>\n<li>词汇表构建：从训练数据中收集所有出现过的词汇，构建词汇表，并为每个词分配一个唯一的索引。</li>\n<li>词向量：使用预训练的词向量或自己训练词向量，将词汇表中的词映射到高维空间中的向量，以捕捉语义信息（当前大模型领域训练的 embedding 模型就是用来完成此任务的）。</li>\n</ul>\n</li>\n<li>\n<p>序列截断和填充</p>\n<ul>\n<li>序列截断：限制输入序列的长度，过长的序列可能增加计算成本，同时也可能包含冗余信息。</li>\n<li>序列填充：将所有序列填充至相同的长度，便于批量处理。通常使用<PAD>标记填充。</li>\n</ul>\n</li>\n<li>\n<p>添加特殊标记</p>\n<ul>\n<li>序列开始和结束标记：在序列两端添加<SOS>（Sequence Start）和<EOS>（Sequence End）标记，帮助模型识别序列的起始和结束。</li>\n<li>未知词标记：为不在词汇表中的词添加<UNK>（Unknown）标记，使模型能够处理未见过的词汇。</li>\n</ul>\n</li>\n<li>\n<p>数据增强</p>\n<ul>\n<li>随机替换或删除词：在训练数据中随机替换或删除一些词，增强模型的鲁棒性。</li>\n<li>同义词替换：使用同义词替换原文中的词，增加训练数据的多样性。</li>\n</ul>\n</li>\n<li>\n<p>数据分割</p>\n<ul>\n<li>划分数据集：将数据划分为训练集、验证集和测试集，分别用于模型训练、参数调整和最终性能评估（该赛题中已划分好，不需要自己进行划分）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模型训练\"><a class=\"anchor\" href=\"#模型训练\">#</a> 模型训练</h3>\n<p>说到神经机器翻译就不得不提编码器 - 解码器模型，或编码器 - 解码器框架（EncoderDecoder Paradigm）。本质上，编码器 ­ 解码器模型是描述输入 ­ 输出之间关系的一种方式。编码器 ­ 解码器这个概念在日常生活中并不少见。</p>\n<div align=\"center\">\n    <style>.ubagjvhsjsew{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/e-d.png\" class=\"ubagjvhsjsew\">\n</div>\n<p><code>给定一个中文句子“我/对/你/感到/满意”，编码器会将这句话编码成一个实数向量(0.2, −1, 6, 5, 0.7, −2)，这个向量就是源语言句子的“表示”结果。虽然有些不可思议，但是神经机器翻译模型把这个向量等同于输入序列。向量中的数字并没有实际的意义，然而解码器却能从中提取到源语言句子中所包含的信息。也有研究人员把向量的每一个维度看作是一个“特征”，这样源语言句子就被表示成多个“特征”的联合，而且这些特征可以被自动学习。有了这样的源语言句子的“表示”，解码器可以把这个实数向量作为输入，然后逐词生成目标语言句子“I am satisfied with you”。</code></p>\n<p>在源语言句子的表示形式确定之后，需要设计相应的编码器和解码器结构。在当今主流的神经机器翻译系统中，编码器由词嵌入层和中间网络层组成：</p>\n<ul>\n<li>当输入一串单词序列时，词嵌入层 (embedding) 会将每个单词映射到多维实数表示空间，这个过程也被称为词嵌入。</li>\n<li>之后中间层会对词嵌入向量进行更深层的抽象，得到输入单词序列的中间表示。中间层的实现方式有很多，比如：循环神经网络、卷积神经网络、自注意力机制等都是模型常用的结构。</li>\n</ul>\n<p>解码器的结构基本上和编码器是一致的，在基于循环神经网络的翻译模型中，解码器只比编码器多了输出层，用于输出每个目标语言位置的单词生成概率，而在基于自注意力机制的翻译模型中，除了输出层，解码器还比编码器多一个编码 ­ 解码注意力子层，用于帮助模型更好地利用源语言信息。</p>\n<p>通过循环网络对源语言文本进行编码，并生成目标语言翻译结果的过程十分简单。然而，它仅仅使用一个定长的向量 $$h_{m}$$ 编码整个源语言序列。这对于较短的源语言文本没有什么问题，但随着文本序列长度的逐渐加长，单一的一个向量 hm 可能不足以承载源语言序列当中的所有信息。</p>\n<div align=\"center\">\n    <style>.uwzqclxpkuwb{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/RNN_BLUE.png\" class=\"uwzqclxpkuwb\">\n</div>\n<p>蓝色的线代表上述简单循环神经网络性能随源语言文本长度的变化趋势。当文本长度在 20 个单词以内时，单一向量能够承载源语言文本中的必要信息。随着文本序列的进一步增加，翻译性能的评价指标 BLEU 的值就开始出现明显地下降。因此，这就启发我们使用更加有效地机制从编码器向解码器传递源语言信息，这就是接下来要讲到的注意力机制。</p>\n<p>引入注意力机制的循环机器翻译架构与基于简单循环网络的机器翻译模型大体结构相似，均采用循环神经网络作为编码器与解码器的实现。关键的不同点在于注意力机制的引入使得不再需要把原始文本中的所有必要信息压缩到一个向量当中。引入注意力机制的循环神经网络机器翻译架构如图所示:</p>\n<p>1. 无注意力机制：<br />\n<br></p>\n<div align=\"center\">\n    <style>.muygjhtohidp{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/no_attention.png\" class=\"muygjhtohidp\">\n</div>\n<br>\n2.引入注意力机制：\n<br>\n<div align=\"center\">\n    <style>.sbkdrsynxfri{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/attention.png\" class=\"sbkdrsynxfri\">\n</div>\n<br>\n<p>传统的 Seq2Seq 模型在解码阶段仅依赖于编码器产生的最后一个隐藏状态，这在处理长序列时效果不佳。注意力机制允许解码器在生成每个输出词时，关注编码器产生的所有中间状态，从而更好地利用源序列的信息。具体来说，给定源语言序列经过编码器输出的向量序列 $$h_{1},h_{2},h_{3},...,h_{m}$$，注意力机制旨在依据解码端翻译的需要，自适应地从这个向量序列中查找对应的信息。</p>\n<p><em>baseline 代码中实现了一个经典的序列到序列 (Seq2Seq) 模型，中间层使用的 GRU 网络，并且网络中加入了注意力机制 (Attention Mechanism)</em></p>\n<ul>\n<li>GRU 知识讲解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5kMmwuYWkvY2hhcHRlcl9yZWN1cnJlbnQtbW9kZXJuL2dydS5odG1s\">https://zh.d2l.ai/chapter_recurrent-modern/gru.html</span></li>\n</ul>\n<h3 id=\"翻译质量评价\"><a class=\"anchor\" href=\"#翻译质量评价\">#</a> 翻译质量评价</h3>\n<p>本世纪初研究人员提出了译文质量自动评价方法 BLEU（Bilingual Evaluation Understudy）。该方法使得机器翻译系统的评价变得自动、快速、便捷，而且评价过程可以重复。正是由于 BLEU 等自动评价方法的提出，机器翻译研究人员可以在更短的时间内得到译文质量的评价结果，加速系统研发的进程。</p>\n<p>P.S. 文中涉及到的 GRU 门控循环单元，与改进的基于 Transformer 的解决方案，都会放在本系列的其他文章中单独讲解。</p>\n",
            "tags": [
                "机器学习",
                "NLP"
            ]
        }
    ]
}