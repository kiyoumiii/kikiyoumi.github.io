<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ant-design-vue中icon的使用</title>
      <link href="/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Ant-Design-Vue中使用icon图标"><a href="#Ant-Design-Vue中使用icon图标" class="headerlink" title="Ant Design Vue中使用icon图标"></a>Ant Design Vue中使用icon图标</h1><p><a href="https://www.antdv.com/components/icon-cn/#-Icon">Ant-Design-Vue的icon官网</a></p><p>使用前首先要安装组件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @ant-design/icons-vue</span><br></pre></td></tr></table></figure><p>点击对应的图标，会自动将图标名称进行复制<SnippetsOutlined /></p><p>例如关闭：<CloseOutlined /></p><div align="center">    <style>.ukotfnhovcuq{}</style><img src="/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/01.jpg" class="ukotfnhovcuq"></div><p>但不能直接使用！！！需要将所有大写字母改为小写，删除掉Oulined、TwoTone、Filled，并且中间-拼接snippets</p><p>调整为 <a-icon type="snippets" /> 就可以使用啦。</p><p>或者另一种可以直接使用的复制格式：<br><a href="https://1x.antdv.com/components/icon/#components-icon-demo-basic">Ant-design-vue的icon图标</a><br>亲测有效！<br>复制格式：<a-icon type="close" /></p><div align="center">    <style>.psdlemvoujmo{}</style><img src="/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/02.jpg" class="psdlemvoujmo"></div><p>进阶官方文档参考写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">snippets-outlined</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;font-size:&#x27;14px&#x27;, color:&#x27;#666&#x27;&#125;&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; <span class="title class_">SnippetsOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons-vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">SnippetsOutlined</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>或者我的写法：</p><div align="center">    <style>.uhydojpsajxx{}</style><img src="/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/03.jpg" class="uhydojpsajxx"></div><div align="center">    <style>.qoixxvpxoiit{}</style><img src="/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/04.jpg" class="qoixxvpxoiit"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flex弹性布局</title>
      <link href="/2024/09/17/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
      <url>/2024/09/17/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="flex弹性布局与问题记录"><a href="#flex弹性布局与问题记录" class="headerlink" title="flex弹性布局与问题记录"></a>flex弹性布局与问题记录</h1><h3 id="flex-弹性布局-子标签设置宽度无效的问题"><a href="#flex-弹性布局-子标签设置宽度无效的问题" class="headerlink" title="flex 弹性布局 子标签设置宽度无效的问题"></a>flex 弹性布局 子标签设置宽度无效的问题</h3><p>Flexbox 是 flexible box 的简称（注：意思是“灵活的盒子容器”），是 CSS3 引入的新的布局模式。它决定了元素如何在页面上排列，使它们能在不同的屏幕尺寸和设备下可预测地展现出来。</p><p>它之所以被称为 Flexbox ，是因为它能够扩展和收缩 flex 容器内的元素，以最大限度地填充可用空间。</p><p>MDN介绍：弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。</p><p>目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p>任何一个容器都可以指定为 Flex 布局。</p><p>行内元素也可以使用 Flex 布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p><div align="center">    <style>.kxwkoplrowzn{}</style><img src="/2024/09/17/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/01.png" class="kxwkoplrowzn"></div><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><p><a href="https://www.runoob.com/w3cnote/flex-grammar.html">菜鸟教程</a></p><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰的弹性布局教程</a></p><p><strong>flex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</strong></p><p><em>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<strong>flex-shrink属性为0</strong>，其他项目都为1，则空间不足时，前者不缩小。</em></p><p>父元素设置了display:flex,那么所有的子标签都会默认加上flex:0 1 auto;<br>其中1 就是 flex中的 flex-shrink 属性,表示开启了元素的收缩功能，所以才会有左边子标签会挤掉右边子标签的一部分的问题。</p><h3 id="主要结论"><a href="#主要结论" class="headerlink" title="主要结论"></a>主要结论</h3><p>设置 ** flex-shrink: 0;**可以避免被拉伸</p><p>举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cardInfoItem</span> <span class="selector-tag">text</span><span class="selector-pseudo">:nth-last-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cardInfoItem</span> <span class="selector-tag">image</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">28</span>rpx;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">14</span>rpx;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3-Router路由</title>
      <link href="/2024/09/17/vue3-Router%E8%B7%AF%E7%94%B1/"/>
      <url>/2024/09/17/vue3-Router%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="router-view标签"><a href="#router-view标签" class="headerlink" title="router-view标签"></a>router-view标签</h1><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><p>原本在edit页面，通过v-if绑定侧边栏，当点击侧边栏内的按钮后，URL会发生改变，携带tempID返回构成一个新的URL。需求是URL发生变化后页面重新跳转至新的URL页面，实际是页面并没有刷新，即使URL栏已经改变，需要手动刷新后才能到预期的URL页面</p><h3 id="问题解决思路"><a href="#问题解决思路" class="headerlink" title="问题解决思路:"></a>问题解决思路:</h3><p>你可以把router-view当做是一个容器，它渲染的组件是你使用vue-router指定的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;app-main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade-transform&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span> /&gt;</span> //key属性</span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;AppMain&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">key</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">fullPath</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里router-view有一个key的属性，这个key的属性作用是：</p><h3 id="1-不设置router-view的key属性"><a href="#1-不设置router-view的key属性" class="headerlink" title="1. 不设置router-view的key属性"></a>1. 不设置router-view的key属性</h3><p>由于Vue会复用相同组件，即&#x2F;page&#x2F;a &#x3D;&gt; &#x2F;page&#x2F;b或者&#x2F;page?id&#x3D;a &#x3D;&gt; &#x2F;page?id&#x3D;b这类链接跳转时，将不再执行created，mounted之类的钩子，这时候你需要在路由组件中，添加beforeRouteUpdate钩子来执行相关方法拉取数据</p><h3 id="2-设置router-view的key属性值为-route-path"><a href="#2-设置router-view的key属性值为-route-path" class="headerlink" title="2. 设置router-view的key属性值为$route.path"></a>2. 设置router-view的key属性值为$route.path</h3><p>从&#x2F;page&#x2F;a &#x3D;&gt; &#x2F;page&#x2F;b，由于这两个路由的$route.path并不一样，所以组件被强制不复用，相关钩子加载顺序为beforeRouteUpdate &#x3D;&gt; created &#x3D;&gt; mounted</p><p>从&#x2F;page?id&#x3D;a &#x3D;&gt; &#x2F;page?id&#x3D;b，由于这两个路由的$route.path一样，所以和没设置key属性一样，会复用组件，相关钩子加载顺序为：beforeRouteUpdate</p><h3 id="3-设置router-view的key属性值为-route-fullPath"><a href="#3-设置router-view的key属性值为-route-fullPath" class="headerlink" title="3. 设置router-view的key属性值为$route.fullPath"></a>3. 设置router-view的key属性值为$route.fullPath</h3><p>从&#x2F;page&#x2F;a &#x3D;&gt; &#x2F;page&#x2F;a，由于这两个路由的$route.fullPath并不一样，所以组件被强制不复用，相关钩子加载顺序为<code>beforeRouteUpdate =&gt; created =&gt; mounted</code></p><p>从&#x2F;page?id&#x3D;a &#x3D;&gt; &#x2F;page?id&#x3D;b，由于这两个路由的$route.fullPath并不一样，所以组件被强制不复用，相关钩子加载顺序为<code>beforeRouteUpdate =&gt; created =&gt; mounted</code></p><h3 id="最终解决方案："><a href="#最终解决方案：" class="headerlink" title="最终解决方案："></a>最终解决方案：</h3><p>在App.vue中加入上述代码片段，设置router-view的key属性值为$route.fullPath，这样一来，新的ID返回后组件强制不复用，就可以实现页面重新加载跳转的效果。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>机器翻译赛-seq2seq与transformer</title>
      <link href="/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/"/>
      <url>/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/</url>
      
        <content type="html"><![CDATA[<h2 id="Seq2Seq架构"><a href="#Seq2Seq架构" class="headerlink" title="Seq2Seq架构"></a>Seq2Seq架构</h2><p>baseline 代码中实现了一个经典的序列到序列(Seq2Seq)模型，中间层使用的GRU网络，并且网络中加入了注意力机制(Attention Mechanism)</p><p>编码器将长度可变的输入序列转换成 形状固定的上下文变量， 并且将输入序列的信息在该上下文变量中进行编码。</p><p>让我们实现循环神经网络编码器。 注意，我们使用了嵌入层（embedding layer） 来获得输入序列中每个词元的特征向量。 嵌入层的权重是一个矩阵， 其行数等于输入词表的大小（vocab_size）， 其列数等于特征向量的维度（embed_size）。 对于任意输入词元的索引 i ， 嵌入层获取权重矩阵的第 i 行（从0开始）以返回其特征向量。 另外，本文选择了一个多层门控循环单元来实现编码器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Seq2SeqEncoder</span>(d2l.Encoder):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用于序列到序列学习的循环神经网络编码器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vocab_size, embed_size, num_hiddens, num_layers,</span></span><br><span class="line"><span class="params">                 dropout=<span class="number">0</span>, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(Seq2SeqEncoder, <span class="variable language_">self</span>).__init__(**kwargs)</span><br><span class="line">        <span class="comment"># 嵌入层</span></span><br><span class="line">        <span class="variable language_">self</span>.embedding = nn.Embedding(vocab_size, embed_size)</span><br><span class="line">        <span class="variable language_">self</span>.rnn = nn.GRU(embed_size, num_hiddens, num_layers,</span><br><span class="line">                          dropout=dropout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X, *args</span>):</span><br><span class="line">        <span class="comment"># 输出&#x27;X&#x27;的形状：(batch_size,num_steps,embed_size)</span></span><br><span class="line">        X = <span class="variable language_">self</span>.embedding(X)</span><br><span class="line">        <span class="comment"># 在循环神经网络模型中，第一个轴对应于时间步</span></span><br><span class="line">        X = X.permute(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 如果未提及状态，则默认为0</span></span><br><span class="line">        output, state = <span class="variable language_">self</span>.rnn(X)</span><br><span class="line">        <span class="comment"># output的形状:(num_steps,batch_size,num_hiddens)</span></span><br><span class="line">        <span class="comment"># state的形状:(num_layers,batch_size,num_hiddens)</span></span><br><span class="line">        <span class="keyword">return</span> output, state</span><br></pre></td></tr></table></figure><p>下面，我们实例化上述编码器的实现： 我们使用一个两层门控循环单元编码器，其隐藏单元数为16。 给定一小批量的输入序列X（批量大小为4，时间步为7）。 在完成所有时间步后， 最后一层的隐状态的输出是一个张量（output由编码器的循环层返回）， 其形状为（时间步数，批量大小，隐藏单元数）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">encoder = Seq2SeqEncoder(vocab_size=<span class="number">10</span>, embed_size=<span class="number">8</span>, num_hiddens=<span class="number">16</span>,</span><br><span class="line">                         num_layers=<span class="number">2</span>)</span><br><span class="line">encoder.<span class="built_in">eval</span>()</span><br><span class="line">X = torch.zeros((<span class="number">4</span>, <span class="number">7</span>), dtype=torch.long)</span><br><span class="line">output, state = encoder(X)</span><br><span class="line">output.shape</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>torch.Size([7, 4, 16])</code></p><p>由于这里使用的是门控循环单元， 所以在最后一个时间步的多层隐状态的形状是 （隐藏层的数量，批量大小，隐藏单元的数量）。 如果使用长短期记忆网络，state中还将包含记忆单元信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">state.shape</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>torch.Size([2, 4, 16])</code></p><p>当实现解码器时， 我们直接使用编码器最后一个时间步的隐状态来初始化解码器的隐状态。 这就要求使用循环神经网络实现的编码器和解码器具有相同数量的层和隐藏单元。 为了进一步包含经过编码的输入序列的信息， 上下文变量在所有的时间步与解码器的输入进行拼接（concatenate）。 为了预测输出词元的概率分布， 在循环神经网络解码器的最后一层使用全连接层来变换隐状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Seq2SeqDecoder</span>(d2l.Decoder):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用于序列到序列学习的循环神经网络解码器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vocab_size, embed_size, num_hiddens, num_layers,</span></span><br><span class="line"><span class="params">                 dropout=<span class="number">0</span>, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(Seq2SeqDecoder, <span class="variable language_">self</span>).__init__(**kwargs)</span><br><span class="line">        <span class="variable language_">self</span>.embedding = nn.Embedding(vocab_size, embed_size)</span><br><span class="line">        <span class="variable language_">self</span>.rnn = nn.GRU(embed_size + num_hiddens, num_hiddens, num_layers,</span><br><span class="line">                          dropout=dropout)</span><br><span class="line">        <span class="variable language_">self</span>.dense = nn.Linear(num_hiddens, vocab_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_state</span>(<span class="params">self, enc_outputs, *args</span>):</span><br><span class="line">        <span class="keyword">return</span> enc_outputs[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X, state</span>):</span><br><span class="line">        <span class="comment"># 输出&#x27;X&#x27;的形状：(batch_size,num_steps,embed_size)</span></span><br><span class="line">        X = <span class="variable language_">self</span>.embedding(X).permute(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 广播context，使其具有与X相同的num_steps</span></span><br><span class="line">        context = state[-<span class="number">1</span>].repeat(X.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        X_and_context = torch.cat((X, context), <span class="number">2</span>)</span><br><span class="line">        output, state = <span class="variable language_">self</span>.rnn(X_and_context, state)</span><br><span class="line">        output = <span class="variable language_">self</span>.dense(output).permute(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># output的形状:(batch_size,num_steps,vocab_size)</span></span><br><span class="line">        <span class="comment"># state的形状:(num_layers,batch_size,num_hiddens)</span></span><br><span class="line">        <span class="keyword">return</span> output, state</span><br></pre></td></tr></table></figure><p>下面，我们用与前面提到的编码器中相同的超参数来实例化解码器。 如我们所见，解码器的输出形状变为（批量大小，时间步数，词表大小）， 其中张量的最后一个维度存储预测的词元分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">decoder = Seq2SeqDecoder(vocab_size=<span class="number">10</span>, embed_size=<span class="number">8</span>, num_hiddens=<span class="number">16</span>,</span><br><span class="line">                         num_layers=<span class="number">2</span>)</span><br><span class="line">decoder.<span class="built_in">eval</span>()</span><br><span class="line">state = decoder.init_state(encoder(X))</span><br><span class="line">output, state = decoder(X, state)</span><br><span class="line">output.shape, state.shape</span><br></pre></td></tr></table></figure><p><code>(torch.Size([4, 7, 10]), torch.Size([2, 4, 16]))</code></p><p>上述循环神经网络“编码器－解码器”模型中的各层如:</p><br><div align="center">    <style>.agqscssmybqz{}</style><img src="/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/01.png" class="agqscssmybqz"></div><br><p>在每个时间步，解码器预测了输出词元的概率分布。 类似于语言模型，可以使用softmax来获得分布， 并通过计算交叉熵损失函数来进行优化。<br>特定的填充词元被添加到序列的末尾， 因此不同长度的序列可以以相同形状的小批量加载。 但是，我们应该将填充词元的预测排除在损失函数的计算之外。<br>为此，我们可以使用下面的sequence_mask函数 通过零值化屏蔽不相关的项， 以便后面任何不相关预测的计算都是与零的乘积，结果都等于零。 例如，如果两个序列的有效长度（不包括填充词元）分别为1和2， 则第一个序列的第一项和第二个序列的前两项之后的剩余项将被清除为零。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sequence_mask</span>(<span class="params">X, valid_len, value=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在序列中屏蔽不相关的项&quot;&quot;&quot;</span></span><br><span class="line">    maxlen = X.size(<span class="number">1</span>)</span><br><span class="line">    mask = torch.arange((maxlen), dtype=torch.float32,</span><br><span class="line">                        device=X.device)[<span class="literal">None</span>, :] &lt; valid_len[:, <span class="literal">None</span>]</span><br><span class="line">    X[~mask] = value</span><br><span class="line">    <span class="keyword">return</span> X</span><br><span class="line"></span><br><span class="line">X = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">sequence_mask(X, torch.tensor([<span class="number">1</span>, <span class="number">2</span>]))</span><br></pre></td></tr></table></figure><p><code>tensor([[1, 0, 0],         [4, 5, 0]])</code></p><p>我们还可以使用此函数屏蔽最后几个轴上的所有项。如果愿意，也可以使用指定的非零值来替换这些项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = torch.ones(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">sequence_mask(X, torch.tensor([<span class="number">1</span>, <span class="number">2</span>]), value=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>&#96;<br>tensor([[[ 1.,  1.,  1.,  1.],<br>         [-1., -1., -1., -1.],<br>         [-1., -1., -1., -1.]],</p><pre><code>    [[ 1.,  1.,  1.,  1.],     [ 1.,  1.,  1.,  1.],     [-1., -1., -1., -1.]]])</code></pre><p>&#96;</p><p>现在，我们可以通过扩展softmax交叉熵损失函数来遮蔽不相关的预测。 最初，所有预测词元的掩码都设置为1。 一旦给定了有效长度，与填充词元对应的掩码将被设置为0。 最后，将所有词元的损失乘以掩码，以过滤掉损失中填充词元产生的不相关预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaskedSoftmaxCELoss</span>(nn.CrossEntropyLoss):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;带遮蔽的softmax交叉熵损失函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># pred的形状：(batch_size,num_steps,vocab_size)</span></span><br><span class="line">    <span class="comment"># label的形状：(batch_size,num_steps)</span></span><br><span class="line">    <span class="comment"># valid_len的形状：(batch_size,)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, pred, label, valid_len</span>):</span><br><span class="line">        weights = torch.ones_like(label)</span><br><span class="line">        weights = sequence_mask(weights, valid_len)</span><br><span class="line">        <span class="variable language_">self</span>.reduction=<span class="string">&#x27;none&#x27;</span></span><br><span class="line">        unweighted_loss = <span class="built_in">super</span>(MaskedSoftmaxCELoss, <span class="variable language_">self</span>).forward(</span><br><span class="line">            pred.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>), label)</span><br><span class="line">        weighted_loss = (unweighted_loss * weights).mean(dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> weighted_loss</span><br></pre></td></tr></table></figure><p>我们可以创建三个相同的序列来进行代码健全性检查， 然后分别指定这些序列的有效长度为4、2和0。 结果就是，第一个序列的损失应为第二个序列的两倍，而第三个序列的损失应为零。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loss = MaskedSoftmaxCELoss()</span><br><span class="line">loss(torch.ones(<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>), torch.ones((<span class="number">3</span>, <span class="number">4</span>), dtype=torch.long),</span><br><span class="line">     torch.tensor([<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p><code>tensor([2.3026, 1.1513, 0.0000])</code></p><p>在下面的循环训练过程中，特定的序列开始词元（“<bos>”）和 原始的输出序列（不包括序列结束词元“<eos>”） 拼接在一起作为解码器的输入。 这被称为强制教学（teacher forcing）， 因为原始的输出序列（词元的标签）被送入解码器。 或者，将来自上一个时间步的预测得到的词元作为解码器的当前输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train_seq2seq</span>(<span class="params">net, data_iter, lr, num_epochs, tgt_vocab, device</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;训练序列到序列模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">xavier_init_weights</span>(<span class="params">m</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">            nn.init.xavier_uniform_(m.weight)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.GRU:</span><br><span class="line">            <span class="keyword">for</span> param <span class="keyword">in</span> m._flat_weights_names:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;weight&quot;</span> <span class="keyword">in</span> param:</span><br><span class="line">                    nn.init.xavier_uniform_(m._parameters[param])</span><br><span class="line"></span><br><span class="line">    net.apply(xavier_init_weights)</span><br><span class="line">    net.to(device)</span><br><span class="line">    optimizer = torch.optim.Adam(net.parameters(), lr=lr)</span><br><span class="line">    loss = MaskedSoftmaxCELoss()</span><br><span class="line">    net.train()</span><br><span class="line">    animator = d2l.Animator(xlabel=<span class="string">&#x27;epoch&#x27;</span>, ylabel=<span class="string">&#x27;loss&#x27;</span>,</span><br><span class="line">                     xlim=[<span class="number">10</span>, num_epochs])</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        timer = d2l.Timer()</span><br><span class="line">        metric = d2l.Accumulator(<span class="number">2</span>)  <span class="comment"># 训练损失总和，词元数量</span></span><br><span class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> data_iter:</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            X, X_valid_len, Y, Y_valid_len = [x.to(device) <span class="keyword">for</span> x <span class="keyword">in</span> batch]</span><br><span class="line">            bos = torch.tensor([tgt_vocab[<span class="string">&#x27;&lt;bos&gt;&#x27;</span>]] * Y.shape[<span class="number">0</span>],</span><br><span class="line">                          device=device).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            dec_input = torch.cat([bos, Y[:, :-<span class="number">1</span>]], <span class="number">1</span>)  <span class="comment"># 强制教学</span></span><br><span class="line">            Y_hat, _ = net(X, dec_input, X_valid_len)</span><br><span class="line">            l = loss(Y_hat, Y, Y_valid_len)</span><br><span class="line">            l.<span class="built_in">sum</span>().backward()      <span class="comment"># 损失函数的标量进行“反向传播”</span></span><br><span class="line">            d2l.grad_clipping(net, <span class="number">1</span>)</span><br><span class="line">            num_tokens = Y_valid_len.<span class="built_in">sum</span>()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                metric.add(l.<span class="built_in">sum</span>(), num_tokens)</span><br><span class="line">        <span class="keyword">if</span> (epoch + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            animator.add(epoch + <span class="number">1</span>, (metric[<span class="number">0</span>] / metric[<span class="number">1</span>],))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;loss <span class="subst">&#123;metric[<span class="number">0</span>] / metric[<span class="number">1</span>]:<span class="number">.3</span>f&#125;</span>, <span class="subst">&#123;metric[<span class="number">1</span>] / timer.stop():<span class="number">.1</span>f&#125;</span> &#x27;</span></span><br><span class="line">        <span class="string">f&#x27;tokens/sec on <span class="subst">&#123;<span class="built_in">str</span>(device)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>现在，在机器翻译数据集上，我们可以 创建和训练一个循环神经网络“编码器－解码器”模型用于序列到序列的学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">embed_size, num_hiddens, num_layers, dropout = <span class="number">32</span>, <span class="number">32</span>, <span class="number">2</span>, <span class="number">0.1</span></span><br><span class="line">batch_size, num_steps = <span class="number">64</span>, <span class="number">10</span></span><br><span class="line">lr, num_epochs, device = <span class="number">0.005</span>, <span class="number">300</span>, d2l.try_gpu()</span><br><span class="line"></span><br><span class="line">train_iter, src_vocab, tgt_vocab = d2l.load_data_nmt(batch_size, num_steps)</span><br><span class="line">encoder = Seq2SeqEncoder(<span class="built_in">len</span>(src_vocab), embed_size, num_hiddens, num_layers,</span><br><span class="line">                        dropout)</span><br><span class="line">decoder = Seq2SeqDecoder(<span class="built_in">len</span>(tgt_vocab), embed_size, num_hiddens, num_layers,</span><br><span class="line">                        dropout)</span><br><span class="line">net = d2l.EncoderDecoder(encoder, decoder)</span><br><span class="line">train_seq2seq(net, train_iter, lr, num_epochs, tgt_vocab, device)</span><br></pre></td></tr></table></figure><p>为了采用一个接着一个词元的方式预测输出序列， 每个解码器当前时间步的输入都将来自于前一时间步的预测词元。 与训练类似，序列开始词元（“<bos>”） 在初始时间步被输入到解码器中。 该预测过程如 图所示， 当输出序列的预测遇到序列结束词元（“<eos>”）时，预测就结束了。</p><br><div align="center">    <style>.lwflaslrqhil{}</style><img src="/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/02.png" class="lwflaslrqhil"></div><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict_seq2seq</span>(<span class="params">net, src_sentence, src_vocab, tgt_vocab, num_steps,</span></span><br><span class="line"><span class="params">                    device, save_attention_weights=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;序列到序列模型的预测&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 在预测时将net设置为评估模式</span></span><br><span class="line">    net.<span class="built_in">eval</span>()</span><br><span class="line">    src_tokens = src_vocab[src_sentence.lower().split(<span class="string">&#x27; &#x27;</span>)] + [</span><br><span class="line">        src_vocab[<span class="string">&#x27;&lt;eos&gt;&#x27;</span>]]</span><br><span class="line">    enc_valid_len = torch.tensor([<span class="built_in">len</span>(src_tokens)], device=device)</span><br><span class="line">    src_tokens = d2l.truncate_pad(src_tokens, num_steps, src_vocab[<span class="string">&#x27;&lt;pad&gt;&#x27;</span>])</span><br><span class="line">    <span class="comment"># 添加批量轴</span></span><br><span class="line">    enc_X = torch.unsqueeze(</span><br><span class="line">        torch.tensor(src_tokens, dtype=torch.long, device=device), dim=<span class="number">0</span>)</span><br><span class="line">    enc_outputs = net.encoder(enc_X, enc_valid_len)</span><br><span class="line">    dec_state = net.decoder.init_state(enc_outputs, enc_valid_len)</span><br><span class="line">    <span class="comment"># 添加批量轴</span></span><br><span class="line">    dec_X = torch.unsqueeze(torch.tensor(</span><br><span class="line">        [tgt_vocab[<span class="string">&#x27;&lt;bos&gt;&#x27;</span>]], dtype=torch.long, device=device), dim=<span class="number">0</span>)</span><br><span class="line">    output_seq, attention_weight_seq = [], []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_steps):</span><br><span class="line">        Y, dec_state = net.decoder(dec_X, dec_state)</span><br><span class="line">        <span class="comment"># 我们使用具有预测最高可能性的词元，作为解码器在下一时间步的输入</span></span><br><span class="line">        dec_X = Y.argmax(dim=<span class="number">2</span>)</span><br><span class="line">        pred = dec_X.squeeze(dim=<span class="number">0</span>).<span class="built_in">type</span>(torch.int32).item()</span><br><span class="line">        <span class="comment"># 保存注意力权重（稍后讨论）</span></span><br><span class="line">        <span class="keyword">if</span> save_attention_weights:</span><br><span class="line">            attention_weight_seq.append(net.decoder.attention_weights)</span><br><span class="line">        <span class="comment"># 一旦序列结束词元被预测，输出序列的生成就完成了</span></span><br><span class="line">        <span class="keyword">if</span> pred == tgt_vocab[<span class="string">&#x27;&lt;eos&gt;&#x27;</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        output_seq.append(pred)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(tgt_vocab.to_tokens(output_seq)), attention_weight_seq</span><br></pre></td></tr></table></figure><p>BLUE的计算代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bleu</span>(<span class="params">pred_seq, label_seq, k</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算BLEU&quot;&quot;&quot;</span></span><br><span class="line">    pred_tokens, label_tokens = pred_seq.split(<span class="string">&#x27; &#x27;</span>), label_seq.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    len_pred, len_label = <span class="built_in">len</span>(pred_tokens), <span class="built_in">len</span>(label_tokens)</span><br><span class="line">    score = math.exp(<span class="built_in">min</span>(<span class="number">0</span>, <span class="number">1</span> - len_label / len_pred))</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">        num_matches, label_subs = <span class="number">0</span>, collections.defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_label - n + <span class="number">1</span>):</span><br><span class="line">            label_subs[<span class="string">&#x27; &#x27;</span>.join(label_tokens[i: i + n])] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_pred - n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> label_subs[<span class="string">&#x27; &#x27;</span>.join(pred_tokens[i: i + n])] &gt; <span class="number">0</span>:</span><br><span class="line">                num_matches += <span class="number">1</span></span><br><span class="line">                label_subs[<span class="string">&#x27; &#x27;</span>.join(pred_tokens[i: i + n])] -= <span class="number">1</span></span><br><span class="line">        score *= math.<span class="built_in">pow</span>(num_matches / (len_pred - n + <span class="number">1</span>), math.<span class="built_in">pow</span>(<span class="number">0.5</span>, n))</span><br><span class="line">    <span class="keyword">return</span> score</span><br></pre></td></tr></table></figure><p>最后，利用训练好的循环神经网络“编码器－解码器”模型， 将几个英语句子翻译成法语，并计算BLEU的最终结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">engs = [<span class="string">&#x27;go .&#x27;</span>, <span class="string">&quot;i lost .&quot;</span>, <span class="string">&#x27;he\&#x27;s calm .&#x27;</span>, <span class="string">&#x27;i\&#x27;m home .&#x27;</span>]</span><br><span class="line">fras = [<span class="string">&#x27;va !&#x27;</span>, <span class="string">&#x27;j\&#x27;ai perdu .&#x27;</span>, <span class="string">&#x27;il est calme .&#x27;</span>, <span class="string">&#x27;je suis chez moi .&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> eng, fra <span class="keyword">in</span> <span class="built_in">zip</span>(engs, fras):</span><br><span class="line">    translation, attention_weight_seq = predict_seq2seq(</span><br><span class="line">        net, eng, src_vocab, tgt_vocab, num_steps, device)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;eng&#125;</span> =&gt; <span class="subst">&#123;translation&#125;</span>, bleu <span class="subst">&#123;bleu(translation, fra, k=<span class="number">2</span>):<span class="number">.3</span>f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>go . =&gt; va !, bleu 1.000 i lost . =&gt; j&#39;ai perdu ., bleu 1.000 he&#39;s calm . =&gt; il est riche ., bleu 0.658 i&#39;m home . =&gt; je suis en retard ?, bleu 0.447</code></p><h3 id="Seq2Seq-小结"><a href="#Seq2Seq-小结" class="headerlink" title="Seq2Seq 小结"></a>Seq2Seq 小结</h3><ul><li><p>根据“编码器-解码器”架构的设计， 我们可以使用两个循环神经网络来设计一个序列到序列学习的模型。</p></li><li><p>在实现编码器和解码器时，我们可以使用多层循环神经网络。</p></li><li><p>我们可以使用遮蔽来过滤不相关的计算，例如在计算损失时。</p></li><li><p>在“编码器－解码器”训练中，强制教学方法将原始输出序列（而非预测结果）输入解码器。</p></li><li><p>BLEU是一种常用的评估方法，它通过测量预测序列和标签序列之间的n元语法的匹配度来评估预测。</p></li></ul><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>Transformer架构与论文精讲已经在前面的文章中阐述过了。</p><p>基于循环或卷积神经网络的序列到序列建模方法是现存机器翻译任务中的经典方法。然而，它们在建模文本长程依赖方面都存在一定的局限性。</p><ul><li>对于卷积神经网络来说，受限的上下文窗口在建模长文本方面天然地存在不足。如果要对长距离依赖进行描述，需要多层卷积操作，而且不同层之间信息传递也可能有损失，这些都限制了模型的能力。</li><li>而对于循环神经网络来说，上下文的语义依赖是通过维护循环单元中的隐状态实现的。在编码过程中，每一个时间步的输入建模都涉及到对隐藏状态的修改。随着序列长度的增加，编码在隐藏状态中的序列早期的上下文信息被逐渐遗忘。尽管注意力机制的引入在一定程度上缓解了这个问题，但循环网络在编码效率方面仍存在很大的不足之处。由于编码端和解码端的每一个时间步的隐藏状态都依赖于前一时间步的计算结果，这就造成了在训练和推断阶段的低效。</li><li>为了更好地描述文字序列，谷歌的研究人员在 2017 年提出了一种新的模型 Transformer。</li></ul><p>Transformer 在原论文中第一次提出就是将其应用到机器翻译领域，它的出现使得机器翻译的性能和效率迈向了一个新的阶段。它摒弃了循环结构，并完全通过注意力机制完成对源语言序列和目标语言序列全局依赖的建模。在抽取每个单词的上下文特征时，Transformer 通过自注意力机制（self-attention）衡量上下文中每一个单词对当前单词的重要程度。在这个过程当中没有任何的循环单元参与计算。这种高度可并行化的编码过程使得模型的运行变得十分高效。</p><p>Transformer的主要组件包括编码器(Encoder)、解码器(Decoder)和注意力层。其核心是利用多头自注意力机制（Multi-Head Self-Attention），使每个位置的表示不仅依赖于当前位置，还能够直接获取其他位置的表示。自从提出以来，Transformer模型在机器翻译、文本生成等自然语言处理任务中均取得了突破性进展，成为NLP领域新的主流模型。</p><p>从宏观角度来看，Transformer的编码器是由多个相同的层叠加而成的，每个层都有两个子层（子层表示为sublayer）。第⼀个子层是多头自注意力（multi-head self-attention）汇聚；第二个子层是基于位置的前馈网络（positionwise feed-forward network）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置编码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PositionalEncoding</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d_model, dropout=<span class="number">0.1</span>, max_len=<span class="number">5000</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(PositionalEncoding, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.dropout = nn.Dropout(p=dropout)</span><br><span class="line"></span><br><span class="line">        pe = torch.zeros(max_len, d_model)</span><br><span class="line">        position = torch.arange(<span class="number">0</span>, max_len, dtype=torch.<span class="built_in">float</span>).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        div_term = torch.exp(torch.arange(<span class="number">0</span>, d_model, <span class="number">2</span>).<span class="built_in">float</span>() * (-math.log(<span class="number">10000.0</span>) / d_model))</span><br><span class="line">        pe[:, <span class="number">0</span>::<span class="number">2</span>] = torch.sin(position * div_term)</span><br><span class="line">        pe[:, <span class="number">1</span>::<span class="number">2</span>] = torch.cos(position * div_term)</span><br><span class="line">        pe = pe.unsqueeze(<span class="number">0</span>).transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.register_buffer(<span class="string">&#x27;pe&#x27;</span>, pe)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = x + <span class="variable language_">self</span>.pe[:x.size(<span class="number">0</span>), :]</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.dropout(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Transformer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransformerModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, src_vocab, tgt_vocab, d_model, nhead, num_encoder_layers, num_decoder_layers, dim_feedforward, dropout</span>):</span><br><span class="line">        <span class="built_in">super</span>(TransformerModel, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.transformer = nn.Transformer(d_model, nhead, num_encoder_layers, num_decoder_layers, dim_feedforward, dropout)</span><br><span class="line">        <span class="variable language_">self</span>.src_embedding = nn.Embedding(<span class="built_in">len</span>(src_vocab), d_model)</span><br><span class="line">        <span class="variable language_">self</span>.tgt_embedding = nn.Embedding(<span class="built_in">len</span>(tgt_vocab), d_model)</span><br><span class="line">        <span class="variable language_">self</span>.positional_encoding = PositionalEncoding(d_model, dropout)</span><br><span class="line">        <span class="variable language_">self</span>.fc_out = nn.Linear(d_model, <span class="built_in">len</span>(tgt_vocab))</span><br><span class="line">        <span class="variable language_">self</span>.src_vocab = src_vocab</span><br><span class="line">        <span class="variable language_">self</span>.tgt_vocab = tgt_vocab</span><br><span class="line">        <span class="variable language_">self</span>.d_model = d_model</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, src, tgt</span>):</span><br><span class="line">        <span class="comment"># 调整src和tgt的维度</span></span><br><span class="line">        src = src.transpose(<span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># (seq_len, batch_size)</span></span><br><span class="line">        tgt = tgt.transpose(<span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># (seq_len, batch_size)</span></span><br><span class="line"></span><br><span class="line">        src_mask = <span class="variable language_">self</span>.transformer.generate_square_subsequent_mask(src.size(<span class="number">0</span>)).to(src.device)</span><br><span class="line">        tgt_mask = <span class="variable language_">self</span>.transformer.generate_square_subsequent_mask(tgt.size(<span class="number">0</span>)).to(tgt.device)</span><br><span class="line"></span><br><span class="line">        src_padding_mask = (src == <span class="variable language_">self</span>.src_vocab[<span class="string">&#x27;&lt;pad&gt;&#x27;</span>]).transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        tgt_padding_mask = (tgt == <span class="variable language_">self</span>.tgt_vocab[<span class="string">&#x27;&lt;pad&gt;&#x27;</span>]).transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        src_embedded = <span class="variable language_">self</span>.positional_encoding(<span class="variable language_">self</span>.src_embedding(src) * math.sqrt(<span class="variable language_">self</span>.d_model))</span><br><span class="line">        tgt_embedded = <span class="variable language_">self</span>.positional_encoding(<span class="variable language_">self</span>.tgt_embedding(tgt) * math.sqrt(<span class="variable language_">self</span>.d_model))</span><br><span class="line"></span><br><span class="line">        output = <span class="variable language_">self</span>.transformer(src_embedded, tgt_embedded,</span><br><span class="line">                                  src_mask, tgt_mask, <span class="literal">None</span>, src_padding_mask, tgt_padding_mask, src_padding_mask)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.fc_out(output).transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="上分技巧"><a href="#上分技巧" class="headerlink" title="上分技巧"></a>上分技巧</h3><ul><li><p>最简单的就是调参，将 epochs 调大一点，使用全部训练集，以及调整模型的参数，如head、layers等。如果数据量允许，增加模型的深度（更多的编码器&#x2F;解码器层）或宽度（更大的隐藏层尺寸），这通常可以提高模型的表达能力和翻译质量，尤其是在处理复杂或专业内容时。</p></li><li><p>加入术语词典，这是在此竞赛中比较有效的方法，加入术语词典的方法策略也有很多，如：</p><ul><li>在模型生成的翻译输出中替换术语，这是最简单的方法</li><li>整合到数据预处理流程，确保它们在翻译中保持一致</li><li>在模型内部动态地调整术语的嵌入，这涉及到在模型中加入一个额外的层，该层负责查找术语词典中的术语，并为其生成专门的嵌入向量，然后将这些向量与常规的词嵌入结合使用</li></ul></li><li><p>认真做数据清洗</p></li><li><p>数据扩增：</p><ul><li>回译（back-translation）：将源语言文本先翻译成目标语言，再将目标语言文本翻译回源语言，生成的新文本作为额外的训练数据</li><li>同义词替换：随机选择句子中的词，并用其同义词替换</li><li>使用句法分析和语义解析技术重新表述句子，保持原意不变</li><li>将文本翻译成多种语言后再翻译回原语言，以获得多样化翻译</li></ul></li><li><p>采用更精细的学习率调度策略（baseline我们使用的是固定学习率）：</p><ul><li>Noam Scheduler：结合了warmup（预热）阶段和衰减阶段</li><li>Step Decay：最简单的一种学习率衰减策略，每隔一定数量的epoch，学习率按固定比例衰减</li><li>Cosine Annealing：学习率随周期性变化，通常从初始值下降到接近零，然后再逐渐上升</li></ul></li><li><p>集成学习：训练多个不同初始化或架构的模型，并使用集成方法（如投票或平均）来产生最终翻译。这可以减少单一模型的过拟合风险，提高翻译的稳定性。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>机器翻译赛-门控循环单元GRU</title>
      <link href="/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/"/>
      <url>/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/</url>
      
        <content type="html"><![CDATA[<h2 id="GRU-门控循环单元"><a href="#GRU-门控循环单元" class="headerlink" title="GRU 门控循环单元"></a>GRU 门控循环单元</h2><ul><li>早期观测值对预测所有未来观测值具有非常重要的意义。我们希望有某些机制能够在一个记忆元里存储重要的早期信息。 如果没有这样的机制，我们将不得不给这个观测值指定一个非常大的梯度， 因为它会影响所有后续的观测值。</li><li>一些词元没有相关的观测值。我们希望有一些机制来跳过隐状态表示中的此类词元。</li><li>序列的各个部分之间存在逻辑中断。在这种情况下，最好有一种方法来重置我们的内部状态表示。</li></ul><p>在学术界已经提出了许多方法来解决这类问题。 其中最早的方法是“长短期记忆”（long-short-term memory，LSTM） (Hochreiter and Schmidhuber, 1997)，<br>门控循环单元（gated recurrent unit，GRU） (Cho et al., 2014) 是一个稍微简化的变体，通常能够提供同等的效果， 并且计算 (Chung et al., 2014)的速度明显更快。 由于门控循环单元更简单，我们从它开始解读。</p><p>门控循环单元与普通的循环神经网络之间的关键区别在于： 前者支持隐状态的门控。 这意味着模型有专门的机制来确定应该何时更新隐状态， 以及应该何时重置隐状态。 这些机制是可学习的，并且能够解决了上面列出的问题。 例如，如果第一个词元非常重要， 模型将学会在第一次观测之后不更新隐状态。 同样，模型也可以学会跳过不相关的临时观测。 最后，模型还将学会在需要的时候重置隐状态。 下面我们将详细讨论各类门控。</p><p>我们首先介绍重置门（reset gate）和更新门（update gate）。 我们把它们设计成（0，1）区间中的向量， 这样我们就可以进行凸组合。 重置门允许我们控制“可能还想记住”的过去状态的数量； 更新门将允许我们控制新状态中有多少个是旧状态的副本。</p><p>我们从构造这些门控开始。 图9.1.1 描述了门控循环单元中的重置门和更新门的输入， 输入是由当前时间步的输入和前一时间步的隐状态给出。 两个门的输出是由使用sigmoid激活函数的两个全连接层给出。</p><br><div align="center">    <style>.kggznqnnyfgp{}</style><img src="/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/01.png" class="kggznqnnyfgp"></div><br><br><div align="center">    <style>.sfhghmuqdcjb{}</style><img src="/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/02.png" class="sfhghmuqdcjb"></div><br><br><div align="center">    <style>.aplgpoyfvciy{}</style><img src="/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/03.png" class="aplgpoyfvciy"></div><br><p>总之，门控循环单元具有以下两个显著特征：</p><ul><li><p>重置门有助于捕获序列中的短期依赖关系；</p></li><li><p>更新门有助于捕获序列中的长期依赖关系。</p></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>门控循环神经网络可以更好地捕获时间步距离很长的序列上的依赖关系。</p></li><li><p>重置门有助于捕获序列中的短期依赖关系。</p></li><li><p>更新门有助于捕获序列中的长期依赖关系。</p></li><li><p>重置门打开时，门控循环单元包含基本循环神经网络；更新门打开时，门控循环单元可以跳过子序列。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于术语词典干预的机器翻译挑战赛</title>
      <link href="/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="赛事背景"><a href="#赛事背景" class="headerlink" title="赛事背景"></a>赛事背景</h2><p>赛事背景<br>目前神经机器翻译技术已经取得了很大的突破，但在特定领域或行业中，由于机器翻译难以保证术语的一致性，导致翻译效果还不够理想。对于术语名词、人名地名等机器翻译不准确的结果，可以通过术语词典进行纠正，避免了混淆或歧义，最大限度提高翻译质量。</p><p>赛事任务<br>基于术语词典干预的机器翻译挑战赛选择以英文为源语言，中文为目标语言的机器翻译。本次大赛除英文到中文的双语数据，还提供英中对照的术语词典。参赛队伍需要基于提供的训练数据样本从多语言机器翻译模型的构建与训练，并基于测试集以及术语词典，提供最终的翻译结果。</p><p>赛题数据</p><ul><li>训练集：双语数据 - 中英14万余双语句对</li><li>开发集：英中1000双语句对</li><li>测试集：英中1000双语句对</li><li>术语词典：英中2226条</li></ul><p>简单说明</p><ul><li>训练集（training set）用于运行你的学习算法。</li><li>开发集（development set）用于调整参数，选择特征，以及对学习算法作出其它决定。有时也称为留出交叉验证集（hold-out cross validation set）。</li><li>测试集（test set）用于评估算法的性能，但不会据此改变学习算法或参数。</li></ul><p>评估指标<br>对于参赛队伍提交的测试集翻译结果文件，采用自动评价指标 BLEU-4 进行评价，具体工具使用 sacrebleu开源版本。</p><h3 id="什么是-BLEU-4-？"><a href="#什么是-BLEU-4-？" class="headerlink" title="什么是 BLEU-4  ？"></a>什么是 BLEU-4  ？</h3><p> BLEU，全称为Bilingual Evaluation Understudy（双语评估替换），是一种对生成语句进行评估的指标。BLEU 评分是由Kishore Papineni等人2002年的论文《BLEU: a Method for Automatic Evaluation of Machine Translation》中提出的。</p><p>在机器翻译领域，BLEU（Bilingual Evaluation Understudy）是一种常用的自动评价指标，用于衡量计算机生成的翻译与一组参考译文之间的相似度。这个指标特别关注 n-grams（连续的n个词）的精确匹配，可以被认为是对翻译准确性和流利度的一种统计估计。计算BLEU分数时，首先会统计生成文本中n-grams的频率，然后将这些频率与参考文本中的n-grams进行比较。如果生成的翻译中包含的n-grams与参考译文中出现的相同，则认为是匹配的。最终的BLEU分数是一个介于0到1之间的数值，其中1表示与参考译文完美匹配，而0则表示完全没有匹配。</p><p>BLEU-4 特别指的是在计算时考虑四元组（即连续四个词）的匹配情况。</p><h2 id="基于-Seq2Seq-的-Baseline-详解"><a href="#基于-Seq2Seq-的-Baseline-详解" class="headerlink" title="基于 Seq2Seq 的 Baseline 详解"></a>基于 Seq2Seq 的 Baseline 详解</h2><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!pip install torchtext    </span><br><span class="line">!pip install jieba</span><br><span class="line">!pip install sacrebleu </span><br></pre></td></tr></table></figure><p>有几个包需要额外安装：</p><ul><li>torchtext ：是一个用于自然语言处理（NLP）任务的库，它提供了丰富的功能，包括数据预处理、词汇构建、序列化和批处理等，特别适合于文本分类、情感分析、机器翻译等任务</li><li>jieba：是一个中文分词库，用于将中文文本切分成有意义的词语</li><li>sacrebleu：用于评估机器翻译质量的工具，主要通过计算BLEU（Bilingual Evaluation Understudy）得分来衡量生成文本与参考译文之间的相似度</li></ul><p>这里，我们需要安装 spacy 用于英文的 tokenizer（分词，就是将句子、段落、文章这种长文本，分解为以字词为单位的数据结构，方便后续的处理分析工作）</p><ul><li>spacy：是一个强大的自然语言处理库，支持70+语言的分词与训练</li></ul><div align="center">    <style>.ayycngmoralc{}</style><img src="/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/spacy.png" class="ayycngmoralc"></div><p>需要注意的是，使用命令!python -m spacy download en_core_web_trf安装 en_core_web_sm 语言包非常的慢，经常会安装失败,因此可以离线安装 en_core_web_sm 语言包，从该路径下：<a href="https://github.com/explosion/spacy-models/releases">https://github.com/explosion/spacy-models/releases</a> 安装对应版本的 en_core_web_trf 语言包，可以看到我的 en_core_web_trf 3.7.3 版本的要求 spaCy &gt;&#x3D;3.7.2,&lt;3.8.0，刚好满足我的 3.7.5的 spacy!：</p><div align="center">    <style>.ubszdlxtnfrg{}</style><img src="/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/encore.png" class="ubszdlxtnfrg"></div><p>将下载到本地的压缩包上传到你的魔搭平台上的  dataset 目录下，然后使用 !pip install ..&#x2F;dataset&#x2F;en_core_web_trf安装英文语言包：</p><div align="center">    <style>.qvwpnepxfrvg{}</style><img src="/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/model.png" class="qvwpnepxfrvg"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!pip install -U pip setuptools wheel -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install -U <span class="string">&#x27;spacy[cuda12x,transformers,lookups]&#x27;</span> -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">!pip install ../dataset/en_core_web_trf-<span class="number">3.7</span><span class="number">.3</span>-py3-none-<span class="built_in">any</span>.whl</span><br></pre></td></tr></table></figure><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><p>机器翻译任务的预处理是确保模型能够有效学习源语言到目标语言映射的关键步骤。预处理阶段通常包括多个步骤，旨在清理、标准化和转换数据，使之适合模型训练。以下是机器翻译任务预处理中常见的几个处理步骤：</p><ul><li><p>清洗和规范化数据</p><ul><li>去除无关信息：删除HTML标签、特殊字符、非文本内容等，确保文本的纯净性（本赛题的训练集中出现了非常多的脏数据，如“Joey.        （掌声） （掌声） 乔伊”、“Thank you.        （马嘶声） 谢谢你们”等这种声音词）</li><li>统一格式：转换所有文本为小写，确保一致性；标准化日期、数字等格式。</li><li>分句和分段：将长文本分割成句子或段落，便于处理和训练。</li></ul></li><li><p>分词</p><ul><li>分词：将句子分解成单词或词素（构成单词的基本组成部分，一个词素可以是一个完整的单词，也可以是单词的一部分，但每一个词素都至少携带一部分语义或语法信息），这是NLP中最基本的步骤之一。我们这里使用了使用jieba 对中文进行分词，使用spaCy对英文进行分词。</li></ul></li><li><p>构建词汇表和词向量</p><ul><li>词汇表构建：从训练数据中收集所有出现过的词汇，构建词汇表，并为每个词分配一个唯一的索引。</li><li>词向量：使用预训练的词向量或自己训练词向量，将词汇表中的词映射到高维空间中的向量，以捕捉语义信息（当前大模型领域训练的 embedding 模型就是用来完成此任务的）。</li></ul></li><li><p>序列截断和填充</p><ul><li>序列截断：限制输入序列的长度，过长的序列可能增加计算成本，同时也可能包含冗余信息。</li><li>序列填充：将所有序列填充至相同的长度，便于批量处理。通常使用<PAD>标记填充。</li></ul></li><li><p>添加特殊标记</p><ul><li>序列开始和结束标记：在序列两端添加<SOS>（Sequence Start）和<EOS>（Sequence End）标记，帮助模型识别序列的起始和结束。</li><li>未知词标记：为不在词汇表中的词添加<UNK>（Unknown）标记，使模型能够处理未见过的词汇。</li></ul></li><li><p>数据增强</p><ul><li>随机替换或删除词：在训练数据中随机替换或删除一些词，增强模型的鲁棒性。</li><li>同义词替换：使用同义词替换原文中的词，增加训练数据的多样性。</li></ul></li><li><p>数据分割</p><ul><li>划分数据集：将数据划分为训练集、验证集和测试集，分别用于模型训练、参数调整和最终性能评估（该赛题中已划分好，不需要自己进行划分）</li></ul></li></ul><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>说到神经机器翻译就不得不提编码器-解码器模型，或编码器-解码器框架（EncoderDecoder Paradigm）。本质上，编码器­解码器模型是描述输入­输出之间关系的一种方式。编码器­解码器这个概念在日常生活中并不少见。</p><div align="center">    <style>.hobsrssvqsbg{}</style><img src="/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/e-d.png" class="hobsrssvqsbg"></div><p><code>给定一个中文句子“我/对/你/感到/满意”，编码器会将这句话编码成一个实数向量(0.2, −1, 6, 5, 0.7, −2)，这个向量就是源语言句子的“表示”结果。虽然有些不可思议，但是神经机器翻译模型把这个向量等同于输入序列。向量中的数字并没有实际的意义，然而解码器却能从中提取到源语言句子中所包含的信息。也有研究人员把向量的每一个维度看作是一个“特征”，这样源语言句子就被表示成多个“特征”的联合，而且这些特征可以被自动学习。有了这样的源语言句子的“表示”，解码器可以把这个实数向量作为输入，然后逐词生成目标语言句子“I am satisfied with you”。</code></p><p>在源语言句子的表示形式确定之后，需要设计相应的编码器和解码器结构。在当今主流的神经机器翻译系统中，编码器由词嵌入层和中间网络层组成：</p><ul><li>当输入一串单词序列时，词嵌入层(embedding)会将每个单词映射到多维实数表示空间，这个过程也被称为词嵌入。</li><li>之后中间层会对词嵌入向量进行更深层的抽象，得到输入单词序列的中间表示。中间层的实现方式有很多，比如：循环神经网络、卷积神经网络、自注意力机制等都是模型常用的结构。</li></ul><p>解码器的结构基本上和编码器是一致的，在基于循环神经网络的翻译模型中，解码器只比编码器多了输出层，用于输出每个目标语言位置的单词生成概率，而在基于自注意力机制的翻译模型中，除了输出层，解码器还比编码器多一个编码­解码注意力子层，用于帮助模型更好地利用源语言信息。</p><p>通过循环网络对源语言文本进行编码，并生成目标语言翻译结果的过程十分简单。然而，它仅仅使用一个定长的向量 $$h_{m}$$ 编码整个源语言序列。这对于较短的源语言文本没有什么问题，但随着文本序列长度的逐渐加长，单一的一个向量 hm 可能不足以承载源语言序列当中的所有信息。</p><div align="center">    <style>.bbjydlxgcfey{}</style><img src="/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/RNN_BLUE.png" class="bbjydlxgcfey"></div><p>蓝色的线代表上述简单循环神经网络性能随源语言文本长度的变化趋势。当文本长度在 20 个单词以内时，单一向量能够承载源语言文本中的必要信息。随着文本序列的进一步增加，翻译性能的评价指标 BLEU 的值就开始出现明显地下降。因此，这就启发我们使用更加有效地机制从编码器向解码器传递源语言信息，这就是接下来要讲到的注意力机制。</p><p>引入注意力机制的循环机器翻译架构与基于简单循环网络的机器翻译模型大体结构相似，均采用循环神经网络作为编码器与解码器的实现。关键的不同点在于注意力机制的引入使得不再需要把原始文本中的所有必要信息压缩到一个向量当中。引入注意力机制的循环神经网络机器翻译架构如图所示:</p><p>1.无注意力机制：<br><br></p><div align="center">    <style>.roettmgchqdy{}</style><img src="/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/no_attention.png" class="roettmgchqdy"></div><br>2.引入注意力机制：<br><div align="center">    <style>.kyjrqxilnecq{}</style><img src="/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/attention.png" class="kyjrqxilnecq"></div><br><p>传统的 Seq2Seq 模型在解码阶段仅依赖于编码器产生的最后一个隐藏状态，这在处理长序列时效果不佳。注意力机制允许解码器在生成每个输出词时，关注编码器产生的所有中间状态，从而更好地利用源序列的信息。具体来说，给定源语言序列经过编码器输出的向量序列 $$h_{1},h_{2},h_{3},…,h_{m}$$，注意力机制旨在依据解码端翻译的需要，自适应地从这个向量序列中查找对应的信息。</p><p><em>baseline 代码中实现了一个经典的序列到序列(Seq2Seq)模型，中间层使用的GRU网络，并且网络中加入了注意力机制(Attention Mechanism)</em></p><ul><li>GRU 知识讲解：<a href="https://zh.d2l.ai/chapter_recurrent-modern/gru.html">https://zh.d2l.ai/chapter_recurrent-modern/gru.html</a></li></ul><h3 id="翻译质量评价"><a href="#翻译质量评价" class="headerlink" title="翻译质量评价"></a>翻译质量评价</h3><p>本世纪初研究人员提出了译文质量自动评价方法 BLEU（Bilingual Evaluation Understudy）。该方法使得机器翻译系统的评价变得自动、快速、便捷，而且评价过程可以重复。正是由于 BLEU 等自动评价方法的提出，机器翻译研究人员可以在更短的时间内得到译文质量的评价结果，加速系统研发的进程。</p><p>P.S.文中涉及到的GRU门控循环单元，与改进的基于Transformer的解决方案，都会放在本系列的其他文章中单独讲解。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端编程语言</title>
      <link href="/2024/08/17/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
      <url>/2024/08/17/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="编程语言、ES标准、JS引擎和运行时"><a href="#编程语言、ES标准、JS引擎和运行时" class="headerlink" title="编程语言、ES标准、JS引擎和运行时"></a>编程语言、ES标准、JS引擎和运行时</h2><p>JavaScript是前端使用频率最高的编程语言，用它配合HTML和CSS足以构建出一个完整的Web应用</p><p>但是在现代前端，除了JS还会涉及到许多别的编程语言，它们各有所长<br><br></p><div align="center">    <style>.hlzgmdjmwjsr{}</style><img src="/2024/08/17/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/01.jpg" class="hlzgmdjmwjsr"></div><br><p>我们经常提到ES6，它的全称是ECMAScript 6或是ECMAScript 2015，它是一套文档，规范了脚本语言的设计，包括语法、数据类型、内置对象等等，而JS则是遵循这套规范的编程语言之一，ES规范确保了无论在何处使用JS，它的写法和行为都应该是一致的。</p><p>ES规范每年引入一些新特性，从ES2015的let&#x2F;const、箭头函数，到ES2024的Object.groupBy，已经加入了非常多实用的功能。</p><p>借助于现代前端工具链的转义和polyfills的等效实现，你可以在不支持这些新特性的环境中使用它们。</p><p>TypeScript是JavaScript的超集，正如其名，它的核心特性是类型系统。</p><p>类型系统有许多优势，即便没有写TypeScript，你依然在享受类型系统带来的便利，比如VSCocde提供的类型提示就是基于TypeScript类型的。</p><p>TypeScript最终依然会编译到JavaScript，但在大型前端应用中，TypeScript的类型检查可以使许多常见错误暴露于编译阶段，从而减少运行时错误，极大地提升了代码的健壮性和可维护性，因此，使用TypeScript开发高质量前端应用几乎是必须的。</p><p>近些年Rust在前端发展十分迅猛，它正在占领前端工具链生态，比较典型的案例有：对标Babel的SWC、对标Webpack的Rspack、Farm，Next.js的Turbopack等都是基于Rust语言编写的，这里最根本的原因是前端项目的体量越来越庞大，构建性能已经成为瓶颈，传统的打包优化方案已经无法进一步提升性能，因此需要借助性能更强的编程语言，它就是Rust。</p><p>Rust:兼顾性能、安全和稳定的现代编程语言。与其说Rust占领了前端基建，不如说它是好刀用到了刀刃上。</p><p>WebAssembly简称Wasm，最早用于在浏览器中处理计算密集型任务，而到了现代，它已然成为一套完整的应用运行生态。它通常不由人直接编写，而是系统语言C&#x2F;C++&#x2F;Go和Rust的编译目标之一。</p><p>Wasm Runtime的出现使其能在非浏览器环境中运行，比如我们可以直接在Node.js中运行Wasm。</p><p>WebAssembly System Interface（WASI）API，又为Wasm提供了访问系统功能的能力，比如文件系统和网络等。</p><p>Wasm在Web开发中有着广泛的应用，除了满足重度计算需求外，它还应用于跨平台开发、安全沙箱、容器和虚拟化技术。</p><p>你也许使用过在浏览器中打开的云IDE，它就是Wasm落地应用的集大成者，还有一类编程语言称之为领域特定语言（DSL），它通常是某个现有语言基础上，增加一定约束和扩展，应用于某个特定场景。</p><p>比如我们在微信小程序中编写的WXML、在React中编写的JSX、在Vue中编写的Template等等，它们都统称领域特定语言。领域特定语言并不是通用型语言，但相比通用型语言，它的语法更简单、开发效率更高、专业对口业务、可维护性强。</p><p>你写的代码要运行，自然离不开JS引擎和JS运行时，JS引擎负责代码解析、编译、执行和优化，而JS运行时不仅自带一个JS引擎，还提供了一组环境相关的API，比如服务端的Node.js，是基于V8的运行时，而Bun则是基于JavaScriptCore的运行时，它们提供了不同的API。</p><p>比如同样是打开文件，Node.js是fs.open()，而Bun则是Bun.file()，再比如Chrome浏览器提供了基于V8引擎的运行时，而Safari浏览器提供了基于JavaScriptCore引擎的运行时，它们都提供了Web API，但实现上有着细微差异。这也是客户端代码容易产生兼容性问题的根本原因。</p><p>又比如Next.js提供的边缘运行时，不支持Node.js API;<br>而Cloudflare云服务的边缘环境则支持有限的Node.js API，因此，前端开发者需要分清楚自己的代码会在什么样的运行时中运行，我们已经知道Node.js是最常用的JS运行时，但在企业级的大型Node.js应用中，仅仅用它还是不够的。大型Node.js应用，还会考虑性能监控、安全提醒、故障排除、性能优化等问题，比如阿里云前端基建团队的Node.js性能平台（前身叫alinode），就在Node.js的基础上增加了这些功能，提供了一整套解决方案。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议相关知识</title>
      <link href="/2024/08/12/HTTP%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/08/12/HTTP%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h2><p> 超文本 HyperText<br> HTTP虽然叫传输协议，但它实际上工作在TCP&#x2F;IP协议的应用层，底层的数据传输由TCP或UDP负责。</p><p> HTTP协议发展至今已有多个版本，最常用的是HTTP&#x2F;1.1,HTTP&#x2F;2和HTTP&#x2F;3。</p><ul><li><p>目前HTTP&#x2F;1.1依然被广泛使用。</p></li><li><p>HTTP&#x2F;2引入了多路复用、二进制帧层、头部压缩等特性，提升了不少传输性能。</p></li><li><p>HTTP&#x2F;3基于QUIC协议使用UDP作为传输层，进一步降低了连接延迟和提升了传输性能。</p></li></ul><p> 值得注意的是，HTTPS是HTTP的加密安全版本，它在原始HTTP协议的基础上，加盖了一层SSL&#x2F;TLS来实现加密传输</p><p> HTTPSecure</p><p> 除了HTTP&#x2F;3，TLS在其他版本中并不是强制要求的。</p><p> 可以看到，每一代协议升级，都是围绕性能和安全性展开的。</p><br><div align="center">    <img src="https://s2.loli.net/2024/08/15/GF18p4UoORwEdTJ.jpg"></div><br><p>HTTP协议大体上是一种问答形式，客户端发出请求，服务器处理请求，然后再给出响应。</p><p>服务器会根据不同场景返回不同的响应码。</p><p>2XX表示成功处理，3XX表示重定向，4开头表示客户端错误，5开头表示服务端错误</p><p>在请求和响应报文中，除了请求方法和响应码外，最值得关注的就是请求头和响应头。<br>比如：</p><ul><li><p>用于请求上下文的Host、Referer、User-Agent</p></li><li><p>用于响应上下文的Allow、Server</p></li><li><p>用于缓存的Cache-Control、Last-Modified&#x2F;Last-Modified-Since和ETag&#x2F;If-NoneMatch</p></li><li><p>用于Cookie的Cookie和Set-Cookie</p></li><li><p>用于安全的X-Frame-Options、Strict-Transport-Security(HSTS)、Content-Security-Policy(CSP)</p></li><li><p>用于跨域控制(CORS)的Origin和Access-Control-*一套</p></li><li><p>用于描述消息主体的Content-*一套</p></li></ul><br><div align="center">    <img src="https://s2.loli.net/2024/08/15/bmGuUHNspIXVW6O.jpg"></div><br><p>浏览器加载资源会使用HTTP协议，前端与服务端的异步请求通常也通过HTTP协议完成。</p><p>最早我们会通过XMLHttpRequest(XHR)，在浏览器中发起一个异步请求，后来许多第三方库基于它做了功能扩展，比如jQuery、ajx、superagent和axios等，直到出现了新的Fetch标准。</p><p>虽然API都长得一样，但Fetch标准在不同环境下有不同的实现，比如Node.js环境下的fetch是基于Undici实现的，而在边缘运行时（Edge Runtime）中，Fetch API也会依据平台有所不同，因此，在现代前端，应尽可能<strong>使用Fetch API或其封装库来管理异步请求</strong>。</p><p>下面使用Fetch API和Node.js原生http模块，举例说明Content-Type是如何工作的，请求代码和报文是这样的：<br><br></p><div align="center">    <img src="https://s2.loli.net/2024/08/15/eCY8fKtcdJFQLgU.jpg"></div><br><p>对应的服务端处理代码和响应报文是这样的：<br><br></p><div align="center">    <img src="https://s2.loli.net/2024/08/15/GmO1EJIShQHC8lA.jpg"></div><br><p>需要注意的是，请求头和响应头中的Content-Type表示消息主体的数据类型，它可以是JSON、Form，也可以是其他任何MIME类型，不同的类型就要有不同的处理程序。</p><p>在这个例子中，客户端发送了一段JSON类型的数据，服务端应通过JSON parse处理，然后响应了一段纯文本类型，客户端应通过text()方法处理它。</p><p>这是一个易错点，前端使用第三方库时默认为JSON请求，而服务端默认以Form处理时，会百思不得其解为什么我处理不了你的请求，原因就是没有理解Content-Type的含义。</p><p>在不同的场景和环境下，调试HTTP有不同的方法。</p><ul><li>最常见的当然是使用浏览器开发者工具，比如在Chrome DevTools的Network选项卡下，可以看到非常详细的HTTP请求和响应信息。</li><li>有时候只想快速看看服务端的响应情况，则可以通过cURL等命令行工具完成。</li><li>在针对API测试的场景下，可以通过Postman等自动化工具来批量测试。</li><li>而要调试移动设备内的HTTPS，则需要安装信任证书以及通过网络代理工具来实现。</li><li>对于远程或是生产环境，则更多是通过抓包和分析服务端日志来完成</li></ul><p>HTTP的功能很强大，它足够满足大多数应用场景。但在大型客户端应用中，为了更高效和安全的传输数据，同时兼容HTTP协议，会有一些变化。<br>我们应该知道，不是所有的客户端环境都支持先进的HTTP&#x2F;2或HTTP&#x2F;3，原始HTTP协议在更复杂的高并发场景下，会不够高效和稳定。<br>因此，大型技术基建通常会设计一层无线网关（Gateway），并对HTTP协议进行定制。</p><br><div align="center">    <img src="https://s2.loli.net/2024/08/15/d1b2DgR5xVXIcyu.jpg"></div><br><p>增加登录验证、请求跟踪、监控、限流等功能。而前端代码通过远程调用（RPC）的方式，而非直接使用原始HTTP</p><p>以bilibili客户端为例，前端发起一个grpc请求至gateway网关，同时发送了多个自定义请求头，比如x-bili-mid表示当前用户，x-bili-trace-id用于链路日志跟踪，x-bili-device-bin表示设备信息等等。</p><p>在服务端的响应头中，Content-Type表示这是一个grpc响应，x-bili-trace-id用于日志跟踪等，可以看到，相比浏览器中的HTTP，在客户端中的HTTP会更复杂，定制化的HTTP协议能带来更强大的功能。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-基础知识笔记（一）</title>
      <link href="/2024/08/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/08/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="DNS在现代前端中扮演着怎样的角色"><a href="#DNS在现代前端中扮演着怎样的角色" class="headerlink" title="DNS在现代前端中扮演着怎样的角色"></a>DNS在现代前端中扮演着怎样的角色</h2><p>DNS的全称是域名系统（Domain Name System）<br>它的主要功能就是将人们容易记住的域名转换成计算机能理解的IP地址，从而实现正确的网络连接，而执行这项转换任务的便是DNS服务器</p><p>DNS服务器除了部署在互联网的各个角落，其实每一台终端设备都会内置本地DNS服务器<br>DNS查询时，会依次经过应用程序，比如浏览器的缓存、本地hosts、本地DNS服务器、根服务器、顶级域名服务器、权威服务器，最后得到真正的IP地址</p><p>作为开发者，我们通常会从域名服务商购买顶级域名，同时服务商也会提供域名解析服务</p><p>配置DNS records，最重要的便是A记录和CNAME记录，A记录保存最终要返回的IP地址，而CNAME则是将子域名映射到另一个域名，可以指向相同主域名也可以是其他主域名</p><p>这种在A记录上直接填写固定IP地址的方式，只适用于简单的单机部署网站<br>在大型应用中，应用服务器以分布式方式部署，IP地址是动态变化的，因此，大型应用会采用动态解析IP地址的方式，将同一个域名，根据不同网络运营商、不同地区，解析到不同IP地址的服务器上。<br>在真实世界中，这些服务器大概率并非最终的应用服务器，而是具备反向代理能力的负载均衡（LB）服务器、WEB应用防火墙（WAF）等等。而真正的应用服务器IP地址是不会暴露于公网环境的。</p><p>现代DNS服务器除了具备基本的域名解析功能外，还会提供安全插件（DNSSEC）、DNS分析、利用边缘网络加速解析、DDos防护这些功能。它们都是为了更快、更安全的为用户提供服务</p><p>前端熟知的内容分发网络（CDN）与DNS有着密切关系，当不同地区的用户访问前端静态资源时，会从不同的CDN节点下载数据，这归功于DNS系统的CNAME记录，DNS服务器会根据用户所在地区，返回不同的CNAME域名，我们通常称之为CDN加速域名</p><p>假设我们的图片资源托管在img.alicdn.com上，如何知道用户实际上会访问到哪台CDN服务器呢<br>使用nslookup工具依次查询该域名的CNAME和A记录，最终我们会得到CDN服务器的IP地址，它的实际地理位置刚好就是用户所在地附近</p><p>真实世界中DNS解析并非一轮完成，它背后会经历多次反复查询，在没有任何缓存的情况下，它会非常慢，以至于显著影响到你的网站打开速度，因此，无论是DNS云服务商还是互联网上的基础设施，都会想尽办法加速DNS解析，诸如：</p><ul><li>使用高性能的DNS服务器</li><li>配置DNS缓存</li><li>增加DNS记录的缓存时间（TTL）等等</li></ul><p>作为前端，我们也可以通过浏览器提供的DNS预取功能，来指定需要提前解析的域名，比如：</p><ul><li><p>通过在HTML中添加dns-prefetch link标签，可以让浏览器在解析完该标签后立即进行DNS查询，来提升用户后续访问该域名的速度。</p></li><li><p>利用DNS查询原理，我们可以通过修改本地hosts的方式来给项目配置一个域名，而不是直接使用localhost,这能有效解决与服务端联调时，cookie无法跨越传输的问题</p></li><li><p>另外，如果项目依赖中硬编码了线上域名，通过修改本地DNS记录，可以在不改变代码的情况下，将线上域名映射到本地或者联调环境，方便问题验证和多环节联调</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--浏览器是如何运作的</title>
      <link href="/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/"/>
      <url>/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在浏览网页时用户希望页面的内容能够快速加载且流畅交互。因此，开发者应力争实现这两个目标。<br>理解浏览器的工作原理有助于开发者了解该如何提升性能和感知性能。</p><p>导致 Web 性能问题的原因主要有两种，一是网络延迟，二是大部分情况下的浏览器单线程执行。</p><p>保障页面快速加载的最大威胁是网络延迟。开发者的目标是使网站加载速度尽可能快，或者至少看起来加载速度很快，以便用户尽快获取所需信息。<br>网络延迟是将字节传输到计算机的时间。Web 性能优化需要做的就是使页面尽可能快地加载完成。</p><p>大部分情况下，浏览器被认为是单线程的。也就是说，它们在执行一个任务之前会从头到尾完成一个任务，然后才会接受另一个任务。</p><p>为了实现流畅的交互，开发者的目标是确保网站的交互性能良好，从流畅的滚动到对触摸的响应。渲染时间非常关键，我们需要确保主线程能够完成交给它的所有工作，并且始终能够处理用户交互。</p><p>通过理解浏览器的单线程特性，并尽可能和适当地减少主线程的责任，可以提高网页性能，以确保渲染流畅，并且对交互的响应是即时的。</p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>导航是加载 web 页面的第一步。它发生在以下情形：用户通过在地址栏输入一个 URL、点击一个链接、提交表单或者是其他的行为。<br>Web 性能优化的目标之一就是缩短导航完成所花费的时间，在理想情况下，它通常不会花费太多的时间，但是网络延迟和带宽会让它变久。</p><h2 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h2><p>对于一个 web 页面来说导航的第一步是要去寻找页面资源的位置。<br>如果导航到 <a href="https://example.com,html/">https://example.com，HTML</a> 页面被定位到 IP 地址为 93.184.216.34 的服务器。如果以前没有访问过这个网站，就需要进行 DNS 查询。</p><p>浏览器向域名服务器发起 DNS 查询请求，最终得到一个 IP 地址。<br>第一次请求之后，这个 IP 地址可能会被缓存一段时间，这样可以通过从缓存里面检索 IP 地址而不是再通过域名服务器进行查询来加速后续的请求。</p><p>每个主机名 (hostname) 在页面加载时通常只需要进行一次 DNS 查询。但是，对于页面指向的不同的主机名，则需要多次 DNS 查询。如果字体（font）、图像（image）、脚本（script）、广告（ads）和网站统计（metric）都有不同的主机名，则需要对每一个主机名进行 DNS 查询。<br><br></p><div align="center">    <style>.donbtixgyxby{}</style><img src="/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/01.jpg" class="donbtixgyxby"></div><br>但是对于移动网络，DNS 查询可能存在性能问题。当一个用户使用移动网络时，所有 DNS 查询必须从手机发送到基站，然后到达一个权威 DNS 服务器。手机、信号塔、域名服务器之间的距离会显著增加延迟。<h2 id="TCP握手"><a href="#TCP握手" class="headerlink" title="TCP握手"></a>TCP握手</h2><p>一旦获取到服务器 IP 地址，浏览器就会通过TCP“三次握手”与服务器建立连接。<br>这个机制的是用来让两端尝试进行通信——在浏览器和服务器通过上层协议 HTTPS 发送数据之前，可以协商网络 TCP 套接字连接的一些参数。</p><p>TCP 的“三次握手”技术经常被称为“SYN-SYN-ACK”——更确切的说是 SYN、SYN-ACK、ACK——因为通过 TCP 首先发送了三个消息进行协商，然后在两台电脑之间开始一个 TCP 会话。是的，这意味着当请求尚未发出的时候，终端与每台服务器之间还要来回多发送三条消息。</p><h2 id="TLS协商"><a href="#TLS协商" class="headerlink" title="TLS协商"></a>TLS协商</h2><p>对于通过 HTTPS 建立的安全连接，还需要另一次 “握手”。这种握手，或者说 TLS 协商，决定使用哪种密码对通信进行加密，验证服务器，并在开始实际数据传输前建立安全连接。这就需要在实际发送内容请求之前，再往返服务器五次。<br><br></p><div align="center">    <style>.ielpmkjvdmti{}</style><img src="/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/02.jpg" class="ielpmkjvdmti"></div><br>虽然建立安全连接的步骤增加了等待加载页面的时间，但是为了建立一个安全的连接而增加延迟是值得的，因为在浏览器和 web 服务器之间传输的数据不可以被第三方解密。<p>如此经过 8 次往返，浏览器终于可以发出请求。</p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>一旦我们建立了和 web 服务器的连接，浏览器就会代表用户发送一个初始的 HTTP GET 请求，对于网站来说，这个请求通常是一个 HTML 文件。一旦服务器收到请求，它将使用相关的响应头和 HTML 的内容进行回复。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>简单的页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myscript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;heading&quot;</span>&gt;</span>我的页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>含有<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com/about&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;myimage.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图像描述&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;anotherscript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>初始请求的响应包含所接收数据的第一个字节。首字节时间（TTFB）是用户通过点击链接进行请求与收到第一个 HTML 数据包之间的时间。第一个内容分块通常是 14KB 的数据。</p><p>上面的示例中，这个请求肯定是小于 14KB 的，但是直到浏览器在解析阶段遇到链接时才会去请求链接的资源，下面有进行描述。</p><h3 id="拥塞控制-TCP慢启动"><a href="#拥塞控制-TCP慢启动" class="headerlink" title="拥塞控制&#x2F;TCP慢启动"></a>拥塞控制&#x2F;TCP慢启动</h3><p>在传输过程中，TCP 包被分割成段。由于 TCP 保证了数据包的顺序，因此服务器在发送一定数量的分段后，必须从客户端接收一个 ACK 包的确认。</p><p>如果服务器在发送每个分段之后都等待 ACK，那么客户端将频繁地发送 ACK，并且可能会增加传输时间，即使在网络负载较低的情况下也是如此。</p><p>另一方面，一次发送过多的分段会导致在繁忙的网络中客户端无法接收分段并且长时间地只会持续发送 ACK，服务器必须不断重新发送分段的问题。</p><p>为了平衡传输分段的数量，TCP 慢启动算法用于逐渐增加传输数据量，直到确定最大网络带宽，并在网络负载较高时减少传输数据量。</p><p>传输段的数量由拥塞窗口（CWND）的值控制，该值可初始化为 1、2、4 或 10 MSS（以太网协议中的 MSS 为 1500 字节）。该值是发送的字节数，客户端收到后必须发送 ACK。</p><p>如果收到 ACK，那么 CWND 值将加倍，这样服务器下次就能发送更多的数据分段。相反，如果没有收到 ACK，那么 CWND 值将减半。因此，这种机制在发送过多分段和过少分段之间取得了平衡。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>一旦浏览器收到第一个数据分块，它就可以开始解析收到的信息。“解析”是浏览器将通过网络接收的数据转换为 DOM 和 CSSOM 的步骤，通过渲染器在屏幕上将它们绘制成页面。</p><p>虽然 DOM 是浏览器标记的内部表示，但是它也被暴露出来，可以通过 JavaScript 中的各种 API 进行操作。</p><p>即使请求页面的 HTML 大于初始的 14KB 数据包，浏览器也将根据其拥有的数据开始解析并尝试渲染。这就是为什么在前 14KB 中包含浏览器开始渲染页面所需的所有内容，或者至少包含页面模板（第一次渲染所需的 CSS 和 HTML）对于 web 性能优化来说是重要的。但是在渲染到屏幕上面之前，HTML、CSS、JavaScript 必须被解析完成。</p><h3 id="构建DOM树"><a href="#构建DOM树" class="headerlink" title="构建DOM树"></a>构建DOM树</h3><p>我们在关键渲染路径这篇文章中描述了五个步骤。</p><p>第一步是处理 HTML 标记并构造 DOM 树。HTML 解析涉及到符号化和树的构造。HTML 标记包括开始和结束标记，以及属性名和值。如果文档格式良好，则解析它会简单而快速。解析器将标记化的输入解析到文档中，构建文档树。</p><p>DOM 树描述了文档的内容。<html> 元素是第一个标签也是文档树的根节点。树反映了不同标记之间的关系和层次结构。嵌套在其他标记中的标记是子节点。DOM 节点的数量越多，构建 DOM 树所需的时间就越长。<br><br></p><div align="center">    <style>.pjaiulhhjizw{}</style><img src="/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/03.gif" class="pjaiulhhjizw"></div><br>当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于 《script》标签（特别是没有 async 或者 defer 属性的）会阻塞渲染并停止 HTML 的解析。尽管浏览器的预加载扫描器加速了这个过程，但过多的脚本仍然是一个重要的瓶颈。<h3 id="预加载扫描器"><a href="#预加载扫描器" class="headerlink" title="预加载扫描器"></a>预加载扫描器</h3><p>浏览器构建 DOM 树时，这个过程占用了主线程。同时，预加载扫描器会解析可用的内容并请求高优先级的资源，如 CSS、JavaScript 和 web 字体。多亏了预加载扫描器，我们不必等到解析器找到对外部资源的引用时才去请求。它将在后台检索资源，而当主 HTML 解析器解析到要请求的资源时，它们可能已经下载中了，或者已经被下载。预加载扫描器提供的优化减少了阻塞。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myscript.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;myimage.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图像描述&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;anotherscript.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，当主线程在解析 HTML 和 CSS 时，预加载扫描器将找到脚本和图像，并开始下载它们。为了确保脚本不会阻塞进程，当 JavaScript 解析和执行顺序不重要时，可以添加 async 属性或 defer 属性。</p><p>等待获取 CSS 不会阻塞 HTML 的解析或者下载，但是它确实会阻塞 JavaScript，因为 JavaScript 经常用于查询元素的 CSS 属性。</p><h3 id="构建CSSOM树"><a href="#构建CSSOM树" class="headerlink" title="构建CSSOM树"></a>构建CSSOM树</h3><p>第二步是处理 CSS 并构建 CSSOM 树。CSS 对象模型和 DOM 是相似的。DOM 和 CSSOM 是两棵树。它们是独立的数据结构。浏览器将 CSS 规则转换为可以理解和使用的样式映射。浏览器遍历 CSS 中的每个规则集，根据 CSS 选择器创建具有父、子和兄弟关系的节点树。</p><p>与 HTML 类似，浏览器需要将接收到的 CSS 规则转换为可处理的格式。因此，它重复了 HTML 到对象的过程，但这次是针对 CSS。</p><p>CSSOM 树包括来自用户代理样式表的样式。浏览器从适用于节点的最通用规则开始，并通过应用更具体的规则递归地优化计算的样式。换句话说，它级联属性值。</p><p>构建 CSSOM 非常快，并且在当前的开发工具中没有以独特的颜色显示。相反，开发人员工具中的“重新计算样式”显示解析 CSS、构建 CSSOM 树和递归计算计算样式所需的总时间。在 web 性能优化方面，它是可轻易实现的，因为创建 CSSOM 的总时间通常小于一次 DNS 查询所需的时间。</p><h3 id="其他过程"><a href="#其他过程" class="headerlink" title="其他过程"></a>其他过程</h3><h3 id="JavaScript编译"><a href="#JavaScript编译" class="headerlink" title="JavaScript编译"></a>JavaScript编译</h3><p>在解析 CSS 和创建 CSSOM 的同时，包括 JavaScript 文件在内的其他资源也在下载（这要归功于预加载扫描器）。JavaScript 会被解析、编译和解释。脚本被解析为抽象语法树。有些浏览器引擎会将抽象语法树输入编译器，输出字节码。这就是所谓的 JavaScript 编译。大部分代码都是在主线程上解释的，但也有例外，例如在 web worker 中运行的代码。</p><h3 id="构建无障碍树"><a href="#构建无障碍树" class="headerlink" title="构建无障碍树"></a>构建无障碍树</h3><p>浏览器还构建辅助设备用于分析和解释内容的无障碍树。无障碍对象模型（AOM）类似于 DOM 的语义版本。当 DOM 更新时，浏览器会更新辅助功能树。辅助技术本身无法修改无障碍树。</p><p>在构建 AOM 之前，屏幕阅读器无法访问内容。</p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个渲染树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。</p><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>关键呈现路径的第三步是将 DOM 和 CSSOM 组合成渲染树。计算样式树或渲染树的构建从 DOM 树的根开始，遍历每个可见节点。</p><p>不会被显示的元素，如<code>&lt;head&gt;</code>元素及其子元素，以及任何带有 display: none 的节点，如用户代理样式表中的 script { display: none; }，都不会包含在渲染树中，因为它们不会出现在渲染输出中。应用了 visibility: hidden 的节点会包含在渲染树中，因为它们会占用空间。由于我们没有给出任何指令来覆盖用户代理默认值，因此上述代码示例中的 script 节点不会包含在渲染树中。</p><p>每个可见节点都应用了 CSSOM 规则。渲染树包含所有可见节点的内容和计算样式，将所有相关样式与 DOM 树中的每个可见节点匹配起来，并根据 CSS 级联，确定每个节点的计算样式。</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>第四步是在渲染树上运行布局以计算每个节点的几何体。布局是确定呈现树中所有节点的尺寸和位置，以及确定页面上每个对象的大小和位置的过程。重排是后续过程中对页面的任意部分或整个文档的大小和位置的重新计算。</p><p>渲染树构建完毕后，浏览器就开始布局。渲染树标识了哪些节点会显示（即使不可见）及其计算样式，但不标识每个节点的尺寸或位置。为了确定每个对象的确切大小和位置，浏览器会从渲染树的根开始遍历。</p><p>在网页上，大多数东西都是一个盒子。不同的设备和不同的桌面设置意味着无限数量的不同视区大小。在此阶段，根据视口大小，浏览器将确定屏幕上所有盒子的大小。以视口大小为基础，布局通常从 body 开始，设置所有 body 后代的大小，同时给不知道其尺寸的替换元素（例如图像）提供占位符空间，空间大小以相应元素盒模型的属性为准。</p><p>第一次确定每个节点的大小和位置称为<strong>布局</strong>。随后对节点大小和位置的重新计算称为<strong>重排</strong>。在我们的示例中，假设初始布局发生在返回图像之前。由于我们没有声明图像的尺寸，因此一旦知道图像的尺寸，就会出现重排。</p><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><p>关键渲染路径中的最后一步是将各个节点绘制到屏幕上，其中第一次的绘制被称为<strong>首次有意义的绘制</strong>。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个盒子转换为屏幕上的实际像素。绘制涉及将元素的每个可见部分绘制到屏幕上，包括文本、颜色、边框、阴影以及按钮和图像等替换元素。浏览器需要以超快的速度执行这个过程。</p><p>为了确保平滑滚动和动画效果，包括计算样式、回流和绘制等占用主线程的所有操作，必须在不超过 16.67 毫秒的时间内完成。在 2048 x 1536 分辨率下，iPad 需要将超过 314.5 万个像素绘制到屏幕上。这是非常多的像素，必须要非常快速地绘制出来。为了确保重绘能够比初始绘制更快地完成，绘制到屏幕的操作通常被分解成几个图层。如果发生这种情况，浏览器则需要进行合成。</p><p>绘制可以将布局树中的元素分解为多个层。将内容提升到 GPU 上的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。有一些特定的属性和元素可以实例化一个层，包括 <code>&lt;video&gt;</code> 和 <code>&lt;canvas&gt;</code>，任何 CSS 属性为 opacity 、3D transform、will-change 的元素，还有一些其他元素。这些节点将与子节点一起绘制到它们自己的层上，除非子节点由于上述一个（或多个）原因需要自己的层。</p><p>分层确实可以提高性能，但在内存管理方面成本较高，因此不应作为 Web 性能优化策略的过度使用。</p><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>一旦主线程绘制页面完成，你会认为我们已经“准备好了”，但事实并非如此。如果加载包括正确延迟加载的 JavaScript，并且仅在 onload 事件触发后执行，那么主线程可能会忙于执行脚本，无法用于滚动、触摸和其他交互操作。</p><p><strong>可交互时间（TTI）</strong>是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间——可交互是在首次内容绘制之后页面在 50ms 内响应用户的交互。如果主线程正在解析、编译和执行 JavaScript，则无法及时（小于 50ms）响应用户交互。</p><p>在我们的示例中，可能图像加载很快，但 anotherscript.js 文件的大小可能是 2MB，而且用户的网络连接很慢。在这种情况下，用户可以非常快地看到页面，但是在下载、解析和执行脚本之前，就无法滚动。这不是一个好的用户体验。避免占用主线程，如下面的网页测试示例所示：<br><br></p><div align="center">    <style>.bqfxflxsffef{}</style><img src="/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/04.png" class="bqfxflxsffef"></div><br>在本例中，DOM 内容加载过程花费了超过 1.5 秒的时间，主线程在这段时间内完全被占用，对单击事件或屏幕点击没有响应。]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大模型基础</title>
      <link href="/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Attention-is-all-you-need"><a href="#Attention-is-all-you-need" class="headerlink" title="Attention is all you need"></a>Attention is all you need</h1><p><a href="https://www.bilibili.com/video/BV1pu411o7BE/?spm_id_from=333.999.0.0&vd_source=27bfe73442d060c8d6150bb8b61d24a2">论文精讲</a></p><h2 id="Transfomer架构"><a href="#Transfomer架构" class="headerlink" title="Transfomer架构"></a>Transfomer架构</h2><h3 id="原文片段"><a href="#原文片段" class="headerlink" title="原文片段"></a>原文片段</h3><p>“主流的序列转换模型都是基于复杂的循环神经网络或卷积神经网络，且都包含一个encoder和一个decoder。表现最好的模型还通过attention机制把encoder和decoder联接起来。而Transformer只基于单独的attention机制，完全避免使用循环和卷积。</p><p>encoder将符号表示的输入序列( x 1 , . . . , x n ) 映射成一个连续表示的序列z &#x3D; ( z 1 , . . . , z n ) </p><p>给定z ，解码器以一次生成一个字符的方式生成输出序列( y 1 , . . . , y m ) 。在每一步，模型都是自回归的。在生成下一个字符时，将先前生成的符号作为附加输入。</p><p>Transformer遵循这个总体架构，使用堆叠的self-attention层、point-wise和全连接层，分别用于encoder和decoder。</p><p>Encoder : encoder由N(N&#x3D;6)个完全相同的layer堆叠而成，每层有两个子层。第一层是multi-head self-attention机制，第二层是一个简单的、位置全连接的前馈神经网络。我们在两个子层的每一层后采用残差连接，接着进行layer normalization。</p><p>Decoder : decoder也由N(N&#x3D;6)个完全相同的layer堆叠而成。除了每个编码器层中的两个子层之外，解码器还插入第三个子层，该子层对编码器堆栈的输出执行multi-head attention操作，与encoder相似，我们在每个子层的后面使用了残差连接，之后采用了layer normalization。”</p><div align="center">    <style>.swezcmvwyppn{}</style><img src="/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/transformer%E5%8E%9F%E7%89%88.png" class="swezcmvwyppn"></div><h3 id="Transfomer开山之作"><a href="#Transfomer开山之作" class="headerlink" title="Transfomer开山之作"></a>Transfomer开山之作</h3><p>在Transformer提出以前，主流的NLP模型包括RNN、LSTM、GRU等，这些模型是有以下缺点：</p><ul><li>难以并行</li><li>时序中过早的信息容易被丢弃</li><li>内存开销大</li></ul><p>由于这些网络都是由前往后一步步计算的，当前的状态不仅依赖当前的输入，也依赖于前一个状态的输出。即对于网络中的第个t状态，与前t-1个状态都有关，使得网络必须一步一步计算；当较为重要的信息在较早的时序中进入网络时，多次传播过程中可能保留很少甚至被丢弃；从另一角度来考虑，即使重要的信息没有被丢弃，而是随着网络继续传递，那么势必会造成内存的冗余，导致开销过大。</p><p>所以，作者团队因势利导，引出了本文纯attention、高并行、高效率的Transformer网络结构。</p><p>Transformer这种神经网络架构，其独特之处在于完全基于注意力机制，摒弃了传统的循环和卷积操作。通过自注意力机制（self-attention），Transformer能够有效捕捉输入序列中的长距离依赖关系，使得模型在处理长文本时更为高效和准确。多头注意力机制（multi-head attention）则进一步增强了模型的表达能力，使其能够同时关注输入序列中的不同部分，捕捉更加复杂的语义关系。</p><div align="center">    <style>.neecfrpigqmq{}</style><img src="/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/transformer01.png" class="neecfrpigqmq"></div><h3 id="layer-norm-而不是batch-norm"><a href="#layer-norm-而不是batch-norm" class="headerlink" title="layer norm 而不是batch norm"></a>layer norm 而不是batch norm</h3><p>当我们使用梯度下降法做优化时，随着网络深度的增加，输入数据的特征分布会不断发生变化，为了保证数据特征分布的稳定性，会加入Normalization。从而可以使用更大的学习率，从而加速模型的收敛速度。同时，Normalization也有一定的抗过拟合作用，使训练过程更加平稳。具体地，Normalization的主要作用就是把每层特征输入到激活函数之前，对它们进行normalization，使其转换为均值为0，方差为1的数据，从而可以避免数据落在激活函数的饱和区，以减少梯度消失的问题。</p><p>BN（BatchNorm）和LN（LayerNorm）是两种最常用的Normalization的方法，它们都是将输入特征转换为均值为0，方差为1的数据，它们的形式是：<br><br></p><div align="center">    <style>.bgijqtcsndwk{}</style><img src="/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/BNLN.jpg" class="bgijqtcsndwk"></div><br>只不过，BN是对一个batch-size样本内的每个特征做归一化，LN是对每个样本的所有特征做归一化。以一个二维矩阵为例，它的行数代表batch_size，列数代表fea_nums。BN就是竖着进行归一化，LN则是横着进行归一化。<p>所以，BN抹平了不同特征之间的大小关系，而保留了不同样本之间的大小关系。这样，如果具体任务依赖于不同样本之间的关系，BN更有效，尤其是在CV领域，例如不同图片样本进行分类，不同样本之间的大小关系得以保留。<br>LN抹平了不同样本之间的大小关系，而保留了不同特征之间的大小关系。所以，LN更适合NLP领域的任务，其中，一个样本的特征实际上就是不同word embedding，通过LN可以保留特征之间的这种时序关系。</p><h3 id="Encoder-Decoder框架"><a href="#Encoder-Decoder框架" class="headerlink" title="Encoder-Decoder框架"></a>Encoder-Decoder框架</h3><p>Encoder-Decoder框架可以看作是一种深度学习领域的研究模式，应用场景异常广泛。</p><p>文本处理领域的Encoder-Decoder框架可以这么直观地去理解：可以把它看作适合处理由一个句子（或篇章）生成另外一个句子（或篇章）的通用处理模型。对于句子对&lt;Source,Target&gt;，我们的目标是给定输入句子Source，期待通过Encoder-Decoder框架来生成目标句子Target。</p><p>Encoder顾名思义就是对输入句子Source进行编码，将输入句子通过非线性变换转化为中间语义表示C;</p><p>对于解码器Decoder来说，其任务是根据句子Source的中间语义表示C和之前已经生成的历史信息y1,y2……yi-1来生成i时刻要生成的单词yi。</p><p>每个yi都依次这么产生，那么看起来就是整个系统根据输入句子Source生成了目标句子Target。</p><ul><li>如果Source是中文句子，Target是英文句子，那么这就是解决机器翻译问题的Encoder-Decoder框架；</li><li>如果Source是一篇文章，Target是概括性的几句描述语句，那么这是文本摘要的Encoder-Decoder框架；</li><li>如果Source是一句问句，Target是一句回答，那么这是问答系统或者对话机器人的Encoder-Decoder框架。</li></ul><p>P.S. 一般而言，文本处理和语音识别的Encoder部分通常采用RNN模型，图像处理的Encoder一般采用CNN模型。</p><h3 id="Attention机制"><a href="#Attention机制" class="headerlink" title="Attention机制"></a>Attention机制</h3><p>Attention 机制 3 大优点：</p><ul><li><p>参数少<br>模型复杂度跟 CNN、RNN 相比，复杂度更小，参数也更少。所以对算力的要求也就更小。</p></li><li><p>速度快<br>Attention 解决了 RNN 不能并行计算的问题。Attention机制每一步计算不依赖于上一步的计算结果，因此可以和CNN一样并行处理。</p></li><li><p>效果好<br>在 Attention 机制引入之前，有一个问题大家一直很苦恼：长距离的信息会被弱化，就好像记忆能力弱的人，记不住过去的事情是一样的。<br>Attention 是挑重点，就算文本比较长，也能从中间抓住重点，不丢失重要的信息。下图红色的预期就是被挑出来的重点。</p></li></ul><p>目前大多数注意力模型附着在Encoder-Decoder框架下，当然，其实注意力模型可以看作一种通用的思想，本身并不依赖于特定框架，这点需要注意。Attention 并不一定要在 Encoder-Decoder 框架下使用的，他是可以脱离 Encoder-Decoder 框架的。<br><br></p><div align="center">    <style>.radebxqvwuph{}</style><img src="/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/attention01.png" class="radebxqvwuph"></div><br>将Source中的构成元素想象成是由一系列的<Key,Value>数据对构成，此时给定Target中的某个元素Query，通过计算Query和各个Key的相似性或者相关性，得到每个Key对应Value的权重系数，然后对Value进行加权求和，即得到了最终的Attention数值。所以本质上Attention机制是对Source中元素的Value值进行加权求和，而Query和Key用来计算对应Value的权重系数。即可以将其本质思想改写为如下公式：<br><div align="center">    <style>.kpwqcuouskgr{}</style><img src="/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/Attention%E5%85%AC%E5%BC%8F.png" class="kpwqcuouskgr"></div><br>在一般任务的Encoder-Decoder框架中，输入Source和输出Target内容是不一样的，比如对于英-中机器翻译来说，Source是英文句子，Target是对应的翻译出的中文句子，Attention机制发生在Target的元素Query和Source中的所有元素之间。<p>而<strong>Self Attention</strong>顾名思义，指的不是Target和Source之间的Attention机制，而是Source内部元素之间或者Target内部元素之间发生的Attention机制，也可以理解为Target&#x3D;Source这种特殊情况下的注意力计算机制。其具体计算过程是一样的，只是计算对象发生了变化而已</p><p>Transformer使用的点乘注意力机制和多头注意力机制：<br><br></p><div align="center">    <style>.bjdzmrdfwogj{}</style><img src="/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/attention%E5%8E%9F%E7%89%88.png" class="bjdzmrdfwogj"></div><br>这里h=8,8个head<br><div align="center">    <style>.fvltlceixdzf{}</style><img src="/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/transformer%E5%8E%9F%E7%89%88.png" class="fvltlceixdzf"></div><br><h4 id="编码器的注意力机制："><a href="#编码器的注意力机制：" class="headerlink" title="编码器的注意力机制："></a>编码器的注意力机制：</h4><p>多头自注意力机制：</p><ul><li>key value query都是自己本身，一个向量和各个向量计算相似度<br>多头注意力块接收包含子向量（句子中的单词）的向量（句子）作为输入，然后计算每个位置与向量的所有其他位置之间的注意力。</li></ul><h4 id="解码器的注意力机制："><a href="#解码器的注意力机制：" class="headerlink" title="解码器的注意力机制："></a>解码器的注意力机制：</h4><p>Masked 多头自注意力机制：</p><ul><li>用 masked 把后面的内容盖住，自注意力机制，和编码器的自注意力机制一样。</li></ul><p>最后一个 多头注意力机制：</p><ul><li>不再是自注意力，编码器的输出作为value和key进来，解码器下一层的输出作为query进来。</li></ul><h3 id="Add-Norm"><a href="#Add-Norm" class="headerlink" title="Add &amp; Norm"></a>Add &amp; Norm</h3><p>残差连接&amp;归一化<br>就是指对新的output做标准化</p><ul><li>add代表残差连接（Residual Connection），旨在解决深度神经网络训练过程中的梯度消失和表示瓶颈问题。</li><li>norm &#x3D; Normalization归一化，在transformer里面，使用layer normalization。</li></ul><p>add：残差连接，可以增加深度，不丢失初始的特征。<br>norm归一化，因为add把原始的特征加回来，为了避免梯度消失，减少运算，进行归一化处理。</p><h3 id="FeedForward"><a href="#FeedForward" class="headerlink" title="FeedForward"></a>FeedForward</h3><p>FeedForward是由全连接层（FC）与激活ReLu组成的结构</p><p>为什么要用FeedForward呢？不用单纯的FC呢？</p><ul><li>主要还是想提取更深层次的特征，在Multi-Head Attention中，主要是进行矩阵乘法，即都是线性变换，而线性变换的学习能力不如非线性变换的学习能力强，我们希望通过引入ReLu激活函数，使模型增加非线性成分，强化学习能力。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--HTTP基本概念</title>
      <link href="/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP常见面试题"><a href="#HTTP常见面试题" class="headerlink" title="HTTP常见面试题"></a>HTTP常见面试题</h1><h2 id="HTTP基本概念"><a href="#HTTP基本概念" class="headerlink" title="HTTP基本概念"></a>HTTP基本概念</h2><p><a href="https://mubu.com/doc/4n-ehUovcCP">幕布链接</a></p><ol><li>HTTP 是什么？描述一下</li></ol><ul><li>HTTP 是超文本传输协议，也就是HyperText Transfer Protocol。</li></ul><ol start="2"><li>能否详细解释「超文本传输协议」？</li></ol><ul><li>HTTP的名字「超文本协议传输」，HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。</li></ul><ol start="3"><li>那「HTTP 是用于从互联网服务器传输超文本到本地浏览器的协议HTTP」 ，这种说法正确吗？</li></ol><ul><li>这种说法是不正确的。因为也可以是「服务器&lt; – &gt;服务器」，所以采用两点之间的描述会更准确。</li></ul><ol start="4"><li>HTTP 常见的状态码，有哪些？</li></ol><ul><li>1xx,2xx,3xx,4xx,5xx</li></ul><div align=center>    <style>.hwddpdxxirtn{}</style><img src="/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E9%94%99%E8%AF%AF%E7%A0%81.jpg" class="hwddpdxxirtn"></div><ul><li><p>1xx 类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。</p></li><li><p>2xx 类状态码表示服务器成功处理了客户端的请求，也是我们最愿意看到的状态。<br><br>「200 OK」是最常见的成功状态码，表示一切正常。如果是非 HEAD 请求，服务器返回的响应头都会有 body 数据。<br><br>「204 No Content」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。<br><br>「206 Partial Content」是应用于 HTTP 分块下载或断电续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。</p></li><li><p>3xx 类状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向。<br><br>「301 Moved Permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。<br><br>「302 Moved Permanently」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。<br><br>301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。<br><br>「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。</p></li><li><p>4xx 类状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。<br><br>「400 Bad Request」表示客户端请求的报文有错误，但只是个笼统的错误。<br><br>「403 Forbidden」表示服务器禁止访问资源，并不是客户端的请求出错。<br><br>「404 Not Found」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</p></li><li><p>5xx 类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。<br><br> 「500 Internal Server Error」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。<br><br>「501 Not Implemented」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。<br><br>「502 Bad Gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。<br><br>「503 Service Unavailable」表示服务器当前很忙，暂时无法响应服务器，类似“网络服务正忙，请稍后重试”的意思。</p></li></ul><h2 id="http-常见字段有哪些？"><a href="#http-常见字段有哪些？" class="headerlink" title="http 常见字段有哪些？"></a>http 常见字段有哪些？</h2><ol><li>Host</li></ol><ul><li>客户端发送请求时，用来指定服务器的域名。</li><li>Host: <a href="http://www.a.com/">http://www.A.com</a></li><li>有了 Host 字段，就可以将请求发往「同一台」服务器上的不同网站。</li></ul><br><div align=center>    <style>.hlpamgbdugpv{}</style><img src="/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/01.jpg" class="hlpamgbdugpv"></div><br><ol start="2"><li>Content-Length 字段</li></ol><ul><li>服务器在返回数据时，会有 Content-Length 字段，表明本次回应的数据长度。</li><li>Content-Length: 1000</li><li>如上面则是告诉浏览器，本次服务器回应的数据长度是 1000 个字节，后面的字节就属于下一个回应了。</li></ul><br><div align=center>    <style>.kmdwbqbsyfit{}</style><img src="/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/02.jpg" class="kmdwbqbsyfit"></div><br>3. Connection 字段- Connection 字段最常用于客户端要求服务器使用 TCP 持久连接，以便其他请求复用。- HTTP/1.1 版本的默认连接都是持久连接，但为了兼容老版本的 HTTP，需要指定 Connection 首部字段的值为 Keep-Alive。- Connection: keep-alive- 一个可以复用的 TCP 连接就建立了，直到客户端或服务器主动关闭连接。但是，这不是标准字段。<br><div align=center>    <style>.hhwvrcijleyr{}</style><img src="/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/03.jpg" class="hhwvrcijleyr"></div><br><ol start="4"><li>Content-Type 字段</li></ol><ul><li>Content-Type 字段用于服务器回应时，告诉客户端，本次数据是什么格式。</li><li>Content-Type: text&#x2F;html; charset&#x3D;utf-8</li><li>上面的类型表明，发送的是网页，而且编码是UTF-8。</li><li>客户端请求的时候，可以使用 Accept 字段声明自己可以接受哪些数据格式。</li><li>Accept: <em>&#x2F;</em></li><li>上面代码中，客户端声明自己可以接受任何格式的数据。</li></ul><br><div align=center>    <style>.ppyjqmfinrow{}</style><img src="/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/04.jpg" class="ppyjqmfinrow"></div><br><ol start="5"><li>Content-Encoding 字段</li></ol><ul><li>Content-Encoding 字段说明数据的压缩方法。表示服务器返回的数据使用了什么压缩格式</li><li>Content-Encoding: gzip</li><li>下面表示服务器返回的数据采用了 gzip 方式压缩，告知客户端需要用此方式解压。</li><li>客户端在请求时，用 Accept-Encoding 字段说明自己可以接受哪些压缩方法。</li><li>Accept-Encoding: gzip, deflate</li></ul><br><div align=center>    <style>.pdplfuughkcx{}</style><img src="/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/05.jpg" class="pdplfuughkcx"></div><br>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--互联网基本原理</title>
      <link href="/2024/07/27/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E4%BA%92%E8%81%94%E7%BD%91%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2024/07/27/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E4%BA%92%E8%81%94%E7%BD%91%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Internet-地址"><a href="#Internet-地址" class="headerlink" title="Internet 地址"></a>Internet 地址</h1><p>连接到 Internet 的每台计算机都必须具有唯一的地址。Internet 地址的格式为 nnn.nnn.nnn.nnn，其中 nnn 必须是 0 - 255 之间的数字。这 地址称为 IP 地址。</p><p>下图显示了连接到 Internet 的两台计算机; 您的 IP 地址为 1.2.3.4 的计算机和另一台 IP 地址为 IP 的计算机 5.6.7.8. 互联网被表示为介于两者之间的抽象对象。</p><br><div align=center>    <img src="https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag1.gif"></div><p>两种不同的互联网连接方式以及它们如何分配IP地址:</p><ul><li>通过互联网服务提供商（ISP）的连接：<br>当您通过ISP连接到互联网时，通常在拨号或建立连接的过程中，ISP会分配给您一个临时的IP地址。这个IP地址仅在您的会话期间有效，一旦您断开连接，这个IP地址可能会被回收并分配给其他用户。</li><li>局域网（LAN）连接到互联网：<br>如果您是通过局域网（例如公司或学校的网络）连接到互联网，您的计算机可能会有一个固定的IP地址，也就是永久的IP地址。但是，更常见的情况是，计算机会从DHCP服务器获取一个临时的IP地址。DHCP（动态主机配置协议）是一种网络管理协议，它允许网络管理员自动分配IP地址和其他网络配置给网络中的设备。</li></ul><p>无论您通过哪种方式连接到互联网，只要您的设备已经连接上，它就会有一个唯一的IP地址。这个IP地址是互联网上用来识别和定位您的设备的唯一标识符。这样，数据包就可以准确地发送到正确的目的地。</p><h2 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h2><p>进入命令提示符。输入ping <a href="http://www.yahoo.com.ping程序将向指定的计算机发送一个“ping”(实际上是一个icmp(互联网控制消息协议)回显请求消息).被ping的计算机将以回复响应.ping程序将计算回复回来之前经过的时间(如果有回复的话).此外,如果你输入一个域名(即www.yahoo.com)而不是ip地址,ping将解析域名并显示计算机的ip地址./">www.yahoo.com。Ping程序将向指定的计算机发送一个“ping”（实际上是一个ICMP（互联网控制消息协议）回显请求消息）。被ping的计算机将以回复响应。Ping程序将计算回复回来之前经过的时间（如果有回复的话）。此外，如果你输入一个域名（即www.yahoo.com）而不是IP地址，Ping将解析域名并显示计算机的IP地址。</a></p><br><div align=center>    <img src="https://s2.loli.net/2024/07/28/5dt8aFZblrOsEhu.jpg"></div><h1 id="协议栈和数据包"><a href="#协议栈和数据包" class="headerlink" title="协议栈和数据包"></a>协议栈和数据包</h1><p> 假设你的IP地址是1.2.3.4，你想向IP地址为5.6.7.8的电脑发送一条消息。你想发送的消息是“你好，电脑5.6.7.8！”。显然，这条消息必须通过连接你的电脑到互联网的某种线路来传输。假设你从家里拨号连接到你的ISP，那么这条消息必须通过电话线传输。因此，这条消息必须从字母文本转换为电子信号，通过互联网传输，然后再转换回字母文本。这是如何实现的呢？通过使用协议栈。每台电脑都需要一个协议栈来进行互联网通信，它通常内置在电脑的操作系统中（例如Windows、Unix等）。在互联网上使用的协议栈被称为TCP&#x2F;IP协议栈，因为它使用了两个主要的通信协议。</p><ul><li><p>应用层（Application Protocols Layer）：<br>应用层是网络模型的最高层，它包含特定于应用程序的协议，如万维网（WWW）、电子邮件、文件传输协议（FTP）等。这些协议定义了应用程序如何通过网络进行通信和数据交换。</p></li><li><p>传输层（Transmission Control Protocol Layer）：<br>传输层负责确保数据的可靠传输。传输控制协议（TCP）使用端口号将数据包定向到计算机上的特定应用程序。端口号使得多个应用程序能够在同一台计算机上同时运行，而不会相互干扰。</p></li><li><p>网络层（Internet Protocol Layer）：<br>网络层负责将数据包从源头路由到目的地。互联网协议（IP）通过IP地址将数据包定向到特定的计算机。这一层处理数据包在整个网络中的路由和转发。</p></li><li><p>物理层（Hardware Layer）：<br>物理层是网络模型的最低层，它负责将二进制数据包转换为网络信号，以及将网络信号转换回二进制数据。物理层包括各种硬件设备，例如以太网网卡、电话线调制解调器等，它们负责在物理介质上传输数据。</p></li></ul><br><div align=center>    <img src="https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag2.gif"></div><p>消息会从你的电脑的协议栈顶部开始，然后向下工作。</p><p>如果待发送的消息很长，每一层协议栈在消息通过时都可能将消息分解成更小的数据块。这是因为通过互联网（以及大多数计算机网络）发送的数据都是以可管理的块来发送的。在互联网上，这些数据块被称为数据包。</p><p>数据包会经过应用层，继续到达传输层（TCP层）。每个数据包都被分配一个端口号。我们需要知道目标计算机上的哪个程序需要接收消息，因为它将在特定的端口上监听。</p><p>通过TCP层后，数据包继续前往网络层（IP层）。在这里，每个数据包接收到它的目的地地址，即5.6.7.8。</p><p>现在，我们的消息数据包有了端口号和IP地址，它们已经准备好通过互联网发送。物理层负责将包含我们消息的字母文本的数据包转换为电子信号，并通过电话线传输它们。</p><p>在电话线的另一端，你的ISP有一个直接连接到互联网的路由器。ISP的路由器检查每个数据包的目的地地址，并确定将其发送到哪里。通常，数据包的下一站是另一个路由器。</p><p>最终，数据包到达计算机5.6.7.8。在这里，数据包从目标计算机的TCP&#x2F;IP协议栈底部开始向上工作。</p><p>当数据包通过协议栈向上移动时，发送计算机的协议栈添加的所有路由数据（如IP地址和端口号）都被从数据包中剥离。</p><p>当数据到达协议栈的顶部时，数据包已经被重新组装成它们原来的形式，“你好，电脑5.6.7.8！”</p><h1 id="网络基础设施"><a href="#网络基础设施" class="headerlink" title="网络基础设施"></a>网络基础设施</h1><br><div align=center>    <img src="https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag3.gif"></div><p>ISP维护着一个为拨号客户准备的调制解调器池。这是由某种计算机（通常是专用的）管理的，它控制着从调制解调器池到骨干网或专用线路路由器的数据流。这种设置可能被称为端口服务器，因为它提供了对网络的访问。计费和使用信息通常也在这里收集。</p><p>你的数据包穿过电话网络和ISP的本地设备后，它们会被路由到ISP的骨干网或ISP购买带宽的骨干网上。从这里，数据包通常会经过几个路由器，经过几个骨干网、专用线路和其他网络，直到找到它们的目的地，即地址为5.6.7.8的计算机。</p><h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><p>跟踪路由（traceroute），它显示了你的数据包到达给定互联网目的地的路径。像ping一样，你必须从命令提示符使用跟踪路由。在Windows中，使用tracert <a href="http://www.yahoo.com.在unix提示符下,输入traceroute/">www.yahoo.com。在Unix提示符下，输入traceroute</a> <a href="http://www.yahoo.com.像ping一样,你也可以输入ip地址而不是域名.跟踪路由将打印出所有路由器、计算机以及数据包必须经过的任何其他互联网实体的列表./">www.yahoo.com。像ping一样，你也可以输入IP地址而不是域名。跟踪路由将打印出所有路由器、计算机以及数据包必须经过的任何其他互联网实体的列表。</a></p><br><div align=center>    <img src="https://s2.loli.net/2024/07/28/M9wQ1xYJdfANpCF.jpg"></div><h1 id="互联网基础设施"><a href="#互联网基础设施" class="headerlink" title="互联网基础设施"></a>互联网基础设施</h1><p>互联网的骨干网由许多大型网络组成，这些网络相互连接。这些大型网络被称为<strong>网络服务提供商</strong>或<strong>NSP</strong>。一些大型NSP包括UUNet、CerfNet、IBM、BBN Planet、SprintNet、PSINet等。这些网络相互对等，以交换数据包流量。每个NSP都需要连接到三个网络接入点或NAP。在NAP，数据包流量可以从一个NSP的骨干网跳转到另一个NSP的骨干网。NSP还在城域交换（Metropolitan Area Exchanges）或MAE进行互联。MAE的作用与NAP相同，但它们是私有的。NAP是最初的互联网互联点。NAP和MAE都被称为互联网交换点或IX。NSP还向较小的网络，如ISP和较小的带宽提供商出售带宽。下面是一张显示这种分层基础设施的图片。</p><br><div align=center>    <img src="https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag4.gif"></div><h1 id="Internet-路由层次结构"><a href="#Internet-路由层次结构" class="headerlink" title="Internet 路由层次结构"></a>Internet 路由层次结构</h1><p>没有一台计算机知道其他任何一台计算机在哪里， 数据包不会发送到每台计算机。用于将数据包送达目的地的信息包含在每个连接到互联网的路由器所维护的路由表中。</p><p>路由器是数据包交换机。每个路由器都知道它的子网络以及它们使用的IP地址。路由器通常不知道“上面”的IP地址是什么。</p><p>当一个数据包到达路由器时，路由器会检查由源计算机上的IP协议层放置的IP地址。路由器会检查它的路由表。如果找到了包含IP地址的网络，数据包就会被发送到那个网络。如果没有找到包含IP地址的网络，那么路由器会将数据包通过默认路由发送出去，通常是向上层骨干网络发送到下一个路由器。希望下一个路由器会知道将数据包发送到哪里。如果它不知道，数据包将再次向上路由，直到它到达一个NSP骨干网。连接到NSP骨干网的路由器拥有最大的路由表，在这里数据包将被路由到正确的骨干网，然后它将开始通过越来越小的网络向下行进，直到找到它的目的地。<br><br></p><div align=center>    <img src="https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag5.gif"></div><h1 id="域名和地址解析"><a href="#域名和地址解析" class="headerlink" title="域名和地址解析"></a>域名和地址解析</h1><p>但是，如果你不知道你想连接的计算机的IP地址怎么办？如果你需要访问一个被称为<a href="http://www.anothercomputer.com的Web服务器怎么办？你的Web浏览器是如何知道这台计算机在互联网上的哪个位置的？">www.anothercomputer.com的Web服务器怎么办？你的Web浏览器是如何知道这台计算机在互联网上的哪个位置的？</a></p><p>所有这些问题的答案都是域名服务或DNS。DNS是一个分布式数据库，它跟踪互联网上计算机的名称及其相应的IP地址。</p><p>许多连接到互联网的计算机托管了DNS数据库的一部分以及允许其他人访问的软件。这些计算机被称为DNS服务器。没有一个DNS服务器包含整个数据库；它们只包含它的一个子集。如果一个DNS服务器不包含另一台计算机请求的域名，该DNS服务器会将请求计算机重定向到另一个DNS服务器。</p><br><div align=center>    <img src="https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag6.gif"></div><p>域名服务（Domain Name Service, DNS）的结构类似于IP路由层级结构。请求名称解析的计算机将被重定向到层级的“上方”，直到找到一个能够解析请求中域名的DNS服务器。上图展示了层级的一部分。在树的顶端是域名根。一些较老、较常见的域靠近顶端。没有显示出来的是世界各地构成层级其余部分的众多DNS服务器。</p><p>当设置互联网连接时（例如，在Windows中为局域网或拨号网络设置），通常在安装过程中指定一个主要的和一个或多个次要的DNS服务器。这样，任何需要域名解析的互联网应用程序都将能够正确运行。例如，当你在Web浏览器中输入一个网址时，浏览器首先连接到你的主要DNS服务器。在获得你输入的域名的IP地址后，浏览器然后连接到目标计算机并请求你想要访问的网页。</p><h1 id="重新审视互联网协议"><a href="#重新审视互联网协议" class="headerlink" title="重新审视互联网协议"></a>重新审视互联网协议</h1><h2 id="应用程序协议：HTTP-和万维网"><a href="#应用程序协议：HTTP-和万维网" class="headerlink" title="应用程序协议：HTTP 和万维网"></a>应用程序协议：HTTP 和万维网</h2><p>互联网上最常用的服务之一是万维网（WWW）。使网络工作的应用协议是超文本传输协议（HTTP）。不要将其与超文本标记语言（HTML）混淆。HTML是用于编写网页的语言。HTTP是Web浏览器和Web服务器通过互联网相互通信的协议。它是一个应用层协议，因为它位于协议栈的TCP层之上，并被特定应用程序用来相互通信。在这种情况下，应用程序是Web浏览器和Web服务器。</p><p>HTTP是一个无连接的基于文本的协议。客户端（Web浏览器）向Web服务器发送请求，请求网页和图像等网络元素。服务器处理完请求后，客户端和服务器之间的互联网连接将被断开。每个请求都必须重新建立连接。大多数协议是面向连接的。这意味着彼此通信的两台计算机在互联网上保持连接打开。然而，HTTP不是这样。在客户端可以进行HTTP请求之前，必须与服务器建立新连接。</p><p>当你在Web浏览器中输入一个URL时，会发生以下情况：</p><ol><li>如果URL包含域名，浏览器首先连接到域名服务器并检索Web服务器的相应IP地址。</li><li>Web浏览器连接到Web服务器，并通过协议栈发送HTTP请求（请求所需的网页）。</li><li>Web服务器接收请求并检查所需页面。如果页面存在，Web服务器会发送它。如果服务器找不到请求的页面，它会发送一个HTTP 404错误消息。（404意味着“页面未找到”，任何浏览过网页的人可能都知道。）</li><li>Web浏览器接收页面并关闭连接。</li><li>然后浏览器解析页面，并查找它需要完成网页的其他页面元素。这些通常包括图像、小程序等。</li><li>对于每个需要的元素，浏览器都会额外连接并针对每个元素向服务器发送HTTP请求。</li><li>当浏览器加载完所有图像、小程序等时，页面将在浏览器窗口中完全加载。</li></ol><h2 id="应用协议：SMTP-和电子邮件"><a href="#应用协议：SMTP-和电子邮件" class="headerlink" title="应用协议：SMTP 和电子邮件"></a>应用协议：SMTP 和电子邮件</h2><p>应用协议：SMTP和电子邮件<br>互联网上另一个常用的服务是电子邮件。电子邮件使用一种称为简单邮件传输协议（SMTP）的应用层协议。SMTP也是一种基于文本的协议，但与HTTP不同，SMTP是面向连接的。SMTP也比HTTP更复杂。在SMTP中有更多的命令和考虑因素，而HTTP中则较少。</p><p>当你打开邮件客户端阅读电子邮件时，通常会发生以下情况：</p><p>邮件客户端（Netscape Mail、Lotus Notes、Microsoft Outlook等）打开一个连接到其默认邮件服务器。邮件服务器的IP地址或域名通常在安装邮件客户端时设置。</p><p>邮件服务器始终会首先传输消息以标识自己。<br>客户端将发送一个SMTP HELO命令，服务器将以250 OK消息响应。<br>根据客户端是检查邮件、发送邮件等，将向服务器发送相应的SMTP命令，服务器将相应地做出回应。</p><p>这个请求&#x2F;响应交易将持续进行，直到客户端发送一个SMTP QUIT命令。然后服务器将告别，连接将被关闭。</p><h2 id="传输控制协议"><a href="#传输控制协议" class="headerlink" title="传输控制协议"></a>传输控制协议</h2><p>在协议栈的应用层下面是TCP层。当应用程序打开到互联网上另一台计算机的连接时，它们发送的消息（使用特定的应用层协议）会沿着协议栈传递到TCP层。TCP负责将应用协议路由到目标计算机上正确的应用程序。为了实现这一点，使用端口号。端口可以被看作是每台计算机上独立的通道。</p><p>例如，你可以在查看电子邮件的同时浏览网页。这是因为这两个应用程序（Web浏览器和邮件客户端）使用了不同的<strong>端口号</strong>。当一个数据包到达计算机并向上通过协议栈时，TCP层根据TCP头中的端口号决定哪个应用程序接收该数据包。</p><p>TCP的工作原理如下：</p><p>当TCP层从上层接收到应用层协议数据时，它会将其分割成可管理的“块”，然后为每个“块”添加一个包含特定TCP信息的TCP头。TCP头中包含的信息包括数据需要发送到的应用程序的端口号。</p><p>当TCP层从下面的IP层接收到一个数据包时，TCP层会从数据包中剥离TCP头数据，如果需要，进行一些数据重构，然后使用从TCP头中取出的端口号将数据发送到正确的应用程序。</p><p>这就是TCP如何将通过协议栈移动的数据路由到正确的应用程序的方式。</p><p>TCP不是一个文本协议。TCP是一个面向连接的、可靠的、字节流服务。</p><p>面向连接意味着使用TCP的两个应用程序在交换数据之前必须首先建立连接。TCP是可靠的，因为对于每个接收到的数据包，都会向发送者发送一个确认以确认交付。</p><p>请注意，在TCP头中没有IP地址的位置。这是因为TCP对IP地址一无所知。TCP的工作是可靠地将应用层数据从一个应用程序传输到另一个应用程序。将数据从一个计算机传输到另一个计算机的任务是由IP来完成的。</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>与TCP不同，IP是一个不可靠、无连接的协议。IP不关心数据包是否到达目的地。同样，IP也不知道连接和端口号。IP的工作是发送和路由数据包到其他计算机。</p><p>IP数据包是独立的实体，可能会乱序到达或根本不到达。确保数据包到达并且顺序正确的工作是由TCP来完成的。IP与TCP唯一的共同点是接收数据并在TCP数据上添加自己的IP头信息的方式。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>昇腾CANN-Ascend C算子开发学习笔记</title>
      <link href="/2024/07/25/%E6%98%87%E8%85%BECANN-Ascend-C%E7%AE%97%E5%AD%90%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/25/%E6%98%87%E8%85%BECANN-Ascend-C%E7%AE%97%E5%AD%90%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此为华为昇腾AI训练营（南京站）授课内容，经个人整理发布</p><p>为了更好的理解课程内容，建议读者有一定的计算机组成原理、编译原理学习基础</p><p>本文在笔者CSDN账号先行发布，后同步到此，因此图片水印皆为笔者本人CSDN账号水印</p><h1 id="一、背景知识"><a href="#一、背景知识" class="headerlink" title="一、背景知识"></a>一、背景知识</h1><h2 id="1-CANN-AI-core"><a href="#1-CANN-AI-core" class="headerlink" title="1. CANN&amp;AI core"></a>1. CANN&amp;AI core</h2><div align=center>    <img src="https://i-blog.csdnimg.cn/direct/959d581b757747989d8e39ed91e96fae.jpeg"></div><p>1.华为的异构计算架构CANN（Compute Architecture for Neural Networks）对标NVIDA的CUDA<br><br>2.NPU（Neural Processing Unit）架构是一种新型的处理器设计理念，它将传统的CPU和GPU架构进行整合，并引入了深度学习算法。<br><br>3.AI core 采用华为自研的达芬奇架构，它包含下面几个组成部分：<br></p><ul><li>计算单元（矩阵计算、向量计算、标量计算） </li><li>存储系统 </li><li>控制单元</li></ul><p>Ascend C编程语言开发的算子运行在AI core上</p><h2 id="2-Ascend-C算子"><a href="#2-Ascend-C算子" class="headerlink" title="2. Ascend C算子"></a>2. Ascend C算子</h2><ul><li><p>算子：一个函数空间到函数空间上的映射</p></li><li><p>从广义上讲，对任何函数进行某一项操作都可以认为是一个算子</p></li><li><p>CUDA与CANN的算子不通用</p></li></ul><h2 id="3-核函数"><a href="#3-核函数" class="headerlink" title="3. 核函数"></a>3. 核函数</h2><ul><li>核函数：Ascend C算子设备侧的入口</li><li>核函数是直接在设备侧执行的代码</li><li>使用变量类型限定符</li><li>核函数必须具有void返回类型</li><li>核函数的调用语句是C&#x2F;C++函数调用语句的一种扩展</li></ul><h1 id="二、编程范式"><a href="#二、编程范式" class="headerlink" title="二、编程范式"></a>二、编程范式</h1><p>Ascend C采用标准C++语法和一组类库API进行编程</p><p>1）矢量编程主要分为：</p><ul><li>CopyIn </li><li>Compute </li><li>CopyOut</li></ul><p>3个流水任务：CopyIn负责搬入操作，Compute负责矢量计算操作，CopyOut负责搬出操作</p><p>2）矩阵编程主要分为：</p><ul><li>CopyIn</li><li>Split</li><li>Compute</li><li>Aggregate</li><li>CopyOut</li></ul><p>相比矢量编程多了矩阵分割（Split）和聚合（Aggregate）两步</p><h1 id="三、香橙派的连接"><a href="#三、香橙派的连接" class="headerlink" title="三、香橙派的连接"></a>三、香橙派的连接</h1><p>文档：<a href="https://www.hiascend.com/document/detail/zh/Atlas200IDKA2DeveloperKit/23.0.RC2/qs/qs_0017.html">Orange pai连接及操作实验文档</a></p><h1 id="四、改造sinh任务"><a href="#四、改造sinh任务" class="headerlink" title="四、改造sinh任务"></a>四、改造sinh任务</h1><p>首先运动add任务，然后修改add算子功能为sinh函数功能</p><h2 id="1-测试运行"><a href="#1-测试运行" class="headerlink" title="1.测试运行"></a>1.测试运行</h2><p>根据实验手册，成功运行后会显示：test pass</p><div align=center>    <img src="https://i-blog.csdnimg.cn/direct/3f611475c7504a4a888b70c4934fd5d1.jpeg"></div><h2 id="2-改造成sinh"><a href="#2-改造成sinh" class="headerlink" title="2.改造成sinh"></a>2.改造成sinh</h2><div align=center>    <img src="https://img-blog.csdnimg.cn/img_convert/f7aa26cc2b49cc5c825e95f01d321dad.png"></div><p>需要参考一些官方的API：<br><a href="https://link.csdn.net/?target=https://www.hiascend.com/zh/developer/courses/detail/1696414606799486977">华为昇腾社区-Ascend C</a></p><p>需要修改目录：<code>~/samples/operator/AddCustomSample/KernelLaunch/test</code><br>下的两个文档：</p><ul><li>add_custom.cpp</li><li>scripts &#x2F; gen_data.py</li></ul><p>分别需要修改的地方为：</p><ul><li>1</li></ul><div align=center>    <img src="https://img-blog.csdnimg.cn/img_convert/55a966993b663a71b8d7feadf8c7fbf3.png"></div><ul><li>2</li></ul><div align=center>    <img src="https://img-blog.csdnimg.cn/img_convert/e0ddb5c183803561c5c3588e45e492d0.png"></div><p>将公式修改为sinh的公式，之后用实验文档中的运行命令再次运行即可</p><h1 id="五、Ascend-C中级认证"><a href="#五、Ascend-C中级认证" class="headerlink" title="五、Ascend C中级认证"></a>五、Ascend C中级认证</h1><p><a href="https://www.hiascend.com/edu/certification/detail/34bf904cb410497cb9c582be6c047ff7"><strong>点击链接：Ascend C中级认证考试</strong></a></p><p>题目：<br><em><strong>参考tensorflow的Sinh算子，实现Ascend C算子Sinh，算子命名为SinhCustom，并完成aclnn算子调用相关算法: sinh(x) &#x3D; (exp(x) - exp(-x)) &#x2F; 2.0<br>要求:<br>1、完成host侧和kernel侧代码实现。<br>2、实现sinh功能，支持float16类型输入，使用内核调试符方式调用算子测试通过。<br>3、使用单算子API调用方式调用SinhCustom算子测试通过<br>提交要求:<br>完成编程后，将上述实现的工程代码打包在rar包内提交，如SinhCustom.rar.</strong></em></p><p>所有需要补充的文件包括：</p><ul><li>op_host文件夹下的sinh_custom_tiling.h文件</li><li>op_host文件夹下的sinh_custom.cpp文件</li><li>op_kernel文件夹下的sinh_custom.cpp文件</li></ul><p>这个实现过程可以参考samples仓库的Add算子，把Add算子的内核调用代码复制一份到SinhCustom，Add需要x，y，z三个变量，sinh只需x和y两个变量，因此删掉关于z的操作</p><ol><li>kernel侧的sinh_custom.cpp文件内关键公式修改方法参考前文所示，完整代码如下：</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel_operator.h&quot;</span></span></span><br><span class="line">using namespace AscendC;</span><br><span class="line"><span class="type">constexpr</span> <span class="type">int32_t</span> BUFFER_NUM = <span class="number">2</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KernelSinh</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"> __aicore__ <span class="keyword">inline</span> <span class="title function_">KernelSinh</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"> __aicore__ <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">Init</span><span class="params">(GM_ADDR x, GM_ADDR y, <span class="type">uint32_t</span> totalLength, <span class="type">uint32_t</span> </span></span><br><span class="line"><span class="params">tileNum)</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//考生补充初始化代码</span></span><br><span class="line"> ASSERT(GetBlockNum() != <span class="number">0</span> &amp;&amp; <span class="string">&quot;block dim can not be zero!&quot;</span>);</span><br><span class="line"> this-&gt;blockLength = totalLength / GetBlockNum();</span><br><span class="line"> this-&gt;tileNum = tileNum;</span><br><span class="line"> ASSERT(tileNum != <span class="number">0</span> &amp;&amp; <span class="string">&quot;tile num can not be zero!&quot;</span>);</span><br><span class="line"> this-&gt;tileLength = this-&gt;blockLength / tileNum / BUFFER_NUM;</span><br><span class="line"> xGm.SetGlobalBuffer((__gm__ DTYPE_X *)x + this-&gt;blockLength * GetBlockIdx(), </span><br><span class="line">this-&gt;blockLength);</span><br><span class="line"> yGm.SetGlobalBuffer((__gm__ DTYPE_Y *)y + this-&gt;blockLength * GetBlockIdx(), </span><br><span class="line">this-&gt;blockLength);</span><br><span class="line"> pipe.InitBuffer(inQueueX, BUFFER_NUM, this-&gt;tileLength * <span class="keyword">sizeof</span>(DTYPE_X));</span><br><span class="line"> pipe.InitBuffer(outQueueY, BUFFER_NUM, this-&gt;tileLength * <span class="keyword">sizeof</span>(DTYPE_Y));</span><br><span class="line"> pipe.InitBuffer(tmpBuffer1, this-&gt;tileLength * <span class="keyword">sizeof</span>(DTYPE_X));</span><br><span class="line"> pipe.InitBuffer(tmpBuffer2, this-&gt;tileLength * <span class="keyword">sizeof</span>(DTYPE_X));</span><br><span class="line"> pipe.InitBuffer(tmpBuffer3, this-&gt;tileLength * <span class="keyword">sizeof</span>(DTYPE_X));</span><br><span class="line"> pipe.InitBuffer(tmpBuffer4, this-&gt;tileLength * <span class="keyword">sizeof</span>(DTYPE_X));</span><br><span class="line"> &#125;</span><br><span class="line"> __aicore__ <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">Process</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//考生补充对“loopCount”的定义，注意对 Tiling 的处理</span></span><br><span class="line"> <span class="type">int32_t</span> loopCount = this-&gt;tileNum * BUFFER_NUM;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int32_t</span> i = <span class="number">0</span>; i &lt; loopCount; i++) &#123;</span><br><span class="line"> CopyIn(i);</span><br><span class="line"> Compute(i);</span><br><span class="line"> CopyOut(i);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">private:</span><br><span class="line"> __aicore__ <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">CopyIn</span><span class="params">(<span class="type">int32_t</span> progress)</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//考生补充算子代码</span></span><br><span class="line"> LocalTensor&lt;DTYPE_X&gt; xLocal = inQueueX.AllocTensor&lt;DTYPE_X&gt;();</span><br><span class="line"> DataCopy(xLocal, xGm[progress * this-&gt;tileLength], this-&gt;tileLength);</span><br><span class="line"> inQueueX.EnQue(xLocal);</span><br><span class="line"> &#125;</span><br><span class="line"> __aicore__ <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">Compute</span><span class="params">(<span class="type">int32_t</span> progress)</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//考生补充算子计算代码</span></span><br><span class="line"> LocalTensor&lt;DTYPE_X&gt; xLocal = inQueueX.DeQue&lt;DTYPE_X&gt;();</span><br><span class="line"> LocalTensor&lt;DTYPE_Y&gt; yLocal = outQueueY.AllocTensor&lt;DTYPE_Y&gt;();</span><br><span class="line"> LocalTensor&lt;DTYPE_X&gt; tmpTensor1 = tmpBuffer1.Get&lt;DTYPE_X&gt;();</span><br><span class="line"> LocalTensor&lt;DTYPE_X&gt; tmpTensor2 = tmpBuffer2.Get&lt;DTYPE_X&gt;();</span><br><span class="line"> LocalTensor&lt;DTYPE_X&gt; tmpTensor3 = tmpBuffer3.Get&lt;DTYPE_X&gt;();</span><br><span class="line"> LocalTensor&lt;DTYPE_X&gt; tmpTensor4 = tmpBuffer4.Get&lt;DTYPE_X&gt;();</span><br><span class="line"> DTYPE_X inputVal1 = <span class="number">-1</span>;</span><br><span class="line"> DTYPE_X inputVal2 = <span class="number">0.5</span>;</span><br><span class="line"> <span class="comment">//sinh(x) = (exp(x) - exp(-x)) / 2.0</span></span><br><span class="line"> Muls(tmpTensor1, xLocal, inputVal1, this-&gt;tileLength);</span><br><span class="line"> Exp(tmpTensor2, tmpTensor1, this-&gt;tileLength);</span><br><span class="line"> Exp(tmpTensor3, xLocal, this-&gt;tileLength);</span><br><span class="line"> Sub(tmpTensor4, tmpTensor3, tmpTensor2, this-&gt;tileLength);</span><br><span class="line"> Muls(yLocal, tmpTensor4, inputVal2, this-&gt;tileLength);</span><br><span class="line"> outQueueY.EnQue&lt;DTYPE_Y&gt;(yLocal);</span><br><span class="line"> inQueueX.FreeTensor(xLocal);</span><br><span class="line"> &#125;</span><br><span class="line"> __aicore__ <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">CopyOut</span><span class="params">(<span class="type">int32_t</span> progress)</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//考生补充算子代码</span></span><br><span class="line"> LocalTensor&lt;DTYPE_Y&gt; yLocal = outQueueY.DeQue&lt;DTYPE_Y&gt;();</span><br><span class="line"> DataCopy(yGm[progress * this-&gt;tileLength], yLocal, this-&gt;tileLength);</span><br><span class="line"> outQueueY.FreeTensor(yLocal);</span><br><span class="line"> &#125;</span><br><span class="line">private:</span><br><span class="line"> TPipe pipe;</span><br><span class="line"> <span class="comment">//create queue for input, in this case depth is equal to buffer num</span></span><br><span class="line"> TQue&lt;QuePosition::VECIN, BUFFER_NUM&gt; inQueueX;</span><br><span class="line"> <span class="comment">//create queue for output, in this case depth is equal to buffer num</span></span><br><span class="line"> TQue&lt;QuePosition::VECOUT, BUFFER_NUM&gt; outQueueY;</span><br><span class="line"> GlobalTensor&lt;half&gt; xGm;</span><br><span class="line"> GlobalTensor&lt;half&gt; yGm;</span><br><span class="line"> <span class="comment">//考生补充自定义成员变量</span></span><br><span class="line"> TBuf&lt;QuePosition::VECCALC&gt; tmpBuffer1, tmpBuffer2, tmpBuffer3, tmpBuffer4;</span><br><span class="line"> <span class="type">uint32_t</span> blockLength;</span><br><span class="line"> <span class="type">uint32_t</span> tileNum;</span><br><span class="line"> <span class="type">uint32_t</span> tileLength;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __global__ __aicore__ <span class="type">void</span> <span class="title function_">sinh_custom</span><span class="params">(GM_ADDR x, GM_ADDR y, GM_ADDR </span></span><br><span class="line"><span class="params">workspace, GM_ADDR tiling)</span> &#123;</span><br><span class="line"> GET_TILING_DATA(tiling_data, tiling);</span><br><span class="line"> KernelSinh op;</span><br><span class="line"> <span class="comment">//补充 init 和 process 函数调用内容</span></span><br><span class="line"> op.Init(x, y, tiling_data.totalLength, tiling_data.tileNum);</span><br><span class="line"> op.Process();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>host侧的tiling.h文件：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;register/tilingdata_base.h&quot;</span></span></span><br><span class="line">namespace optiling &#123;</span><br><span class="line">BEGIN_TILING_DATA_DEF(SinhCustomTilingData)</span><br><span class="line"> <span class="comment">//考生自行定义 tiling 结构体成员变量</span></span><br><span class="line">TILING_DATA_FIELD_DEF(<span class="type">uint32_t</span>, totalLength);</span><br><span class="line">TILING_DATA_FIELD_DEF(<span class="type">uint32_t</span>, tileNum);</span><br><span class="line">END_TILING_DATA_DEF;</span><br><span class="line">REGISTER_TILING_DATA_CLASS(SinhCustom, SinhCustomTilingData)</span><br></pre></td></tr></table></figure><ol start="3"><li>host侧的sinh_custom.cpp文件：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sinh_custom_tiling.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;register/op_def_registry.h&quot;</span></span></span><br><span class="line">namespace optiling &#123;</span><br><span class="line"><span class="type">static</span> ge::graphStatus <span class="title function_">TilingFunc</span><span class="params">(gert::TilingContext* context)</span></span><br><span class="line">&#123;</span><br><span class="line"> SinhCustomTilingData tiling;</span><br><span class="line"> <span class="comment">//考生自行填充</span></span><br><span class="line"> <span class="type">const</span> <span class="type">uint32_t</span> BLOCK_DIM = <span class="number">8</span>;</span><br><span class="line"> <span class="type">const</span> <span class="type">uint32_t</span> TILE_NUM = <span class="number">8</span>;</span><br><span class="line"> <span class="type">uint32_t</span> totalLength = context-&gt;GetInputShape(<span class="number">0</span>)-&gt;GetOriginShape().GetShapeSize();</span><br><span class="line"> context-&gt;SetBlockDim(BLOCK_DIM);</span><br><span class="line"> tiling.set_totalLength(totalLength);</span><br><span class="line"> tiling.set_tileNum(TILE_NUM);</span><br><span class="line"> tiling.SaveToBuffer(context-&gt;GetRawTilingData()-&gt;GetData(), </span><br><span class="line">context-&gt;GetRawTilingData()-&gt;GetCapacity());</span><br><span class="line"> context-&gt;GetRawTilingData()-&gt;SetDataSize(tiling.GetDataSize());</span><br><span class="line"> <span class="type">size_t</span> *currentWorkspace = context-&gt;GetWorkspaceSizes(<span class="number">1</span>);</span><br><span class="line"> currentWorkspace[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">return</span> ge::GRAPH_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace ge &#123;</span><br><span class="line"><span class="type">static</span> ge::graphStatus <span class="title function_">InferShape</span><span class="params">(gert::InferShapeContext* context)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">const</span> gert::Shape* x1_shape = context-&gt;GetInputShape(<span class="number">0</span>);</span><br><span class="line"> gert::Shape* y_shape = context-&gt;GetOutputShape(<span class="number">0</span>);</span><br><span class="line"> *y_shape = *x1_shape;</span><br><span class="line"> <span class="keyword">return</span> GRAPH_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace ops &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinhCustom</span> :</span> public OpDef &#123;</span><br><span class="line">public:</span><br><span class="line"> explicit <span class="title function_">SinhCustom</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span> : <span class="title function_">OpDef</span><span class="params">(name)</span></span><br><span class="line"> &#123;</span><br><span class="line"> this-&gt;Input(<span class="string">&quot;x&quot;</span>)</span><br><span class="line"> .ParamType(REQUIRED)</span><br><span class="line"> .DataType(&#123;ge::DT_FLOAT16&#125;)</span><br><span class="line"> .Format(&#123;ge::FORMAT_ND&#125;)</span><br><span class="line"> .UnknownShapeFormat(&#123;ge::FORMAT_ND&#125;);</span><br><span class="line"> this-&gt;Output(<span class="string">&quot;y&quot;</span>)</span><br><span class="line"> .ParamType(REQUIRED)</span><br><span class="line"> .DataType(&#123;ge::DT_FLOAT16&#125;)</span><br><span class="line"> .Format(&#123;ge::FORMAT_ND&#125;)</span><br><span class="line"> .UnknownShapeFormat(&#123;ge::FORMAT_ND&#125;);</span><br><span class="line"> this-&gt;SetInferShape(ge::InferShape);</span><br><span class="line"> this-&gt;AICore()</span><br><span class="line"> .SetTiling(optiling::TilingFunc);</span><br><span class="line"> this-&gt;AICore().AddConfig(<span class="string">&quot;ascend310b&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">OP_ADD(SinhCustom);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>认证成功！</strong></p><div align=center>    <img src="https://i-blog.csdnimg.cn/direct/b40d1557f2a04714ab2ac31adba789d8.jpeg"></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>训练营时间不长但收获满满，同时认识到自己有很多不足，希望勤能补拙！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习记录--简约唯美登录页面</title>
      <link href="/2024/07/25/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E7%AE%80%E7%BA%A6%E5%94%AF%E7%BE%8E%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/"/>
      <url>/2024/07/25/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E7%AE%80%E7%BA%A6%E5%94%AF%E7%BE%8E%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-CSS-JS-实现登陆页面"><a href="#HTML-CSS-JS-实现登陆页面" class="headerlink" title="HTML+CSS+JS 实现登陆页面"></a>HTML+CSS+JS 实现登陆页面</h2><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><br><div align=center>    <img src="https://s2.loli.net/2024/07/25/7jQYHauL64X9Zxr.jpg"></div><br><div align=center>    <img src="https://s2.loli.net/2024/07/25/QnJmxGzdCVOX4LK.jpg"></div><br><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>log &amp; register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: .<span class="number">3s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">login/04.jpg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.shell</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ffffff49</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>) inset;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#ff9dff80</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;password&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">5</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline</span>: none</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;password&quot;</span>]</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">letter-spacing</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#92A7E8</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.Remember</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#7597ff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#Password</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ffffff00</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#7597ff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shell&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loginBtn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Remember&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;rememberMe&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;rememberMe&quot;</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;Password&quot;</span>&gt;</span>去注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;Password&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> title = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> loginBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;loginBtn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> rememberMeLabel = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.Remember&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> passwordBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;Password&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (title.<span class="property">innerText</span> === <span class="string">&#x27;Login&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            title.<span class="property">innerText</span> = <span class="string">&#x27;Register&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            loginBtn.<span class="property">value</span> = <span class="string">&#x27;Register&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            rememberMeLabel.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            passwordBtn.<span class="property">innerText</span> = <span class="string">&#x27;去登录&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>).<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>).<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>).<span class="property">placeholder</span> = <span class="string">&#x27;New Username&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>).<span class="property">placeholder</span> = <span class="string">&#x27;New Password&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>).<span class="property">type</span> = <span class="string">&#x27;password&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            title.<span class="property">innerText</span> = <span class="string">&#x27;Login&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            loginBtn.<span class="property">value</span> = <span class="string">&#x27;Login&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            rememberMeLabel.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;1&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            passwordBtn.<span class="property">innerText</span> = <span class="string">&#x27;去注册&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>).<span class="property">placeholder</span> = <span class="string">&#x27;Username&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>).<span class="property">placeholder</span> = <span class="string">&#x27;Password&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;password&#x27;</span>).<span class="property">type</span> = <span class="string">&#x27;password&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习记录--翻页漫画书</title>
      <link href="/2024/07/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E7%BF%BB%E9%A1%B5%E6%BC%AB%E7%94%BB%E4%B9%A6/"/>
      <url>/2024/07/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E7%BF%BB%E9%A1%B5%E6%BC%AB%E7%94%BB%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-CSS实现翻页漫画书"><a href="#HTML-CSS实现翻页漫画书" class="headerlink" title="HTML+CSS实现翻页漫画书"></a>HTML+CSS实现翻页漫画书</h2><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><div align=center>    <img src="https://s2.loli.net/2024/07/22/5KvzZjfMINHPYEd.jpg" ></div><br><div align=center>    <img src="https://s2.loli.net/2024/07/22/dP1krSF7WbeZpGx.jpg" ></div><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>翻页漫画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#9980FA</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">270px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">420px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: .<span class="number">8s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.b</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.e</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.f</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">270px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 这是翻页的起点，在左边 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-origin</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 这是翻页时元素之间的延迟 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--i)*.<span class="number">3s</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 这是翻页时元素的层级 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--i)*<span class="number">99</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.b</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: solid <span class="number">20px</span> <span class="number">#576574</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left</span>: <span class="number">#576574</span> <span class="number">20px</span> solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.c</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.d</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.e</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.f</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 此时翻页的顺序会倒过来，所以我们的延迟和层级也要反一下 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--s)*.<span class="number">4s</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--s)*-<span class="number">99</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i:2;background-image: url(fymh/1.gif);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i:4;--s:1; background-image: url(fymh/2.gif);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i:3;--s:2; background-image: url(fymh/3.gif);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;e&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i:2;--s:3; background-image: url(fymh/4.gif);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;f&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i:1;--s:4; background-image: url(fymh/5.gif);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div&gt;A Boy and Cat&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="画外音"><a href="#画外音" class="headerlink" title="画外音"></a>画外音</h3><p>有时粘贴本地图片使用本地相对地址因为某种不明原因无法显示出来，如博文最开头的效果图，此处采用图片的https地址。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习记录--时间轴效果实现</title>
      <link href="/2024/07/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E6%97%B6%E9%97%B4%E8%BD%B4%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/07/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E6%97%B6%E9%97%B4%E8%BD%B4%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-CSS-JS实现轮播时间轴"><a href="#HTML-CSS-JS实现轮播时间轴" class="headerlink" title="HTML+CSS+JS实现轮播时间轴"></a>HTML+CSS+JS实现轮播时间轴</h2><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><!-- ![.jpg](https://s2.loli.net/2024/07/22/tcLQMhDmexXEV3f.jpg) --><p><img src="https://s2.loli.net/2024/07/22/ob2vlAkLZIBVfrp.jpg" alt="02.jpg"></p><p><img src="https://s2.loli.net/2024/07/22/rQmCVYOZi9KXnk8.jpg" alt="01.jpg"></p><h3 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>轮播时间轴<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://static.fontawesome.com/css/fontawesome-app.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入字体图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./font/iconfont.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入字体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400&amp;display=swap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&quot;Source Sans Pro&quot;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置html和body元素为flex布局，水平和垂直居中对齐，高度为100vh，背景图大小为cover，溢出隐藏，背景图过渡动画时间为0.7秒 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: background-image .<span class="number">7s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.shell元素为相对定位，flex布局，水平和垂直居中对齐，宽度和高度为100%，盒模型为border-box，背景颜色为rgba(99, 99, 99, 0.8) */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.shell</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.button元素为flex布局，两端对齐，宽度为380px，绝对定位，左侧偏移量为50%，水平居中，底部偏移量为-80px */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">380px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: -<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.prev和.next元素过渡动画时间为0.25秒，层级为99999，底部偏移量为5px */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.prev</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: transform <span class="number">0.25s</span> ease;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">99999</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.prev和.next元素中的i元素字体大小为90px，颜色为#fff，光标为指针，文字阴影为0 0 10px #ffffff */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.prev</span> <span class="selector-tag">i</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.next</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.shell_body元素宽度为100%，缩放为0.8倍，上内边距为20px，下内边距为150px */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.shell_body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(.<span class="number">8</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">150px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.shell_slider元素为相对定位，过渡动画时间为1秒，背景为透明 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.shell_slider</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: transform <span class="number">1s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: transparent;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.item元素为相对定位，左浮动，左右外边距为20px */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.frame元素为相对定位，宽度和高度为100%，过渡动画时间为1秒，3D变换模式为保留3D效果 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.frame</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: transform <span class="number">1s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.frame元素的伪元素为绝对定位，底部偏移量为-16%，宽度为100%，高度为60px，背景颜色为#ffffff1c，盒阴影为0px 0px 15px 5px #ffffff1c，3D变换为绕X轴旋转90度并向上平移20px */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.frame</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: -<span class="number">16%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#ffffff1c</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">15px</span> <span class="number">5px</span> <span class="number">#ffffff1c</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translate3d</span>(<span class="number">0px</span>, -<span class="number">20px</span>, <span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.box元素为flex布局，纵向排列，水平和垂直居中对齐，绝对定位，宽度和高度为100%，边框为4px实心白色，透视效果为1000px，3D变换模式为保留3D效果 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.box元素中的h1和span元素颜色为#fff，Z轴平移距离为20px */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">h1</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.box元素中的h1元素文字阴影为0 0 30px #1f05b4，字体大小为100px */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span> <span class="number">#1f05b4</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.box元素中的span元素为绝对定位，底部偏移量为20px，左右内边距为25px，文字阴影为0 0 10px #1f05b4 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#1f05b4</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.front、.left和.right元素的盒阴影为0 0 50px #ffffff，背景图大小为cover */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.front</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span> <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.left和.right元素的顶部偏移量为0，宽度为60px，背面不可见 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">backface-visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.left元素的左侧偏移量为0，左边框宽度为5px，3D变换为向右平移1px，Z轴平移-60px，绕Y轴逆时针旋转90度，变换原点为左侧 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">1px</span>, <span class="number">0</span>, -<span class="number">60px</span>) <span class="built_in">rotateY</span>(-<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-origin</span>: <span class="number">0%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置.right元素的右侧偏移量为0，右边框宽度为5px，3D变换为向左平移1px，Z轴平移-60px，绕Y轴顺时针旋转90度，变换原点为右侧 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-<span class="number">1px</span>, <span class="number">0</span>, -<span class="number">60px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-origin</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shell&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shell_body&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-backward_filled&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-forward_filled&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shell_slider&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box front&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2014<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>-In the year 2014 I reached the age of 13-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box front&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2015<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>-In the year 2015 I reached the age of 14-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box front&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2016<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>-In the year 2016 I reached the age of 15-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box front&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2017<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>-In the year 2017 I reached the age of 16-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box front&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2018<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>-In the year 2018 I reached the age of 17-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box front&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>-In the year 2019 I reached the age of 18-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box front&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>-In the year 2020 I reached the age of 18-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box front&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2021<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>-In the year 2021 I reached the age of 19-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box front&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2022<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>-In the year 2022 I reached the age of 20-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box front&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2023<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>-In the year 2023 I reached the age of 21-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这段JavaScript代码的作用是实现一个图片轮播效果。首先，通过document.getElementsByClassName(&#x27;item&#x27;)获取到所有具有item类名的元素，并将它们存储在items变量中。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后，通过一个循环遍历每个item元素。在循环中，首先获取当前的item元素，然后通过getElementsByClassName方法获取到该item下的frame、front、left和right元素，并将它们分别存储在frame、frontBox、leftBox和rightBox变量中。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 接下来，通过设置frontBox、leftBox和rightBox的style.backgroundImage属性，将背景图片设置为&#x27;url(./img/&#x27; + (i + 1).toString().padStart(2, &#x27;0&#x27;) + &#x27;.jpg)&#x27;，其中(i + 1).toString().padStart(2, &#x27;0&#x27;)表示将循环变量i加1后转换为字符串，并在前面补0，以保证图片的文件名格式正确。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 接着，定义了一个立即执行函数，并在函数内部进行了一些操作。首先，通过document.getElementsByClassName(&#x27;shell&#x27;)[0]获取到具有shell类名的元素，并将其存储在shell变量中。然后，通过shell.getElementsByClassName方法获取到该shell元素下的shell_slider、item、prev和next元素，并将它们分别存储在slider、items、prevBtn和nextBtn变量中。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 接下来，定义了一些变量，包括width、height、totalWidth、margin、currIndex、interval和intervalTime。width和height分别表示每个item的宽度和高度，totalWidth表示所有item的总宽度，margin表示item的外边距，currIndex表示当前显示的item的索引，interval表示定时器的ID，intervalTime表示定时器的时间间隔。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后，定义了init函数，该函数用于初始化一些操作。在该函数中，首先调用resize函数调整大小，然后调用move函数将显示的item移动到中间位置，接着调用bindEvents函数绑定事件，最后调用timer函数启动定时器。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 接着，定义了resize函数，该函数用于在窗口大小变化时调整大小。在该函数中，首先计算出新的width和height，然后根据计算结果设置slider的宽度，以及每个item的宽度和高度。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 接下来，定义了bindEvents函数，该函数用于绑定事件。在该函数中，首先绑定了窗口大小变化时调用resize函数的事件，然后绑定了点击prev按钮和next按钮时调用prev函数和next函数的事件。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 最后，在立即执行函数的末尾，调用了init函数来初始化页面，并定义了move、timer、prev和next函数。其中，move函数用于移动shell到指定的item，timer函数用于启动定时器，prev函数用于切换到上一个item，next函数用于切换到下一个item。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取所有的item元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> items = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;item&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 循环遍历每个item</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取当前item</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> item = items[i];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> frame = item.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;frame&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> frontBox = frame.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;front&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> leftBox = frame.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;left&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> rightBox = frame.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;right&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置背景图片</span></span></span><br><span class="line"><span class="language-javascript">        frontBox.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&#x27;url(./img/&#x27;</span> + (i + <span class="number">1</span>).<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;.jpg)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        leftBox.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&#x27;url(./img/&#x27;</span> + (i + <span class="number">1</span>).<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;.jpg)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        rightBox.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&#x27;url(./img/&#x27;</span> + (i + <span class="number">1</span>).<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;.jpg)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;use strict&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> shell = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;shell&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> slider = shell.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;shell_slider&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> items = shell.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;item&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> prevBtn = shell.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;prev&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nextBtn = shell.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;next&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定义变量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> width, height, totalWidth, margin = <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">            currIndex = <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            interval, intervalTime = <span class="number">3000</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 初始化函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">resize</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">move</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(items.<span class="property">length</span> / <span class="number">2</span>));</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">bindEvents</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">timer</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">resize</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 窗口大小变化时调整大小</span></span></span><br><span class="line"><span class="language-javascript">            width = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span> * <span class="number">.20</span>, <span class="number">275</span>);</span></span><br><span class="line"><span class="language-javascript">            height = <span class="variable language_">window</span>.<span class="property">innerHeight</span> * <span class="number">.5</span>;</span></span><br><span class="line"><span class="language-javascript">            totalWidth = width * items.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置slider宽度</span></span></span><br><span class="line"><span class="language-javascript">            slider.<span class="property">style</span>.<span class="property">width</span> = totalWidth + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置每个item的宽度和高度</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> item = items[i];</span></span><br><span class="line"><span class="language-javascript">                item.<span class="property">style</span>.<span class="property">width</span> = (width - (margin * <span class="number">2</span>)) + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                item.<span class="property">style</span>.<span class="property">height</span> = height + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">bindEvents</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 窗口大小变化时调整大小</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">onresize</span> = resize;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 点击prev按钮切换item</span></span></span><br><span class="line"><span class="language-javascript">            prevBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="title function_">prev</span>(); &#125;);</span></span><br><span class="line"><span class="language-javascript">            nextBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="title function_">next</span>(); &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 移动shell到指定的item</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (index &lt; <span class="number">1</span>) index = items.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (index &gt; items.<span class="property">length</span>) index = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            currIndex = index;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 遍历所有item</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> item = items[i],</span></span><br><span class="line"><span class="language-javascript">                    box = item.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;frame&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (i == (index - <span class="number">1</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 当前item添加active类并设置3D效果</span></span></span><br><span class="line"><span class="language-javascript">                    item.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;item--active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    box.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;perspective(1200px)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 其他item移除active类并设置3D效果</span></span></span><br><span class="line"><span class="language-javascript">                    item.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;item--active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    box.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;perspective(1200px) rotateY(&quot;</span> + (i &lt; (index - <span class="number">1</span>) ? <span class="number">40</span> : -<span class="number">40</span>) + <span class="string">&quot;deg)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 移动slider</span></span></span><br><span class="line"><span class="language-javascript">            slider.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;translate3d(&quot;</span> + ((index * -width) + (width / <span class="number">2</span>) + <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="number">2</span>) + <span class="string">&quot;px, 0, 0)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置body背景图片</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> frontBox = items[index - <span class="number">1</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;front&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = frontBox.<span class="property">style</span>.<span class="property">backgroundImage</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定时器，自动切换shell</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(interval);</span></span><br><span class="line"><span class="language-javascript">            interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">move</span>(++currIndex);</span></span><br><span class="line"><span class="language-javascript">            &#125;, intervalTime);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 切换item</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">prev</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">move</span>(--currIndex);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">timer</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">move</span>(++currIndex);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">timer</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在VScode中新建.html文件将以上代码段依次粘贴进去就完成了！不要忘记把img文件夹放在同级根目录下，使用到的图片都要以01.jpg,02.jpg……10.jpg形式命名哦，图片分辨率建议1200*560px~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/18/hello-world/"/>
      <url>/2024/07/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
